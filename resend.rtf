{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 # Create API key\
Source: https://resend.com/docs/api-reference/api-keys/create-api-key\
\
POST /api-keys\
Add a new API key to authenticate communications with Resend.\
\
## Body Parameters\
\
<ParamField body="name" type="string" required>\
  The API key name.\
</ParamField>\
\
<ParamField body="permission" type="full_access | sending_access">\
  The API key can have full access to Resend's API or be only restricted to send\
  emails. \\* `full_access`: Can create, delete, get, and update any resource. \\*\
  `sending_access`: Can only send emails.\
</ParamField>\
\
<ParamField body="domain_id" type="string">\
  Restrict an API key to send emails only from a specific domain. This is only\
  used when the `permission` is set to `sending_access`.\
</ParamField>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.apiKeys.create(\{ name: 'Production' \});\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->apiKeys->create([\
    'name' => 'Production'\
  ]);\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  params: resend.ApiKeys.CreateParams = \{\
    "name": "Production",\
  \}\
\
  resend.ApiKeys.create(params)\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  params = \{\
    name: "Production"\
  \}\
  Resend::ApiKeys.create(params)\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
  params := &resend.CreateApiKeyRequest\{\
      Name: "Production",\
  \}\
  apiKey, _ := client.ApiKeys.Create(params)\
  ```\
\
  ```rust Rust\
  use resend_rs::\{types::CreateApiKeyOptions, Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let _api_key = resend\
      .api_keys\
      .create(CreateApiKeyOptions::new("Production"))\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          CreateApiKeyOptions params = CreateApiKeyOptions\
                  .builder()\
                  .name("Production").build();\
\
          CreateApiKeyResponse apiKey = resend.apiKeys().create(params);\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var resp = await resend.ApiKeyCreateAsync( "Production" );\
  Console.WriteLine( "Token=\{0\}", resp.Content.Token );\
  ```\
\
  ```bash cURL\
  curl -X POST 'https://api.resend.com/api-keys' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "name": "Production"\
  \}'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "id": "dacf4072-4119-4d88-932f-6202748ac7c8",\
    "token": "re_c1tpEyD8_NKFusih9vKVQknRAQfmFcWCv"\
  \}\
  ```\
</ResponseExample>\
\
\
# Delete API key\
Source: https://resend.com/docs/api-reference/api-keys/delete-api-key\
\
DELETE /api-keys/:api_key_id\
Remove an existing API key.\
\
## Path Parameters\
\
<ParamField path="api_key_id" type="string" required>\
  The API key ID.\
</ParamField>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.apiKeys.remove(\
    'b6d24b8e-af0b-4c3c-be0c-359bbd97381e',\
  );\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->apiKeys->remove('b6d24b8e-af0b-4c3c-be0c-359bbd97381e');\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
  resend.ApiKeys.remove(api_key_id="b6d24b8e-af0b-4c3c-be0c-359bbd97381e")\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  Resend::ApiKeys.remove "b6d24b8e-af0b-4c3c-be0c-359bbd97381e"\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
  client.ApiKeys.Remove("b6d24b8e-af0b-4c3c-be0c-359bbd97381e")\
  ```\
\
  ```rust Rust\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    resend\
      .api_keys\
      .delete("b6d24b8e-af0b-4c3c-be0c-359bbd97381e")\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          resend.apiKeys().remove("b6d24b8e-af0b-4c3c-be0c-359bbd97381e");\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  await resend.ApiKeyDeleteAsync( new Guid( "b6d24b8e-af0b-4c3c-be0c-359bbd97381e" ) );\
  ```\
\
  ```bash cURL\
  curl -X DELETE 'https://api.resend.com/api-keys/b6d24b8e-af0b-4c3c-be0c-359bbd97381e' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```text Response\
  HTTP 200 OK\
  ```\
</ResponseExample>\
\
\
# List API keys\
Source: https://resend.com/docs/api-reference/api-keys/list-api-keys\
\
GET /api-keys\
Retrieve a list of API keys for the authenticated user.\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.apiKeys.list();\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->apiKeys->list();\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
  resend.ApiKeys.list()\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  Resend::ApiKeys.list\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
  keys, err := client.ApiKeys.List()\
  ```\
\
  ```rust Rust\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let _api_keys = resend.api_keys.list().await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          resend.apiKeys().list();\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var resp = await resend.ApiKeyListAsync();\
  Console.WriteLine( "Nr keys=\{0\}", resp.Content.Count );\
  ```\
\
  ```bash cURL\
  curl -X GET 'https://api.resend.com/api-keys' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "data": [\
      \{\
        "id": "91f3200a-df72-4654-b0cd-f202395f5354",\
        "name": "Production",\
        "created_at": "2023-04-08T00:11:13.110779+00:00"\
      \}\
    ]\
  \}\
  ```\
</ResponseExample>\
\
\
# Create Audience\
Source: https://resend.com/docs/api-reference/audiences/create-audience\
\
POST /audiences\
Create a list of contacts.\
\
## Body Parameters\
\
<ParamField body="name" type="string" required>\
  The name of the audience you want to create.\
</ParamField>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.audiences.create(\{\
    name: 'Registered Users',\
  \});\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->audiences->create([\
    'name' => 'Registered Users'\
  ]);\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  params: resend.Audiences.CreateParams = \{\
    "name": "Registered Users"\
  \}\
\
  resend.Audiences.create(params)\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  Resend::Audiences.create(\{ name: "Registered Users" \})\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  params := &resend.CreateAudienceRequest\{\
    Name: "Registered Users",\
  \}\
\
  audience, err := client.Audiences.Create(params)\
  ```\
\
  ```rust Rust\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let _audience = resend.audiences.create("Registered Users").await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          CreateAudienceOptions params = CreateAudienceOptions\
                  .builder()\
                  .name("Registered Users").build();\
\
          CreateAudienceResponseSuccess data = resend.audiences().create(params);\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var resp = await resend.AudienceAddAsync( "Registered Users" );\
  Console.WriteLine( "AudienceId=\{0\}", resp.Content );\
  ```\
\
  ```bash cURL\
  curl -X POST 'https://api.resend.com/audiences' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "name": "Registered Users"\
  \}'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "object": "audience",\
    "id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
    "name": "Registered Users"\
  \}\
  ```\
</ResponseExample>\
\
\
# Delete Audience\
Source: https://resend.com/docs/api-reference/audiences/delete-audience\
\
DELETE /audiences/:audience_id\
Remove an existing audience.\
\
## Path Parameters\
\
<ParamField path="audience_id" type="string" required>\
  The Audience ID.\
</ParamField>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.audiences.remove(\
    '78261eea-8f8b-4381-83c6-79fa7120f1cf',\
  );\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->audiences->remove('78261eea-8f8b-4381-83c6-79fa7120f1cf');\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  resend.Audiences.remove("78261eea-8f8b-4381-83c6-79fa7120f1cf")\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  Resend::Audiences.remove("78261eea-8f8b-4381-83c6-79fa7120f1cf")\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  removed, err := client.Audiences.Remove("78261eea-8f8b-4381-83c6-79fa7120f1cf")\
  ```\
\
  ```rust Rust\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let _deleted = resend\
      .audiences\
      .delete("78261eea-8f8b-4381-83c6-79fa7120f1cf")\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          RemoveAudienceResponseSuccess data = resend.audiences().remove("78261eea-8f8b-4381-83c6-79fa7120f1cf");\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  await resend.AudienceDeleteAsync( new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ) );\
  ```\
\
  ```bash cURL\
  curl -X DELETE 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "object": "audience",\
    "id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
    "deleted": true\
  \}\
  ```\
</ResponseExample>\
\
\
# Retrieve Audience\
Source: https://resend.com/docs/api-reference/audiences/get-audience\
\
GET /audiences/:audience_id\
Retrieve a single audience.\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.audiences.get(\
    '78261eea-8f8b-4381-83c6-79fa7120f1cf',\
  );\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->audiences->get('78261eea-8f8b-4381-83c6-79fa7120f1cf');\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  resend.Audiences.get("78261eea-8f8b-4381-83c6-79fa7120f1cf")\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  Resend::Audiences.get("78261eea-8f8b-4381-83c6-79fa7120f1cf")\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  audience, err := client.Audiences.Get("78261eea-8f8b-4381-83c6-79fa7120f1cf")\
  ```\
\
  ```rust Rust\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let _audience = resend\
      .audiences\
      .get("78261eea-8f8b-4381-83c6-79fa7120f1cf")\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          GetAudienceResponseSuccess data = resend.audiences().get("78261eea-8f8b-4381-83c6-79fa7120f1cf");\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var resp = await resend.AudienceRetrieveAsync( new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ) );\
  Console.WriteLine( "Name=\{0\}", resp.Content.Name );\
  ```\
\
  ```bash cURL\
  curl -X GET 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "object": "audience",\
    "id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
    "name": "Registered Users",\
    "created_at": "2023-10-06T22:59:55.977Z"\
  \}\
  ```\
</ResponseExample>\
\
\
# List Audiences\
Source: https://resend.com/docs/api-reference/audiences/list-audiences\
\
GET /audiences\
Retrieve a list of audiences.\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.audiences.list();\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->audiences->list();\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  resend.Audiences.list()\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  Resend::Audiences.list\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  audiences, err := client.Audiences.List()\
  ```\
\
  ```rust Rust\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let _audiences = resend\
      .audiences\
      .list()\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          ListAudiencesResponseSuccess data = resend.audiences().list();\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var resp = await resend.AudienceListAsync();\
  Console.WriteLine( "Nr Audience=\{0\}", resp.Content.Count );\
  ```\
\
  ```bash cURL\
  curl -X GET 'https://api.resend.com/audiences' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "object": "list",\
    "data": [\
      \{\
        "id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
        "name": "Registered Users",\
        "created_at": "2023-10-06T22:59:55.977Z"\
      \}\
    ]\
  \}\
  ```\
</ResponseExample>\
\
\
# Create Broadcast\
Source: https://resend.com/docs/api-reference/broadcasts/create-broadcast\
\
POST /broadcasts\
Create a new broadcast to send to your audience.\
\
## Body Parameters\
\
<ParamField body="audience_id" type="string" required>\
  The ID of the audience you want to send to.\
</ParamField>\
\
<ParamField body="from" type="string" required>\
  Sender email address.\
\
  To include a friendly name, use the format `"Your Name <sender@domain.com>"`.\
</ParamField>\
\
<ParamField body="subject" type="string" required>\
  Email subject.\
</ParamField>\
\
<ParamField body="reply_to" type="string | string[]">\
  Reply-to email address. For multiple addresses, send as an array of strings.\
</ParamField>\
\
<ParamField body="html" type="string">\
  The HTML version of the message.\
</ParamField>\
\
<ParamField body="text" type="string">\
  The plain text version of the message.\
\
  <Info>\
    If not provided, the HTML will be used to generate a plain text version. You\
    can opt out of this behavior by setting value to an empty string.\
  </Info>\
</ParamField>\
\
<ParamField body="react" type="React.ReactNode">\
  The React component used to write the message. *Only available in the Node.js\
  SDK.*\
</ParamField>\
\
<ParamField body="name" type="string">\
  The friendly name of the broadcast. Only used for internal reference.\
</ParamField>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.broadcasts.create(\{\
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',\
    from: 'Acme <onboarding@resend.dev>',\
    subject: 'hello world',\
    html: 'Hi \{\{\{FIRST_NAME|there\}\}\}, you can unsubscribe here: \{\{\{RESEND_UNSUBSCRIBE_URL\}\}\}',\
  \});\
  ```\
\
  ```rust Rust\
  use resend_rs::\{types::CreateBroadcastOptions, Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let audience_id = "78261eea-8f8b-4381-83c6-79fa7120f1cf";\
    let from = "Acme <onboarding@resend.dev>";\
    let subject = "hello world";\
    let html = "Hi \{\{\{FIRST_NAME|there\}\}\}, you can unsubscribe here: \{\{\{RESEND_UNSUBSCRIBE_URL\}\}\}";\
\
    let opts = CreateBroadcastOptions::new(audience_id, from, subject).with_html(html);\
\
    let _broadcast = resend.broadcasts.create(opts).await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->broadcasts->create([\
    'audience_id' => '78261eea-8f8b-4381-83c6-79fa7120f1cf',\
    'from' => 'Acme <onboarding@resend.dev>',\
    'subject' => 'hello world',\
    'html' => 'Hi \{\{\{FIRST_NAME|there\}\}\}, you can unsubscribe here: \{\{\{RESEND_UNSUBSCRIBE_URL\}\}\}',\
  ]);\
  ```\
\
  ```java Java\
  Resend resend = new Resend("re_xxxxxxxxx");\
\
  CreateBroadcastOptions params = CreateBroadcastOptions.builder()\
      .audienceId("78261eea-8f8b-4381-83c6-79fa7120f1cf")\
      .from("Acme <onboarding@resend.dev>")\
      .subject("hello world")\
      .html("Hi \{\{\{FIRST_NAME|there\}\}\}, you can unsubscribe here: \{\{\{RESEND_UNSUBSCRIBE_URL\}\}\}")\
      .build();\
\
  CreateBroadcastResponseSuccess data = resend.broadcasts().create(params);\
  ```\
\
  ```py Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  params: resend.Broadcasts.CreateParams = \{\
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
    "from": "Acme <onboarding@resend.dev>",\
    "subject": "Hello, world!",\
    "html": "Hi \{\{\{FIRST_NAME|there\}\}\}, you can unsubscribe here: \{\{\{RESEND_UNSUBSCRIBE_URL\}\}\}",\
  \}\
\
  resend.Broadcasts.create(params)\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  params = \{\
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
    "from": "Acme <onboarding@resend.dev>",\
    "subject": "hello world",\
    "html": "Hi \{\{\{FIRST_NAME|there\}\}\}, you can unsubscribe here: \{\{\{RESEND_UNSUBSCRIBE_URL\}\}\}",\
  \}\
  Resend::Broadcasts.create(params)\
  ```\
\
  ```go Go\
  import "fmt"\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  params := &resend.CreateBroadcastRequest\{\
    AudienceId: "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
    From:       "Acme <onboarding@resend.dev>",\
    Html:       "Hi \{\{\{FIRST_NAME|there\}\}\}, you can unsubscribe here: \{\{\{RESEND_UNSUBSCRIBE_URL\}\}\}",\
    Subject:    "Hello, world!",\
  \}\
\
  broadcast, _ := client.Broadcasts.Create(params)\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var resp = await resend.BroadcastAddAsync(\
      new BroadcastData()\
      \{\
          DisplayName = "Example Broadcast",\
          AudienceId = new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ),\
          From = "Acme <onboarding@resend.dev>",\
          Subject = "Hello, world!",\
          HtmlBody = "Hi \{\{\{FIRST_NAME|there\}\}\}, you can unsubscribe here: \{\{\{RESEND_UNSUBSCRIBE_URL\}\}\}",\
      \}\
  );\
  Console.WriteLine( "Broadcast Id=\{0\}", resp.Content );\
  ```\
\
  ```bash cURL\
  curl -X POST 'https://api.resend.com/broadcasts' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
    "from": "Acme <onboarding@resend.dev>",\
    "subject": "hello world",\
    "html": "Hi \{\{\{FIRST_NAME|there\}\}\}, you can unsubscribe here: \{\{\{RESEND_UNSUBSCRIBE_URL\}\}\}"\
  \}'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794"\
  \}\
  ```\
</ResponseExample>\
\
\
# Delete Broadcast\
Source: https://resend.com/docs/api-reference/broadcasts/delete-broadcast\
\
DELETE /broadcasts/:broadcast_id\
Remove an existing broadcast.\
\
You can only delete broadcasts that are in the `draft` status. In addition, if you delete a broadcast that has already been scheduled to be sent, we will automatically cancel the scheduled delivery and it won't be sent.\
\
## Path Parameters\
\
<ParamField path="broadcast_id" type="string" required>\
  The broadcast ID.\
</ParamField>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.broadcasts.remove(\
    '559ac32e-9ef5-46fb-82a1-b76b840c0f7b',\
  );\
  ```\
\
  ```rust Rust\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let _deleted = resend\
      .broadcasts\
      .delete("559ac32e-9ef5-46fb-82a1-b76b840c0f7b")\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->broadcasts->remove('559ac32e-9ef5-46fb-82a1-b76b840c0f7b');\
  ```\
\
  ```java Java\
  Resend resend = new Resend("re_xxxxxxxxx");\
\
  RemoveBroadcastResponseSuccess data = resend.broadcasts().remove("559ac32e-9ef5-46fb-82a1-b76b840c0f7b");\
  ```\
\
  ```py Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  resend.Broadcasts.remove(id="559ac32e-9ef5-46fb-82a1-b76b840c0f7b")\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  Resend::Broadcasts.remove("559ac32e-9ef5-46fb-82a1-b76b840c0f7b")\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  removed, _ := client.Broadcasts.Remove("559ac32e-9ef5-46fb-82a1-b76b840c0f7b")\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  await resend.BroadcastDeleteAsync( new Guid( "559ac32e-9ef5-46fb-82a1-b76b840c0f7b" ) );\
  ```\
\
  ```bash cURL\
  curl -X DELETE 'https://api.resend.com/broadcasts/559ac32e-9ef5-46fb-82a1-b76b840c0f7b' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "object": "broadcast",\
    "id": "559ac32e-9ef5-46fb-82a1-b76b840c0f7b",\
    "deleted": true\
  \}\
  ```\
</ResponseExample>\
\
\
# Retrieve Broadcast\
Source: https://resend.com/docs/api-reference/broadcasts/get-broadcast\
\
GET /broadcasts/:broadcast_id\
Retrieve a single broadcast.\
\
You can retrieve broadcasts created via both this API and the Resend dashboard. Note that currently the API does not return the `html` and `text` fields for broadcasts.\
\
## Path Parameters\
\
<ParamField path="broadcast_id" type="string" required>\
  The broadcast ID.\
</ParamField>\
\
<Info>\
  See all available `status` types in [the Broadcasts\
  overview](/dashboard/broadcasts/introduction#understand-broadcast-statuses).\
</Info>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.broadcasts.get(\
    '559ac32e-9ef5-46fb-82a1-b76b840c0f7b',\
  );\
  ```\
\
  ```rust Rust\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let _broadcast = resend\
      .broadcasts\
      .get("559ac32e-9ef5-46fb-82a1-b76b840c0f7b")\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->broadcasts->get('559ac32e-9ef5-46fb-82a1-b76b840c0f7b');\
  ```\
\
  ```java Java\
  Resend resend = new Resend("re_xxxxxxxxx");\
\
  GetBroadcastResponseSuccess data = resend.broadcasts().get("559ac32e-9ef5-46fb-82a1-b76b840c0f7b");\
  ```\
\
  ```py Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  resend.Broadcasts.get(id="559ac32e-9ef5-46fb-82a1-b76b840c0f7b")\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  Resend::Broadcasts.get("559ac32e-9ef5-46fb-82a1-b76b840c0f7b")\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  broadcast, _ := client.Broadcasts.Get("559ac32e-9ef5-46fb-82a1-b76b840c0f7b")\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var resp = await resend.BroadcastRetrieveAsync( new Guid( "559ac32e-9ef5-46fb-82a1-b76b840c0f7b" ) );\
  Console.WriteLine( "Broadcast name=\{0\}", resp.Content.DisplayName );\
  ```\
\
  ```bash cURL\
  curl -X GET 'https://api.resend.com/broadcasts/559ac32e-9ef5-46fb-82a1-b76b840c0f7b' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "object": "broadcast",\
    "id": "559ac32e-9ef5-46fb-82a1-b76b840c0f7b",\
    "name": "Announcements",\
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
    "from": "Acme <onboarding@resend.dev>",\
    "subject": "hello world",\
    "reply_to": null,\
    "preview_text": "Check out our latest announcements",\
    "status": "draft",\
    "created_at": "2024-12-01T19:32:22.980Z",\
    "scheduled_at": null,\
    "sent_at": null\
  \}\
  ```\
</ResponseExample>\
\
\
# List Broadcasts\
Source: https://resend.com/docs/api-reference/broadcasts/list-broadcasts\
\
GET /broadcasts\
Retrieve a list of broadcast.\
\
<Info>\
  See all available `status` types in [the Broadcasts\
  overview](/dashboard/broadcasts/introduction#understand-broadcast-statuses).\
</Info>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.broadcasts.list();\
  ```\
\
  ```rust Rust\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let _broadcasts = resend.broadcasts.list().await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->broadcasts->list();\
  ```\
\
  ```java Java\
  Resend resend = new Resend("re_xxxxxxxxx");\
\
  ListBroadcastsResponseSuccess data = resend.broadcasts().list();\
  ```\
\
  ```py Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  resend.Broadcasts.list()\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  Resend::Broadcasts.list()\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  broadcasts, _ := client.Broadcasts.List()\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var resp = await resend.BroadcastListAsync();\
  Console.WriteLine( "Nr Broadcasts=\{0\}", resp.Content.Count );\
  ```\
\
  ```bash cURL\
  curl -X GET 'https://api.resend.com/broadcasts' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "object": "list",\
    "data": [\
      \{\
        "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",\
        "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
        "status": "draft",\
        "created_at": "2024-11-01T15:13:31.723Z",\
        "scheduled_at": null,\
        "sent_at": null\
      \},\
      \{\
        "id": "559ac32e-9ef5-46fb-82a1-b76b840c0f7b",\
        "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
        "status": "sent",\
        "created_at": "2024-12-01T19:32:22.980Z",\
        "scheduled_at": "2024-12-02T19:32:22.980Z",\
        "sent_at": "2024-12-02T19:32:22.980Z"\
      \}\
    ]\
  \}\
  ```\
</ResponseExample>\
\
\
# Send Broadcast\
Source: https://resend.com/docs/api-reference/broadcasts/send-broadcast\
\
POST /broadcasts/:broadcast_id/send\
Start sending broadcasts to your audience through the Resend API.\
\
<Note>You can send broadcasts only if they were created via the API.</Note>\
\
## Path Parameters\
\
<ParamField path="broadcast_id" type="string" required>\
  The broadcast ID.\
</ParamField>\
\
## Body Parameters\
\
<ParamField body="scheduled_at" type="string">\
  Schedule email to be sent later. The date should be in natural language (e.g.:\
  `in 1 min`) or ISO 8601 format (e.g: `2024-08-05T11:52:01.858Z`).\
</ParamField>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.broadcasts.send(\
    '559ac32e-9ef5-46fb-82a1-b76b840c0f7b',\
    \{\
      scheduledAt: 'in 1 min',\
    \},\
  );\
  ```\
\
  ```rust Rust\
  use resend_rs::\{types::SendBroadcastOptions, Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let opts =\
      SendBroadcastOptions::new("559ac32e-9ef5-46fb-82a1-b76b840c0f7b").with_scheduled_at("in 1 min");\
\
    let _broadcast = resend.broadcasts.send(opts).await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->broadcasts->send('559ac32e-9ef5-46fb-82a1-b76b840c0f7b', [\
    'scheduled_at' => 'in 1 min',\
  ]);\
  ```\
\
  ```java Java\
  Resend resend = new Resend("re_xxxxxxxxx");\
\
  SendBroadcastOptions params = SendBroadcastOptions.builder()\
      .scheduledAt("in 1 min")\
      .build();\
\
  SendBroadcastResponseSuccess data = resend.broadcasts().send(params,\
      "498ee8e4-7aa2-4eb5-9f04-4194848049d1");\
  ```\
\
  ```py Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  params: resend.Broadcasts.SendParams = \{\
    "broadcast_id": "559ac32e-9ef5-46fb-82a1-b76b840c0f7b",\
    "scheduled_at": "in 1 min"\
  \}\
  resend.Broadcasts.send(params)\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  params = \{\
    broadcast_id: "559ac32e-9ef5-46fb-82a1-b76b840c0f7b",\
    scheduled_at: "in 1 min"\
  \}\
  Resend::Broadcasts.send(params)\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  sendParams := &resend.SendBroadcastRequest\{\
    BroadcastId: "559ac32e-9ef5-46fb-82a1-b76b840c0f7b",\
    ScheduledAt: "in 1 min",\
  \}\
\
  sent, _ := client.Broadcasts.Send(sendParams)\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  // Send now\
  await resend.BroadcastSendAsync( new Guid( "559ac32e-9ef5-46fb-82a1-b76b840c0f7b" ) );\
\
  // Send in 5 mins\
  await resend.BroadcastScheduleAsync(\
      new Guid( "559ac32e-9ef5-46fb-82a1-b76b840c0f7b" ),\
      DateTime.UtcNow.AddMinutes( 5 ) );\
  ```\
\
  ```bash cURL\
  curl -X POST 'https://api.resend.com/broadcasts/559ac32e-9ef5-46fb-82a1-b76b840c0f7b/send' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "scheduled_at": "in 1 min"\
  \}'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794"\
  \}\
  ```\
</ResponseExample>\
\
\
# Update Broadcast\
Source: https://resend.com/docs/api-reference/broadcasts/update-broadcast\
\
PATCH /broadcasts/:id\
Update a broadcast to send to your audience.\
\
<Note>You can update broadcasts only if they were created via the API.</Note>\
\
## Path Parameters\
\
<ParamField path="id" type="string" required>\
  The ID of the broadcast you want to update.\
</ParamField>\
\
## Body Parameters\
\
<ParamField body="audience_id" type="string">\
  The ID of the audience you want to send to.\
</ParamField>\
\
<ParamField body="from" type="string">\
  Sender email address.\
\
  To include a friendly name, use the format `"Your Name <sender@domain.com>"`.\
</ParamField>\
\
<ParamField body="subject" type="string">\
  Email subject.\
</ParamField>\
\
<ParamField body="reply_to" type="string | string[]">\
  Reply-to email address. For multiple addresses, send as an array of strings.\
</ParamField>\
\
<ParamField body="html" type="string">\
  The HTML version of the message.\
</ParamField>\
\
<ParamField body="text" type="string">\
  The plain text version of the message.\
\
  <Info>\
    If not provided, the HTML will be used to generate a plain text version. You\
    can opt out of this behavior by setting value to an empty string.\
  </Info>\
</ParamField>\
\
<ParamField body="react" type="React.ReactNode">\
  The React component used to write the message. *Only available in the Node.js\
  SDK.*\
</ParamField>\
\
<ParamField body="name" type="string">\
  The friendly name of the broadcast. Only used for internal reference.\
</ParamField>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.broadcasts.update(\
    '49a3999c-0ce1-4ea6-ab68-afcd6dc2e794',\
    \{\
      html: 'Hi \{\{\{FIRST_NAME|there\}\}\}, you can unsubscribe here: \{\{\{RESEND_UNSUBSCRIBE_URL\}\}\}',\
    \},\
  );\
  ```\
\
  ```rust Rust\
  use resend_rs::\{types::UpdateBroadcastOptions, Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let id = "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794";\
    let html = "Hi \{\{\{FIRST_NAME|there\}\}\}, you can unsubscribe here: \{\{\{RESEND_UNSUBSCRIBE_URL\}\}\}";\
\
    let opts = UpdateBroadcastOptions::new().with_html(html);\
\
    let _broadcast = resend.broadcasts.update(id, opts).await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->broadcasts->update('49a3999c-0ce1-4ea6-ab68-afcd6dc2e794', [\
    'html' => 'Hi \{\{\{FIRST_NAME|there\}\}\}, you can unsubscribe here: \{\{\{RESEND_UNSUBSCRIBE_URL\}\}\}',\
  ]);\
  ```\
\
  ```java Java\
  Resend resend = new Resend("re_xxxxxxxxx");\
\
  UpdateBroadcastOptions params = UpdateBroadcastOptions.builder()\
      .id("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794")\
      .html("Hi \{\{\{FIRST_NAME|there\}\}\}, you can unsubscribe here: \{\{\{RESEND_UNSUBSCRIBE_URL\}\}\}")\
      .build();\
\
  UpdateBroadcastResponseSuccess data = resend.broadcasts().update(params);\
  ```\
\
  ```py Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  params: resend.Broadcasts.UpdateParams = \{\
    "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",\
    "html": "Hi \{\{\{FIRST_NAME|there\}\}\}, you can unsubscribe here: \{\{\{RESEND_UNSUBSCRIBE_URL\}\}\}"\
  \}\
\
  resend.Broadcasts.update(params)\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  params = \{\
    "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",\
    "html": "Hi #\{FIRST_NAME\}, you can unsubscribe here: #\{RESEND_UNSUBSCRIBE_URL\}",\
  \}\
  Resend::Broadcasts.update(params)\
  ```\
\
  ```go Go\
  import "fmt"\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  params := &resend.UpdateBroadcastRequest\{\
    Id: "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",\
    Html: fmt.Sprintf("Hi %s, you can unsubscribe here: %s", FIRST_NAME, RESEND_UNSUBSCRIBE_URL),\
  \}\
\
  broadcast, _ := client.Broadcasts.Update(params)\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var resp = await resend.BroadcastUpdateAsync(\
      new Guid( "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794" ),\
      new BroadcastUpdateData()\
      \{\
          HtmlBody = "Hi \{\{\{FIRST_NAME|there\}\}\}, you can unsubscribe here: \{\{\{RESEND_UNSUBSCRIBE_URL\}\}\}",\
      \}\
  );\
  ```\
\
  ```bash cURL\
  curl -X PATCH 'https://api.resend.com/broadcasts/49a3999c-0ce1-4ea6-ab68-afcd6dc2e794' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "html": "Hi \{\{\{FIRST_NAME|there\}\}\}, you can unsubscribe here: \{\{\{RESEND_UNSUBSCRIBE_URL\}\}\}"\
  \}'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794"\
  \}\
  ```\
</ResponseExample>\
\
\
# Create Contact\
Source: https://resend.com/docs/api-reference/contacts/create-contact\
\
POST /audiences/:audience_id/contacts\
Create a contact inside an audience.\
\
## Body Parameters\
\
<ParamField body="email" type="string" required>\
  The email address of the contact.\
</ParamField>\
\
<ParamField path="audience_id" type="string" required>\
  The Audience ID.\
</ParamField>\
\
<ParamField body="first_name" type="string">\
  The first name of the contact.\
</ParamField>\
\
<ParamField body="last_name" type="string">\
  The last name of the contact.\
</ParamField>\
\
<ParamField body="unsubscribed" type="boolean">\
  The subscription status.\
</ParamField>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.contacts.create(\{\
    email: 'steve.wozniak@gmail.com',\
    firstName: 'Steve',\
    lastName: 'Wozniak',\
    unsubscribed: false,\
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',\
  \});\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->contacts->create(\
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',\
    parameters: [\
      'email' => 'steve.wozniak@gmail.com',\
      'first_name' => 'Steve',\
      'last_name' => 'Wozniak',\
      'unsubscribed' => false\
    ]\
  );\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  params: resend.Contacts.CreateParams = \{\
    "email": "steve.wozniak@gmail.com",\
    "first_name": "Steve",\
    "last_name": "Wozniak",\
    "unsubscribed": False,\
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
  \}\
\
  resend.Contacts.create(params)\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  params = \{\
    "email": "steve.wozniak@gmail.com",\
    "first_name": "Steve",\
    "last_name": "Wozniak",\
    "unsubscribed": false,\
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
  \}\
\
  Resend::Contacts.create(params)\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  params := &resend.CreateContactRequest\{\
    Email:        "steve.wozniak@gmail.com",\
    FirstName:    "Steve",\
    LastName:     "Wozniak",\
    Unsubscribed: false,\
    AudienceId:   "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
  \}\
\
  contact, err := client.Contacts.Create(params)\
  ```\
\
  ```rust Rust\
  use resend_rs::\{types::ContactData, Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let contact = ContactData::new("steve.wozniak@gmail.com")\
      .with_first_name("Steve")\
      .with_last_name("Wozniak")\
      .with_unsubscribed(false);\
\
    let _contact = resend\
      .contacts\
      .create("78261eea-8f8b-4381-83c6-79fa7120f1cf", contact)\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          CreateContactOptions params = CreateContactOptions.builder()\
                  .email("steve.wozniak@gmail.com")\
                  .firstName("Steve")\
                  .lastName("Wozniak")\
                  .unsubscribed(false)\
                  .audienceId("78261eea-8f8b-4381-83c6-79fa7120f1cf")\
                  .build();\
\
          CreateContactResponseSuccess data = resend.contacts().create(params);\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var resp = await resend.ContactAddAsync(\
      new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ),\
      new ContactData()\
      \{\
          Email = "steve.wozniak@gmail.com",\
          FirstName = "Steve",\
          LastName = "Wozniak",\
          IsUnsubscribed = false,\
      \}\
  );\
  Console.WriteLine( "Contact Id=\{0\}", resp.Content );\
  ```\
\
  ```bash cURL\
  curl -X POST 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf/contacts' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "email": "steve.wozniak@gmail.com",\
    "first_name": "Steve",\
    "last_name": "Wozniak",\
    "unsubscribed": false\
  \}'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "object": "contact",\
    "id": "479e3145-dd38-476b-932c-529ceb705947"\
  \}\
  ```\
</ResponseExample>\
\
\
# Delete Contact\
Source: https://resend.com/docs/api-reference/contacts/delete-contact\
\
DELETE /audiences/:audience_id/contacts/:id\
Remove an existing contact from an audience.\
\
## Path Parameters\
\
<ParamField path="audienceId" type="string" required>\
  The Audience ID.\
</ParamField>\
\
Either `id` or `email` must be provided.\
\
<ParamField path="id" type="string">\
  The Contact ID.\
</ParamField>\
\
<ParamField path="email" type="string">\
  The Contact email.\
</ParamField>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  // Delete by contact id\
  const \{ data, error \} = await resend.contacts.remove(\{\
    id: '520784e2-887d-4c25-b53c-4ad46ad38100',\
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',\
  \});\
\
  // Delete by contact email\
  const \{ data, error \} = await resend.contacts.remove(\{\
    email: 'acme@example.com',\
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',\
  \});\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  // Delete by contact id\
  $resend->contacts->remove(\
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',\
    id: '520784e2-887d-4c25-b53c-4ad46ad38100'\
  );\
\
  // Delete by contact email\
  $resend->contacts->remove(\
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',\
    email: 'acme@example.com'\
  );\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  # Delete by contact id\
  resend.Contacts.remove(\
    id="520784e2-887d-4c25-b53c-4ad46ad38100",\
    audience_id="78261eea-8f8b-4381-83c6-79fa7120f1cf"\
  )\
\
  # Delete by contact email\
  resend.Contacts.remove(\
    email="acme@example.com",\
    audience_id="78261eea-8f8b-4381-83c6-79fa7120f1cf"\
  )\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  # Delete by contact id\
  Resend::Contacts.remove(\
    "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
    "520784e2-887d-4c25-b53c-4ad46ad38100"\
  )\
\
  # Delete by contact email\
  Resend::Contacts.remove(\
    "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
    "acme@example.com"\
  )\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  // Delete by contact id\
  removed, err := client.Contacts.Remove(\
    "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
    "520784e2-887d-4c25-b53c-4ad46ad38100"\
  )\
\
  // Delete by contact email\
  removed, err := client.Contacts.Remove(\
    "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
    "acme@example.com"\
  )\
  ```\
\
  ```rust Rust\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    // Delete by contact id\
    let _deleted = resend\
      .contacts\
      .delete_by_contact_id(\
        "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
        "520784e2-887d-4c25-b53c-4ad46ad38100",\
      )\
      .await?;\
\
    // Delete by contact email\
    let _deleted = resend\
      .contacts\
      .delete_by_email("78261eea-8f8b-4381-83c6-79fa7120f1cf", "acme@example.com")\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          // Delete by contact id\
          resend.contacts().remove(ContactRequestOptions.builder()\
                          .id("520784e2-887d-4c25-b53c-4ad46ad38100")\
                          .audienceId("78261eea-8f8b-4381-83c6-79fa7120f1cf")\
                          .build());\
\
          // Delete by contact email\
          resend.contacts().remove(ContactRequestOptions.builder()\
                          .email("acme@example.com")\
                          .audienceId("78261eea-8f8b-4381-83c6-79fa7120f1cf")\
                          .build());\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  // By Id\
  await resend.ContactDeleteAsync(\
      audienceId: new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ),\
      contactId: new Guid( "520784e2-887d-4c25-b53c-4ad46ad38100" )\
  );\
\
  // By Email\
  await resend.ContactDeleteByEmailAsync(\
      new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ),\
      "acme@example.com"\
  );\
  ```\
\
  ```bash cURL\
  # Delete by contact id\
  curl -X DELETE 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf/contacts/520784e2-887d-4c25-b53c-4ad46ad38100' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx'\
\
  # Deleted by contact email\
  curl -X DELETE 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf/contacts/acme@example.com' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "object": "contact",\
    "contact": "520784e2-887d-4c25-b53c-4ad46ad38100",\
    "deleted": true\
  \}\
  ```\
</ResponseExample>\
\
\
# Retrieve Contact\
Source: https://resend.com/docs/api-reference/contacts/get-contact\
\
GET /audiences/:audience_id/contacts/:id\
Retrieve a single contact from an audience.\
\
## Path Parameters\
\
<ParamField path="audienceId" type="string" required>\
  The Audience ID.\
</ParamField>\
\
Either `id` or `email` must be provided.\
\
<ParamField path="id" type="string">\
  The Contact ID.\
</ParamField>\
\
<ParamField path="email" type="string">\
  The Contact Email.\
</ParamField>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  // Get by contact id\
  const \{ data, error \} = await resend.contacts.get(\{\
    id: 'e169aa45-1ecf-4183-9955-b1499d5701d3',\
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',\
  \});\
\
  // Get by contact email\
  const \{ data, error \} = await resend.contacts.get(\{\
    email: 'steve.wozniak@gmail.com',\
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',\
  \});\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  // Get by contact id\
  $resend->contacts->get(\
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',\
    id: 'e169aa45-1ecf-4183-9955-b1499d5701d3'\
  );\
\
  // Get by contact email\
  $resend->contacts->get(\
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',\
    email: 'steve.wozniak@gmail.com'\
  );\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  # Get by contact id\
  resend.Contacts.get(\
    id="e169aa45-1ecf-4183-9955-b1499d5701d3",\
    audience_id="78261eea-8f8b-4381-83c6-79fa7120f1cf"\
  )\
\
  # Get by contact email\
  resend.Contacts.get(\
    email="steve.wozniak@gmail.com",\
    audience_id="78261eea-8f8b-4381-83c6-79fa7120f1cf"\
  )\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  # Get by contact id\
  params = \{\
    "id": "e169aa45-1ecf-4183-9955-b1499d5701d3",\
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
  \}\
\
  Resend::Contacts.get(params)\
\
  # Get by contact email\
  params = \{\
    "email": "steve.wozniak@gmail.com",\
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
  \}\
\
  Resend::Contacts.get(params)\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  // Get by contact id\
  id := "e169aa45-1ecf-4183-9955-b1499d5701d3",\
  contact, err := client.Contacts.Get(audienceId, id)\
\
  // Get by contact email\
  email := "steve.wozniak@gmail.com",\
  contact, err := client.Contacts.Get(audienceId, email)\
  ```\
\
  ```rust Rust\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    // Get by contact id\
    let _contact = resend\
      .contacts\
      .get_by_id(\
        "e169aa45-1ecf-4183-9955-b1499d5701d3",\
        "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
      )\
      .await?;\
\
    // Get by contact email\
    let _contact = resend\
      .contacts\
      .get_by_email(\
        "steve.wozniak@gmail.com",\
        "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
      )\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          // Get by contact id\
          GetContactOptions params = GetContactOptions.builder()\
                  .id("e169aa45-1ecf-4183-9955-b1499d5701d3")\
                  .audienceId("78261eea-8f8b-4381-83c6-79fa7120f1cf").build();\
\
          // Get by contact email\
          GetContactOptions params = GetContactOptions.builder()\
                  .email("steve.wozniak@gmail.com")\
                  .audienceId("78261eea-8f8b-4381-83c6-79fa7120f1cf").build();\
\
          GetContactResponseSuccess data = resend.contacts().get(params);\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  // Get by contact id\
  var resp = await resend.ContactRetrieveAsync(\
      audienceId: new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ),\
      contactId: new Guid( "e169aa45-1ecf-4183-9955-b1499d5701d3" )\
  );\
\
  // Get by contact email\
  var resp = await resend.ContactRetrieveAsync(\
      audienceId: new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ),\
      email: "steve.wozniak@gmail.com"\
  );\
\
  Console.WriteLine( "Contact Email=\{0\}", resp.Content.Email );\
  ```\
\
  ```bash cURL\
  # Get by contact id\
  curl -X GET 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf/contacts/e169aa45-1ecf-4183-9955-b1499d5701d3' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx'\
\
  # Get by contact email\
  curl -X GET 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf/contacts/steve.wozniak@gmail.com' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "object": "contact",\
    "id": "e169aa45-1ecf-4183-9955-b1499d5701d3",\
    "email": "steve.wozniak@gmail.com",\
    "first_name": "Steve",\
    "last_name": "Wozniak",\
    "created_at": "2023-10-06T23:47:56.678Z",\
    "unsubscribed": false\
  \}\
  ```\
</ResponseExample>\
\
\
# List Contacts\
Source: https://resend.com/docs/api-reference/contacts/list-contacts\
\
GET /audiences/:audience_id/contacts\
Show all contacts from an audience.\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.contacts.list(\{\
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',\
  \});\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->contacts->list(\
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf'\
  );\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  resend.Contacts.list(\
    audience_id="78261eea-8f8b-4381-83c6-79fa7120f1cf"\
  )\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  Resend::Contacts.list("78261eea-8f8b-4381-83c6-79fa7120f1cf")\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  contacts, err := client.Contacts.List("78261eea-8f8b-4381-83c6-79fa7120f1cf")\
  ```\
\
  ```rust Rust\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let _contacts = resend\
      .contacts\
      .list("78261eea-8f8b-4381-83c6-79fa7120f1cf")\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          ListContactsResponseSuccess data = resend.contacts().list("78261eea-8f8b-4381-83c6-79fa7120f1cf");\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var resp = await resend.ContactListAsync( new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ) );\
  Console.WriteLine( "Nr Contacts=\{0\}", resp.Content.Count );\
  ```\
\
  ```bash cURL\
  curl -X GET 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf/contacts' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "object": "list",\
    "data": [\
      \{\
        "id": "e169aa45-1ecf-4183-9955-b1499d5701d3",\
        "email": "steve.wozniak@gmail.com",\
        "first_name": "Steve",\
        "last_name": "Wozniak",\
        "created_at": "2023-10-06T23:47:56.678Z",\
        "unsubscribed": false\
      \}\
    ]\
  \}\
  ```\
</ResponseExample>\
\
\
# Update Contact\
Source: https://resend.com/docs/api-reference/contacts/update-contact\
\
PATCH /audiences/:audience_id/contacts/:id\
Update an existing contact.\
\
## Path Parameters\
\
<ParamField path="audienceId" type="string" required>\
  The Audience ID.\
</ParamField>\
\
Either `id` or `email` must be provided.\
\
<ParamField path="id" type="string">\
  The Contact ID.\
</ParamField>\
\
<ParamField path="email" type="string">\
  The Contact Email.\
</ParamField>\
\
## Body Parameters\
\
<ParamField body="first_name" type="string">\
  The first name of the contact.\
</ParamField>\
\
<ParamField body="last_name" type="string">\
  The last name of the contact.\
</ParamField>\
\
<ParamField body="unsubscribed" type="boolean">\
  The subscription status.\
</ParamField>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  // Update by contact id\
  const \{ data, error \} = await resend.contacts.update(\{\
    id: 'e169aa45-1ecf-4183-9955-b1499d5701d3',\
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',\
    unsubscribed: true,\
  \});\
\
  // Update by contact email\
  const \{ data, error \} = await resend.contacts.update(\{\
    email: 'acme@example.com',\
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',\
    unsubscribed: true,\
  \});\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  // Update by contact id\
  $resend->contacts->update(\
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',\
    id: 'e169aa45-1ecf-4183-9955-b1499d5701d3',\
    parameters: [\
      'unsubscribed' => true\
    ]\
  );\
\
  // Update by contact email\
  $resend->contacts->update(\
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',\
    email: 'acme@example.com',\
    parameters: [\
      'unsubscribed' => true\
    ]\
  );\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  # Update by contact id\
  params: resend.Contacts.UpdateParams = \{\
    "id": "e169aa45-1ecf-4183-9955-b1499d5701d3",\
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
    "unsubscribed": True,\
  \}\
\
  resend.Contacts.update(params)\
\
  # Update by contact email\
  params: resend.Contacts.UpdateParams = \{\
    "email": "acme@example.com",\
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
    "unsubscribed": True,\
  \}\
\
  resend.Contacts.update(params)\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  # Update by contact id\
  params = \{\
    "id": "e169aa45-1ecf-4183-9955-b1499d5701d3",\
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
    "unsubscribed": true,\
  \}\
\
  Resend::Contacts.update(params)\
\
  # Update by contact email\
  params = \{\
    "email": "acme@example.com",\
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
    "unsubscribed": true,\
  \}\
\
  Resend::Contacts.update(params)\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  // Update by contact id\
  params := &resend.UpdateContactRequest\{\
    Id:           "e169aa45-1ecf-4183-9955-b1499d5701d3",\
    AudienceId:   "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
    Unsubscribed: true,\
  \}\
\
  contact, err := client.Contacts.Update(params)\
\
  // Update by contact email\
  params = &resend.UpdateContactRequest\{\
    Email:        "acme@example.com",\
    AudienceId:   "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
    Unsubscribed: true,\
  \}\
\
  contact, err := client.Contacts.Update(params)\
  ```\
\
  ```rust Rust\
  use resend_rs::\{types::ContactChanges, Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let changes = ContactChanges::new().with_unsubscribed(true);\
\
    // Update by contact id\
    let _contact = resend\
      .contacts\
      .update_by_id(\
        "e169aa45-1ecf-4183-9955-b1499d5701d3",\
        "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
        changes.clone(),\
      )\
      .await?;\
\
    // Update by contact email\
    let _contact = resend\
      .contacts\
      .update_by_email(\
        "acme@example.com",\
        "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
        changes,\
      )\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          // Update by contact id\
          UpdateContactOptions params = UpdateContactOptions.builder()\
                  .audienceId("78261eea-8f8b-4381-83c6-79fa7120f1cf")\
                  .id("e169aa45-1ecf-4183-9955-b1499d5701d3")\
                  .unsubscribed(true)\
                  .build();\
\
          // Update by contact email\
          UpdateContactOptions params = UpdateContactOptions.builder()\
                  .audienceId("78261eea-8f8b-4381-83c6-79fa7120f1cf")\
                  .email("acme@example.com")\
                  .unsubscribed(true)\
                  .build();\
\
          UpdateContactResponseSuccess data = resend.contacts().update(params);\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  // By Id\
  await resend.ContactUpdateAsync(\
      audienceId: new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ),\
      contactId: new Guid( "e169aa45-1ecf-4183-9955-b1499d5701d3" ),\
      new ContactData()\
      \{\
          FirstName = "Stevie",\
          LastName = "Wozniaks",\
          IsUnsubscribed = true,\
      \}\
  );\
\
  // By Email\
  await resend.ContactUpdateByEmailAsync(\
      new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ),\
      "acme@example.com",\
      new ContactData()\
      \{\
          FirstName = "Stevie",\
          LastName = "Wozniaks",\
          IsUnsubscribed = true,\
      \}\
  );\
  ```\
\
  ```bash cURL\
  # Update by contact id\
  curl -X PATCH 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf/contacts/520784e2-887d-4c25-b53c-4ad46ad38100' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "unsubscribed": true\
  \}'\
\
  # Update by contact email\
  curl -X PATCH 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf/contacts/acme@example.com' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "unsubscribed": true\
  \}'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "object": "contact",\
    "id": "479e3145-dd38-476b-932c-529ceb705947"\
  \}\
  ```\
</ResponseExample>\
\
\
# Create Domain\
Source: https://resend.com/docs/api-reference/domains/create-domain\
\
POST /domains\
Create a domain through the Resend Email API.\
\
## Body Parameters\
\
<ParamField body="name" type="string" required>\
  The name of the domain you want to create.\
</ParamField>\
\
<ParamField body="region" type="string" default="us-east-1">\
  The region where emails will be sent from. Possible values: `'us-east-1' |\
    'eu-west-1' | 'sa-east-1' | 'ap-northeast-1'`\
</ParamField>\
\
<ParamField body="custom_return_path" type="string" default="send">\
  For advanced use cases, choose a subdomain for the Return-Path address. The\
  custom return path is used for SPF authentication, DMARC alignment, and\
  handling bounced emails. Defaults to `send` (i.e., `send.yourdomain.tld`). Avoid\
  setting values that could undermine credibility (e.g. `testing`), as they may\
  be exposed to recipients.\
\
  Learn more about [custom return paths](/dashboard/domains/introduction#custom-return-path).\
</ParamField>\
\
<Info>\
  See all available `status` types in [the Domains\
  overview](/dashboard/domains/introduction#understand-a-domain-status).\
</Info>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.domains.create(\{ name: 'example.com' \});\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->domains->create([\
    'name' => 'example.com'\
  ]);\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  params: resend.Domains.CreateParams = \{\
    "name": "example.com",\
  \}\
\
  resend.Domains.create(params)\
  ```\
\
  ```ruby Ruby\
  Resend.api_key = ENV["RESEND_API_KEY"]\
\
  params = \{\
    name: "example.com",\
  \}\
  domain = Resend::Domains.create(params)\
  puts domain\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  params := &resend.CreateDomainRequest\{\
      Name: "example.com",\
  \}\
\
  domain, err := client.Domains.Create(params)\
  ```\
\
  ```rust Rust\
  use resend_rs::\{types::CreateDomainOptions, Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let _domain = resend\
      .domains\
      .add(CreateDomainOptions::new("example.com"))\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          CreateDomainOptions params = CreateDomainOptions\
                  .builder()\
                  .name("example.com").build();\
\
          CreateDomainResponse domain = resend.domains().create(params);\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var resp = await resend.DomainAddAsync( "example.com" );\
  Console.WriteLine( "Domain Id=\{0\}", resp.Content.Id );\
  ```\
\
  ```bash cURL\
  curl -X POST 'https://api.resend.com/domains' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "name": "example.com"\
  \}'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "id": "4dd369bc-aa82-4ff3-97de-514ae3000ee0",\
    "name": "example.com",\
    "created_at": "2023-03-28T17:12:02.059593+00:00",\
    "status": "not_started",\
    "records": [\
      \{\
        "record": "SPF",\
        "name": "send",\
        "type": "MX",\
        "ttl": "Auto",\
        "status": "not_started",\
        "value": "feedback-smtp.us-east-1.amazonses.com",\
        "priority": 10\
      \},\
      \{\
        "record": "SPF",\
        "name": "send",\
        "value": "\\"v=spf1 include:amazonses.com ~all\\"",\
        "type": "TXT",\
        "ttl": "Auto",\
        "status": "not_started"\
      \},\
      \{\
        "record": "DKIM",\
        "name": "nhapbbryle57yxg3fbjytyodgbt2kyyg._domainkey",\
        "value": "nhapbbryle57yxg3fbjytyodgbt2kyyg.dkim.amazonses.com.",\
        "type": "CNAME",\
        "status": "not_started",\
        "ttl": "Auto"\
      \},\
      \{\
        "record": "DKIM",\
        "name": "xbakwbe5fcscrhzshpap6kbxesf6pfgn._domainkey",\
        "value": "xbakwbe5fcscrhzshpap6kbxesf6pfgn.dkim.amazonses.com.",\
        "type": "CNAME",\
        "status": "not_started",\
        "ttl": "Auto"\
      \},\
      \{\
        "record": "DKIM",\
        "name": "txrcreso3dqbvcve45tqyosxwaegvhgn._domainkey",\
        "value": "txrcreso3dqbvcve45tqyosxwaegvhgn.dkim.amazonses.com.",\
        "type": "CNAME",\
        "status": "not_started",\
        "ttl": "Auto"\
      \}\
    ],\
    "region": "us-east-1"\
  \}\
  ```\
</ResponseExample>\
\
\
# Delete Domain\
Source: https://resend.com/docs/api-reference/domains/delete-domain\
\
DELETE /domains/:domain_id\
Remove an existing domain.\
\
## Path Parameters\
\
<ParamField path="domain_id" type="string" required>\
  The Domain ID.\
</ParamField>\
\
<RequestExample>\
  ```js Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.domains.remove(\
    'd91cd9bd-1176-453e-8fc1-35364d380206',\
  );\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->domains->remove('d91cd9bd-1176-453e-8fc1-35364d380206');\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  resend.Domains.remove(domain_id="d91cd9bd-1176-453e-8fc1-35364d380206")\
  ```\
\
  ```ruby Ruby\
  Resend.api_key = ENV["RESEND_API_KEY"]\
  Resend::Domains.remove("d91cd9bd-1176-453e-8fc1-35364d380206")\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  removed, err := client.Domains.Remove("d91cd9bd-1176-453e-8fc1-35364d380206")\
  ```\
\
  ```rust Rust\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let _deleted = resend\
      .domains\
      .delete("d91cd9bd-1176-453e-8fc1-35364d380206")\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          RemoveDomainResponse removed = resend.domains().remove("d91cd9bd-1176-453e-8fc1-35364d380206");\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  await resend.DomainDeleteAsync( new Guid( "d91cd9bd-1176-453e-8fc1-35364d380206" ) );\
  ```\
\
  ```bash cURL\
  curl -X DELETE 'https://api.resend.com/domains/d91cd9bd-1176-453e-8fc1-35364d380206' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "object": "domain",\
    "id": "d91cd9bd-1176-453e-8fc1-35364d380206",\
    "deleted": true\
  \}\
  ```\
</ResponseExample>\
\
\
# Retrieve Domain\
Source: https://resend.com/docs/api-reference/domains/get-domain\
\
GET /domains/:domain_id\
Retrieve a single domain for the authenticated user.\
\
## Path Parameters\
\
<ParamField path="domain_id" type="string" required>\
  The Domain ID.\
</ParamField>\
\
<Info>\
  See all available `status` types in [the Domains\
  overview](/dashboard/domains/introduction#understand-a-domain-status).\
</Info>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.domains.get(\
    'd91cd9bd-1176-453e-8fc1-35364d380206',\
  );\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->domains->get('d91cd9bd-1176-453e-8fc1-35364d380206');\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  resend.Domains.get(domain_id="d91cd9bd-1176-453e-8fc1-35364d380206")\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  Resend::Domains.get "d91cd9bd-1176-453e-8fc1-35364d380206"\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  retrievedDomain, err := client.Domains.Get("d91cd9bd-1176-453e-8fc1-35364d380206")\
  ```\
\
  ```rust Rust\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let _domain = resend\
      .domains\
      .get("d91cd9bd-1176-453e-8fc1-35364d380206")\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          Domain domain = resend.domains().get("d91cd9bd-1176-453e-8fc1-35364d380206");\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var resp = await resend.DomainRetrieveAsync( new Guid( "d91cd9bd-1176-453e-8fc1-35364d380206" ) );\
  Console.WriteLine( "Domain Id=\{0\}", resp.Content.Name );\
  ```\
\
  ```bash cURL\
  curl -X GET 'https://api.resend.com/domains/d91cd9bd-1176-453e-8fc1-35364d380206' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "object": "domain",\
    "id": "d91cd9bd-1176-453e-8fc1-35364d380206",\
    "name": "example.com",\
    "status": "not_started",\
    "created_at": "2023-04-26T20:21:26.347412+00:00",\
    "region": "us-east-1",\
    "records": [\
      \{\
        "record": "SPF",\
        "name": "send",\
        "type": "MX",\
        "ttl": "Auto",\
        "status": "not_started",\
        "value": "feedback-smtp.us-east-1.amazonses.com",\
        "priority": 10\
      \},\
      \{\
        "record": "SPF",\
        "name": "send",\
        "value": "\\"v=spf1 include:amazonses.com ~all\\"",\
        "type": "TXT",\
        "ttl": "Auto",\
        "status": "not_started"\
      \},\
      \{\
        "record": "DKIM",\
        "name": "resend._domainkey",\
        "value": "p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDsc4Lh8xilsngyKEgN2S84+21gn+x6SEXtjWvPiAAmnmggr5FWG42WnqczpzQ/mNblqHz4CDwUum6LtY6SdoOlDmrhvp5khA3cd661W9FlK3yp7+jVACQElS7d9O6jv8VsBbVg4COess3gyLE5RyxqF1vYsrEXqyM8TBz1n5AGkQIDAQA2",\
        "type": "TXT",\
        "status": "not_started",\
        "ttl": "Auto"\
      \}\
    ]\
  \}\
  ```\
</ResponseExample>\
\
\
# List Domains\
Source: https://resend.com/docs/api-reference/domains/list-domains\
\
GET /domains\
Retrieve a list of domains for the authenticated user.\
\
<Info>\
  See all available `status` types in [the Domains\
  overview](/dashboard/domains/introduction#understand-a-domain-status).\
</Info>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.domains.list();\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->domains->list();\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
  resend.Domains.list()\
  ```\
\
  ```ruby Ruby\
  Resend.api_key = ENV["RESEND_API_KEY"]\
  Resend::Domains.list\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  domains, err := client.Domains.List()\
  ```\
\
  ```rust Rust\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let _domains = resend\
      .domains\
      .list()\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          ListDomainsResponse response = resend.domains().list();\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var resp = await resend.DomainListAsync();\
  Console.WriteLine( "Nr Domains=\{0\}", resp.Content.Count );\
  ```\
\
  ```bash cURL\
  curl -X GET 'https://api.resend.com/domains' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "object": "list",\
    "data": [\
      \{\
        "id": "d91cd9bd-1176-453e-8fc1-35364d380206",\
        "name": "example.com",\
        "status": "not_started",\
        "created_at": "2023-04-26T20:21:26.347412+00:00",\
        "region": "us-east-1"\
      \}\
    ]\
  \}\
  ```\
</ResponseExample>\
\
\
# Update Domain\
Source: https://resend.com/docs/api-reference/domains/update-domain\
\
PATCH /domains/:domain_id\
Update an existing domain.\
\
## Path Parameters\
\
<ParamField path="domain_id" type="string" required>\
  The Domain ID.\
</ParamField>\
\
## Body Parameters\
\
<ParamField body="click_tracking" type="boolean">\
  Track clicks within the body of each HTML email.\
</ParamField>\
\
<ParamField body="open_tracking" type="boolean">\
  Track the open rate of each email.\
</ParamField>\
\
<ParamField body="tls" type="string" default="opportunistic">\
  <ul>\
    <li>\
      `opportunistic`: Opportunistic TLS means that it always attempts to make a\
      secure connection to the receiving mail server. If it can't establish a\
      secure connection, it sends the message unencrypted.\
    </li>\
\
    <li>\
      `enforced`: Enforced TLS on the other hand, requires that the email\
      communication must use TLS no matter what. If the receiving server does\
      not support TLS, the email will not be sent.\
    </li>\
  </ul>\
</ParamField>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.domains.update(\{\
    id: 'b8617ad3-b712-41d9-81a0-f7c3d879314e',\
    openTracking: false,\
    clickTracking: true,\
    tls: 'enforced',\
  \});\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->domains->update(\
    'b8617ad3-b712-41d9-81a0-f7c3d879314e',\
    [\
      'open_tracking' => false,\
      'click_tracking' => true,\
      'tls' => 'enforced',\
    ]\
  );\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  params: resend.Domains.UpdateParams = \{\
    "id": "b8617ad3-b712-41d9-81a0-f7c3d879314e",\
    "open_tracking": False,\
    "click_tracking": True,\
    "tls": "enforced",\
  \}\
\
  resend.Domains.update(params)\
  ```\
\
  ```ruby Ruby\
  Resend.api_key = "re_xxxxxxxxx"\
\
  Resend::Domains.update(\{\
    id: "b8617ad3-b712-41d9-81a0-f7c3d879314e",\
    open_tracking: false,\
    click_tracking: true,\
    tls: "enforced",\
  \})\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  updateDomainParams := &resend.UpdateDomainRequest\{\
    OpenTracking:  false,\
    ClickTracking: true,\
    Tls: resend.Enforced,\
  \}\
\
  updated, err := client.Domains.Update("b8617ad3-b712-41d9-81a0-f7c3d879314e", updateDomainParams)\
  ```\
\
  ```rust Rust\
  use resend_rs::\{types::\{DomainChanges, Tls\}, Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let changes = DomainChanges::new()\
      .with_open_tracking(false)\
      .with_click_tracking(true)\
      .with_tls(Tls::Enforced);\
\
    let _domain = resend\
      .domains\
      .update("b8617ad3-b712-41d9-81a0-f7c3d879314e", changes)\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  Resend resend = new Resend("re_xxxxxxxxx");\
\
  UpdateDomainOptions params = UpdateDomainOptions.builder()\
                  .id("b8617ad3-b712-41d9-81a0-f7c3d879314e")\
                  .openTracking(false)\
                  .clickTracking(true)\
                  .tls(Tls.ENFORCED)\
                  .build();\
\
  resend.domains().update(params);\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  await resend.DomainUpdateAsync(\
      new Guid( "b8617ad3-b712-41d9-81a0-f7c3d879314e" ),\
      new DomainUpdateData()\
      \{\
          TrackOpen = false,\
          TrackClicks = true,\
          TlsMode = TlsMode.Enforced,\
      \}\
  );\
  ```\
\
  ```bash cURL\
  curl -X PATCH 'https://api.resend.com/domains/b8617ad3-b712-41d9-81a0-f7c3d879314e' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "open_tracking": false,\
    "click_tracking": true,\
    "tls": "enforced"\
  \}'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "object": "domain",\
    "id": "b8617ad3-b712-41d9-81a0-f7c3d879314e"\
  \}\
  ```\
</ResponseExample>\
\
\
# Verify Domain\
Source: https://resend.com/docs/api-reference/domains/verify-domain\
\
POST /domains/:domain_id/verify\
Verify an existing domain.\
\
## Path Parameters\
\
<ParamField path="domain_id" type="string" required>\
  The Domain ID.\
</ParamField>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.domains.verify(\
    'd91cd9bd-1176-453e-8fc1-35364d380206',\
  );\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->domains->verify('d91cd9bd-1176-453e-8fc1-35364d380206');\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
  resend.Domains.verify(domain_id="d91cd9bd-1176-453e-8fc1-35364d380206")\
  ```\
\
  ```ruby Ruby\
  Resend.api_key = ENV["RESEND_API_KEY"]\
  Resend::Domains.verify("d91cd9bd-1176-453e-8fc1-35364d380206")\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  verified, err := client.Domains.Verify("d91cd9bd-1176-453e-8fc1-35364d380206")\
  ```\
\
  ```rust Rust\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    resend\
      .domains\
      .verify("d91cd9bd-1176-453e-8fc1-35364d380206")\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          VerifyDomainResponse verified = resend.domains().verify("d91cd9bd-1176-453e-8fc1-35364d380206");\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var resp = await resend.DomainVerifyAsync( new Guid( "d91cd9bd-1176-453e-8fc1-35364d380206" ) );\
  ```\
\
  ```bash cURL\
  curl -X POST 'https://api.resend.com/domains/d91cd9bd-1176-453e-8fc1-35364d380206/verify' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "object": "domain",\
    "id": "d91cd9bd-1176-453e-8fc1-35364d380206"\
  \}\
  ```\
</ResponseExample>\
\
\
# Cancel Email\
Source: https://resend.com/docs/api-reference/emails/cancel-email\
\
POST /emails/:id/cancel\
Cancel a scheduled email.\
\
## Path Parameters\
\
<ParamField path="id" type="string" required>\
  The Email ID.\
</ParamField>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.emails.cancel(\
    '49a3999c-0ce1-4ea6-ab68-afcd6dc2e794',\
  );\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->emails->cancel('49a3999c-0ce1-4ea6-ab68-afcd6dc2e794');\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
  resend.Emails.cancel(email_id="49a3999c-0ce1-4ea6-ab68-afcd6dc2e794")\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  Resend::Emails.cancel("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794")\
  ```\
\
  ```go Go\
  import "github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  canceled, err := client.Emails.Cancel("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794")\
  if err != nil \{\
    panic(err)\
  \}\
  fmt.Println(canceled.Id)\
  ```\
\
  ```rust Rust\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let _canceled = resend\
      .emails\
      .cancel("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794")\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          CancelEmailResponse canceled = resend\
            .emails()\
            .cancel("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794");\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  await resend.EmailCancelAsync( new Guid( "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794" ) );\
  ```\
\
  ```bash cURL\
  curl -X POST 'https://api.resend.com/emails/49a3999c-0ce1-4ea6-ab68-afcd6dc2e794/cancel' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "object": "email",\
    "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794"\
  \}\
  ```\
</ResponseExample>\
\
\
# Retrieve Email\
Source: https://resend.com/docs/api-reference/emails/retrieve-email\
\
GET /emails/:id\
Retrieve a single email.\
\
## Path Parameters\
\
<ParamField path="id" type="string" required>\
  The Email ID.\
</ParamField>\
\
<Info>\
  See all available `last_event` types in [the Email Events\
  overview](/dashboard/emails/introduction#understand-email-events).\
</Info>\
\
<RequestExample>\
  ```js Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.emails.get(\
    '37e4414c-5e25-4dbc-a071-43552a4bd53b',\
  );\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->emails->get('37e4414c-5e25-4dbc-a071-43552a4bd53b');\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
  resend.Emails.get(email_id="4ef9a417-02e9-4d39-ad75-9611e0fcc33c")\
  ```\
\
  ```ruby Ruby\
  Resend.api_key = "re_xxxxxxxxx"\
  email = Resend::Emails.get("4ef9a417-02e9-4d39-ad75-9611e0fcc33c")\
  puts email\
  ```\
\
  ```go Go\
  import "github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  email, err := client.Emails.Get("4ef9a417-02e9-4d39-ad75-9611e0fcc33c")\
  ```\
\
  ```rust Rust\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let _email = resend\
      .emails\
      .get("4ef9a417-02e9-4d39-ad75-9611e0fcc33c")\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          Email email = resend.emails().get("4ef9a417-02e9-4d39-ad75-9611e0fcc33c");\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var resp = await resend.EmailRetrieveAsync( new Guid( "4ef9a417-02e9-4d39-ad75-9611e0fcc33c" ) );\
  Console.WriteLine( "Subject=\{0\}", resp.Content.Subject );\
  ```\
\
  ```bash cURL\
  curl -X GET 'https://api.resend.com/emails/4ef9a417-02e9-4d39-ad75-9611e0fcc33c' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "object": "email",\
    "id": "4ef9a417-02e9-4d39-ad75-9611e0fcc33c",\
    "to": ["delivered@resend.dev"],\
    "from": "Acme <onboarding@resend.dev>",\
    "created_at": "2023-04-03T22:13:42.674981+00:00",\
    "subject": "Hello World",\
    "html": "Congrats on sending your <strong>first email</strong>!",\
    "text": null,\
    "bcc": [null],\
    "cc": [null],\
    "reply_to": [null],\
    "last_event": "delivered",\
    "scheduled_at": null\
  \}\
  ```\
</ResponseExample>\
\
\
# Send Batch Emails\
Source: https://resend.com/docs/api-reference/emails/send-batch-emails\
\
POST /emails/batch\
Trigger up to 100 batch emails at once.\
\
Instead of sending one email per HTTP request, we provide a batching endpoint that permits you to send up to 100 emails in a single API call.\
\
## Body Parameters\
\
<ParamField body="from" type="string" required>\
  Sender email address.\
\
  To include a friendly name, use the format `"Your Name <sender@domain.com>"`.\
</ParamField>\
\
<ParamField body="to" type="string | string[]" required>\
  Recipient email address. For multiple addresses, send as an array of strings.\
  Max 50.\
</ParamField>\
\
<ParamField body="subject" type="string" required>\
  Email subject.\
</ParamField>\
\
<ParamField body="bcc" type="string | string[]">\
  Bcc recipient email address. For multiple addresses, send as an array of\
  strings.\
</ParamField>\
\
<ParamField body="cc" type="string | string[]">\
  Cc recipient email address. For multiple addresses, send as an array of\
  strings.\
</ParamField>\
\
<ParamField body="reply_to" type="string | string[]">\
  Reply-to email address. For multiple addresses, send as an array of strings.\
\
  <Note>\
    Because each SDK follows language conventions, check your SDK example for\
    the proper casing of this parameter.\
  </Note>\
</ParamField>\
\
<ParamField body="html" type="string">\
  The HTML version of the message.\
</ParamField>\
\
<ParamField body="text" type="string">\
  The plain text version of the message.\
\
  <Info>\
    If not provided, the HTML will be used to generate a plain text version. You\
    can opt out of this behavior by setting value to an empty string.\
  </Info>\
</ParamField>\
\
<ParamField body="react" type="React.ReactNode">\
  The React component used to write the message. *Only available in the Node.js\
  SDK.*\
</ParamField>\
\
<ParamField body="headers" type="object">\
  Custom headers to add to the email.\
</ParamField>\
\
## Headers\
\
<ParamField header="Idempotency-Key" type="string">\
  Add an idempotency key to prevent duplicated emails.\
\
  * Should be **unique per API request**\
  * Idempotency keys expire after **24 hours**\
  * Have a maximum length of **256 characters**\
\
  [Learn more](/dashboard/emails/idempotency-keys)\
</ParamField>\
\
## Limitations\
\
The `attachments`, `tags`, and `scheduled_at` fields are not supported yet.\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.batch.send([\
    \{\
      from: 'Acme <onboarding@resend.dev>',\
      to: ['foo@gmail.com'],\
      subject: 'hello world',\
      html: '<h1>it works!</h1>',\
    \},\
    \{\
      from: 'Acme <onboarding@resend.dev>',\
      to: ['bar@outlook.com'],\
      subject: 'world hello',\
      html: '<p>it works!</p>',\
    \},\
  ]);\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->batch->send([\
    [\
      'from' => 'Acme <onboarding@resend.dev>',\
      'to' => ['foo@gmail.com'],\
      'subject' => 'hello world',\
      'html' => '<h1>it works!</h1>',\
    ],\
    [\
      'from' => 'Acme <onboarding@resend.dev>',\
      'to' => ['bar@outlook.com'],\
      'subject' => 'world hello',\
      'html' => '<p>it works!</p>',\
    ]\
  ]);\
  ```\
\
  ```py Python\
  import resend\
  from typing import List\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  params: List[resend.Emails.SendParams] = [\
    \{\
      "from": "Acme <onboarding@resend.dev>",\
      "to": ["foo@gmail.com"],\
      "subject": "hello world",\
      "html": "<h1>it works!</h1>",\
    \},\
    \{\
      "from": "Acme <onboarding@resend.dev>",\
      "to": ["bar@outlook.com"],\
      "subject": "world hello",\
      "html": "<p>it works!</p>",\
    \}\
  ]\
\
  resend.Batch.send(params)\
  ```\
\
  ```rb Ruby\
  require "resend"\
\
  Resend.api_key = 're_xxxxxxxxx'\
\
  params = [\
    \{\
      "from": "Acme <onboarding@resend.dev>",\
      "to": ["foo@gmail.com"],\
      "subject": "hello world",\
      "html": "<h1>it works!</h1>",\
    \},\
    \{\
      "from": "Acme <onboarding@resend.dev>",\
      "to": ["bar@outlook.com"],\
      "subject": "world hello",\
      "html": "<p>it works!</p>",\
    \}\
  ]\
\
  Resend::Batch.send(params)\
  ```\
\
  ```go Go\
  package examples\
\
  import (\
  	"fmt"\
  	"os"\
\
  	"github.com/resend/resend-go/v2"\
  )\
\
  func main() \{\
\
    ctx := context.TODO()\
\
    client := resend.NewClient("re_xxxxxxxxx")\
\
    var batchEmails = []*resend.SendEmailRequest\{\
      \{\
        From:    "Acme <onboarding@resend.dev>",\
        To:      []string\{"foo@gmail.com"\},\
        Subject: "hello world",\
        Html:    "<h1>it works!</h1>",\
      \},\
      \{\
        From:    "Acme <onboarding@resend.dev>",\
        To:      []string\{"bar@outlook.com"\},\
        Subject: "world hello",\
        Html:    "<p>it works!</p>",\
      \},\
    \}\
\
    sent, err := client.Batch.SendWithContext(ctx, batchEmails)\
\
    if err != nil \{\
      panic(err)\
    \}\
    fmt.Println(sent.Data)\
  \}\
  ```\
\
  ```rust Rust\
  use resend_rs::types::CreateEmailBaseOptions;\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let emails = vec![\
      CreateEmailBaseOptions::new(\
        "Acme <onboarding@resend.dev>",\
        vec!["foo@gmail.com"],\
        "hello world",\
      )\
      .with_html("<h1>it works!</h1>"),\
      CreateEmailBaseOptions::new(\
        "Acme <onboarding@resend.dev>",\
        vec!["bar@outlook.com"],\
        "world hello",\
      )\
      .with_html("<p>it works!</p>"),\
    ];\
\
    let _emails = resend.batch.send(emails).await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          CreateEmailOptions firstEmail = CreateEmailOptions.builder()\
              .from("Acme <onboarding@resend.dev>")\
              .to("foo@gmail.com")\
              .subject("hello world")\
              .html("<h1>it works!</h1>")\
              .build();\
\
          CreateEmailOptions secondEmail = CreateEmailOptions.builder()\
              .from("Acme <onboarding@resend.dev>")\
              .to("bar@outlook.com")\
              .subject("world hello")\
              .html("<p>it works!</p>")\
              .build();\
\
          CreateBatchEmailsResponse data = resend.batch().send(\
              Arrays.asList(firstEmail, secondEmail)\
          );\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var mail1 = new EmailMessage()\
  \{\
      From = "Acme <onboarding@resend.dev>",\
      To = "foo@gmail.com",\
      Subject = "hello world",\
      HtmlBody = "<p>it works!</p>",\
  \};\
\
  var mail2 = new EmailMessage()\
  \{\
      From = "Acme <onboarding@resend.dev>",\
      To = "bar@outlook.com",\
      Subject = "hello world",\
      HtmlBody = "<p>it works!</p>",\
  \};\
\
  var resp = await resend.EmailBatchAsync( [ mail1, mail2 ] );\
  Console.WriteLine( "Nr Emails=\{0\}", resp.Content.Count );\
  ```\
\
  ```bash cURL\
  curl -X POST 'https://api.resend.com/emails/batch' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'[\
    \{\
      "from": "Acme <onboarding@resend.dev>",\
      "to": ["foo@gmail.com"],\
      "subject": "hello world",\
      "html": "<h1>it works!</h1>"\
    \},\
    \{\
      "from": "Acme <onboarding@resend.dev>",\
      "to": ["bar@outlook.com"],\
      "subject": "world hello",\
      "html": "<p>it works!</p>"\
    \}\
  ]'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "data": [\
      \{\
        "id": "ae2014de-c168-4c61-8267-70d2662a1ce1"\
      \},\
      \{\
        "id": "faccb7a5-8a28-4e9a-ac64-8da1cc3bc1cb"\
      \}\
    ]\
  \}\
  ```\
</ResponseExample>\
\
\
# Send Email\
Source: https://resend.com/docs/api-reference/emails/send-email\
\
POST /emails\
Start sending emails through the Resend Email API.\
\
## Body Parameters\
\
<ParamField body="from" type="string" required>\
  Sender email address.\
\
  To include a friendly name, use the format `"Your Name <sender@domain.com>"`.\
</ParamField>\
\
<ParamField body="to" type="string | string[]" required>\
  Recipient email address. For multiple addresses, send as an array of strings.\
  Max 50.\
</ParamField>\
\
<ParamField body="subject" type="string" required>\
  Email subject.\
</ParamField>\
\
<ParamField body="bcc" type="string | string[]">\
  Bcc recipient email address. For multiple addresses, send as an array of\
  strings.\
</ParamField>\
\
<ParamField body="cc" type="string | string[]">\
  Cc recipient email address. For multiple addresses, send as an array of\
  strings.\
</ParamField>\
\
<ParamField body="scheduled_at" type="string">\
  Schedule email to be sent later. The date should be in natural language (e.g.: `in 1 min`) or ISO 8601 format (e.g:\
  `2024-08-05T11:52:01.858Z`).\
\
  [See examples](/dashboard/emails/schedule-email)\
</ParamField>\
\
<ParamField body="reply_to" type="string | string[]">\
  Reply-to email address. For multiple addresses, send as an array of strings.\
\
  <Note>\
    Because each SDK follows language conventions, check your SDK example for\
    the proper casing of this parameter.\
  </Note>\
</ParamField>\
\
<ParamField body="html" type="string">\
  The HTML version of the message.\
</ParamField>\
\
<ParamField body="text" type="string">\
  The plain text version of the message.\
\
  <Info>\
    If not provided, the HTML will be used to generate a plain text version. You\
    can opt out of this behavior by setting value to an empty string.\
  </Info>\
</ParamField>\
\
<ParamField body="react" type="React.ReactNode">\
  The React component used to write the message. *Only available in the Node.js\
  SDK.*\
</ParamField>\
\
<ParamField body="headers" type="object">\
  Custom headers to add to the email.\
</ParamField>\
\
<ParamField body="attachments" type="array">\
  Filename and content of attachments (max 40MB per email, after Base64 encoding of the attachments).\
\
  [See examples](/dashboard/emails/attachments)\
\
  <Expandable defaultOpen="true" title="properties">\
    <ParamField body="content" type="buffer | string">\
      Content of an attached file, passed as a buffer or Base64 string.\
    </ParamField>\
\
    <ParamField body="filename" type="string">\
      Name of attached file.\
    </ParamField>\
\
    <ParamField body="path" type="string">\
      Path where the attachment file is hosted\
    </ParamField>\
\
    <ParamField body="content_type" type="string">\
      Content type for the attachment, if not set will be derived from the filename property\
    </ParamField>\
\
    <ParamField body="content_id" type="string">\
      You can embed images using the `content_id` parameter for the attachment. To show the image, you need to include the ID in the `src` attribute of the `img` tag (e.g., `<img src="cid:...">`) of your HTML. [Learn about inline images](/dashboard/emails/embed-inline-images).\
    </ParamField>\
  </Expandable>\
</ParamField>\
\
<ParamField body="tags" type="array">\
  Custom data passed in key/value pairs.\
\
  [See examples](/dashboard/emails/tags).\
\
  <Expandable defaultOpen="true" title="properties">\
    <ParamField body="name" type="string" required>\
      The name of the email tag.\
\
      It can only contain ASCII letters (a\'96z, A\'96Z), numbers (0\'969), underscores (\\_), or dashes (-).\
\
      It can contain no more than 256 characters.\
    </ParamField>\
\
    <ParamField body="value" type="string" required>\
      The value of the email tag.\
\
      It can only contain ASCII letters (a\'96z, A\'96Z), numbers (0\'969), underscores (\\_), or dashes (-).\
\
      It can contain no more than 256 characters.\
    </ParamField>\
  </Expandable>\
</ParamField>\
\
## Headers\
\
<ParamField header="Idempotency-Key" type="string">\
  Add an idempotency key to prevent duplicated emails.\
\
  * Should be **unique per API request**\
  * Idempotency keys expire after **24 hours**\
  * Have a maximum length of **256 characters**\
\
  [Learn more](/dashboard/emails/idempotency-keys)\
</ParamField>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const \{ data, error \} = await resend.emails.send(\{\
    from: 'Acme <onboarding@resend.dev>',\
    to: ['delivered@resend.dev'],\
    subject: 'hello world',\
    html: '<p>it works!</p>',\
    replyTo: 'onboarding@resend.dev',\
  \});\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->emails->send([\
    'from' => 'Acme <onboarding@resend.dev>',\
    'to' => ['delivered@resend.dev'],\
    'subject' => 'hello world',\
    'html' => '<p>it works!</p>',\
    'reply_to': 'onboarding@resend.dev'\
  ]);\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  params: resend.Emails.SendParams = \{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "hello world",\
    "html": "<p>it works!</p>",\
    "reply_to": "onboarding@resend.dev"\
  \}\
\
  email = resend.Emails.send(params)\
  print(email)\
  ```\
\
  ```rb Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  params = \{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "hello world",\
    "html": "<p>it works!</p>",\
    "reply_to": "onboarding@resend.dev"\
  \}\
\
  sent = Resend::Emails.send(params)\
  puts sent\
  ```\
\
  ```go Go\
  import (\
  	"fmt"\
\
  	"github.com/resend/resend-go/v2"\
  )\
\
  func main() \{\
    ctx := context.TODO()\
    client := resend.NewClient("re_xxxxxxxxx")\
\
    params := &resend.SendEmailRequest\{\
        From:        "Acme <onboarding@resend.dev>",\
        To:          []string\{"delivered@resend.dev"\},\
        Subject:     "hello world",\
        Html:        "<p>it works!</p>",\
        ReplyTo:     "onboarding@resend.dev"\
    \}\
\
    sent, err := client.Emails.SendWithContext(ctx, params)\
\
    if err != nil \{\
      panic(err)\
    \}\
    fmt.Println(sent.Id)\
  \}\
  ```\
\
  ```rust Rust\
  use resend_rs::types::\{CreateEmailBaseOptions\};\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let from = "Acme <onboarding@resend.dev>";\
    let to = ["delivered@resend.dev"];\
    let subject = "hello world";\
    let html = "<p>it works!</p>";\
    let reply_to = "onboarding@resend.dev";\
\
    let email = CreateEmailBaseOptions::new(from, to, subject)\
      .with_html(html);\
\
    let _email = resend.emails.send(email).await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          CreateEmailOptions params = CreateEmailOptions.builder()\
                  .from("Acme <onboarding@resend.dev>")\
                  .to("delivered@resend.dev")\
                  .subject("hello world")\
                  .html("<p>it works!</p>")\
                  .replyTo("onboarding@resend.dev")\
                  .build();\
\
          CreateEmailResponse data = resend.emails().send(params);\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var resp = await resend.EmailSendAsync( new EmailMessage()\
  \{\
      From = "Acme <onboarding@resend.dev>",\
      To = "delivered@resend.dev",\
      Subject = "hello world",\
      HtmlBody = "<p>it works!</p>",\
      ReplyTo = "onboarding@resend.dev",\
  \} );\
  Console.WriteLine( "Email Id=\{0\}", resp.Content );\
  ```\
\
  ```bash cURL\
  curl -X POST 'https://api.resend.com/emails' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "hello world",\
    "html": "<p>it works!</p>",\
    "reply_to": "onboarding@resend.dev"\
  \}'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794"\
  \}\
  ```\
</ResponseExample>\
\
\
# Update Email\
Source: https://resend.com/docs/api-reference/emails/update-email\
\
PATCH /emails/:id\
Update a scheduled email.\
\
## Path Parameters\
\
<ParamField path="id" type="string" required>\
  The Email ID.\
</ParamField>\
\
## Body Parameters\
\
<ParamField body="scheduled_at" type="string">\
  Schedule email to be sent later. The date should be in ISO 8601 format (e.g:\
  2024-08-05T11:52:01.858Z).\
</ParamField>\
\
<RequestExample>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const oneMinuteFromNow = new Date(Date.now() + 1000 * 60).toISOString();\
\
  const \{ data, error \} = await resend.emails.update(\{\
    id: '49a3999c-0ce1-4ea6-ab68-afcd6dc2e794',\
    scheduledAt: oneMinuteFromNow,\
  \});\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $oneMinuteFromNow = (new DateTime())->modify('+1 minute')->format(DateTime::ISO8601);\
\
  $resend->emails->update('49a3999c-0ce1-4ea6-ab68-afcd6dc2e794', [\
    'scheduled_at' => $oneMinuteFromNow\
  ]);\
  ```\
\
  ```python Python\
  import resend\
  from datetime import datetime, timedelta\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  one_minute_from_now = (datetime.now() + timedelta(minutes=1)).isoformat()\
\
  update_params: resend.Emails.UpdateParams = \{\
    "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",\
    "scheduled_at": one_minute_from_now\
  \}\
\
  resend.Emails.update(params=update_params)\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  one_minute_from_now = (Time.now + 1 * 60).strftime("%Y-%m-%dT%H:%M:%S.%L%z")\
\
  update_params = \{\
    "email_id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",\
    "scheduled_at": one_minute_from_now\
  \}\
\
  Resend::Emails.update(update_params)\
  ```\
\
  ```go Go\
  import "github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  oneMinuteFromNow := time.Now().Add(time.Minute * time.Duration(1))\
  oneMinuteFromNowISO := oneMinuteFromNow.Format("2006-01-02T15:04:05-0700")\
\
  updateParams := &resend.UpdateEmailRequest\{\
    Id:          "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",\
    ScheduledAt: oneMinuteFromNowISO\
  \}\
\
  updatedEmail, err := client.Emails.Update(updateParams)\
\
  if err != nil \{\
    panic(err)\
  \}\
  fmt.Printf("%v\\n", updatedEmail)\
  ```\
\
  ```rust Rust\
  use chrono::\{Local, TimeDelta\};\
  use resend_rs::types::UpdateEmailOptions;\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let one_minute_from_now = Local::now()\
      .checked_add_signed(TimeDelta::minutes(1))\
      .unwrap()\
      .to_rfc3339();\
\
    let update = UpdateEmailOptions::new()\
      .with_scheduled_at(&one_minute_from_now);\
\
    let _email = resend\
      .emails\
      .update("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794", update)\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          String oneMinuteFromNow = Instant\
            .now()\
            .plus(1, ChronoUnit.MINUTES)\
            .toString();\
\
          UpdateEmailOptions updateParams = UpdateEmailOptions.builder()\
                  .scheduledAt(oneMinuteFromNow)\
                  .build();\
\
          UpdateEmailResponse data = resend.emails().update("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794", updateParams);\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  await resend.EmailRescheduleAsync(\
      new Guid( "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794" ),\
      DateTime.UtcNow.AddMinutes( 1 ) );\
  ```\
\
  ```bash cURL\
  curl -X PATCH 'https://api.resend.com/emails/49a3999c-0ce1-4ea6-ab68-afcd6dc2e794' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "scheduled_at": "2024-08-05T11:52:01.858Z"\
  \}'\
  ```\
</RequestExample>\
\
<ResponseExample>\
  ```json Response\
  \{\
    "object": "email",\
    "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794"\
  \}\
  ```\
</ResponseExample>\
\
\
# Errors\
Source: https://resend.com/docs/api-reference/errors\
\
Troubleshoot problems with this comprehensive breakdown of all error codes.\
\
## Error schema\
\
We use standard HTTP response codes for success and failure notifications, and our errors are further classified by type.\
\
### `invalid_idempotency_key`\
\
* **Status:** 400\
* **Message:** The key must be between 1-256 chars.\
* **Suggested action:** Retry with a valid idempotency key.\
\
### `validation_error`\
\
* **Status:** 400\
* **Message:** We found an error with one or more fields in the request.\
* **Suggested action:** The message will contain more details about what field and error were found.\
\
### `missing_api_key`\
\
* **Status:** 401\
* **Message:** Missing API key in the authorization header.\
* **Suggested action:** Include the following header in the request: `Authorization: Bearer YOUR_API_KEY`.\
\
### `restricted_api_key`\
\
* **Status:** 401\
* **Message:** This API key is restricted to only send emails.\
* **Suggested action:** Make sure the API key has `Full access` to perform actions other than sending emails.\
\
### `invalid_api_key`\
\
* **Status:** 403\
* **Message:** API key is invalid.\
* **Suggested action:** Make sure the API key is correct or generate a new [API key in the dashboard](https://resend.com/api-keys).\
\
### `validation_error`\
\
* **Status:** 403\
* **Message:** You can only send testing emails to your own email address (`youremail@domain.com`).\
* **Suggested action:** In [Resend's Domain page](https://resend.com/domains), add and verify a domain for which you have DNS access. This allows you to send emails to addresses beyond your own.\
\
### `not_found`\
\
* **Status:** 404\
* **Message:** The requested endpoint does not exist.\
* **Suggested action:** Change your request URL to match a valid API endpoint.\
\
### `method_not_allowed`\
\
* **Status:** 405\
* **Message:** Method is not allowed for the requested path.\
* **Suggested action:** Change your API endpoint to use a valid method.\
\
### `invalid_idempotent_request`\
\
* **Status:** 409\
* **Message:** Same idempotency key used with a different request payload.\
* **Suggested action:** Change your idempotency key or payload.\
\
### `concurrent_idempotent_requests`\
\
* **Status:** 409\
* **Message:** Same idempotency key used while original request is still in progress.\
* **Suggested action:** Try the request again later.\
\
### `invalid_attachment`\
\
* **Status:** 422\
* **Message:** Attachment must have either a `content` or `path`.\
* **Suggested action:** Attachments must either have a `content` (strings, Buffer, or Stream contents) or `path` to a remote resource (better for larger attachments).\
\
### `invalid_from_address`\
\
* **Status:** 422\
* **Message:** Invalid `from` field.\
* **Suggested action:** Make sure the `from` field is a valid. The email address needs to follow the `email@example.com` or `Name <email@example.com>` format.\
\
### `invalid_access`\
\
* **Status:** 422\
* **Message:** Access must be "full\\_access" | "sending\\_access".\
* **Suggested action:** Make sure the API key has necessary permissions.\
\
### `invalid_parameter`\
\
* **Status:** 422\
* **Message:** The `parameter` must be a valid UUID.\
* **Suggested action:** Check the value and make sure it's valid.\
\
### `invalid_region`\
\
* **Status:** 422\
* **Message:** Region must be "us-east-1" | "eu-west-1" | "sa-east-1".\
* **Suggested action:** Make sure the correct region is selected.\
\
### `missing_required_field`\
\
* **Status:** 422\
* **Message:** The request body is missing one or more required fields.\
* **Suggested action:** Check the error message to see the list of missing fields.\
\
### `daily_quota_exceeded`\
\
* **Status:** 429\
* **Message:** You have reached your daily email sending quota.\
* **Suggested action:** [Upgrade your plan](https://resend.com/settings/billing) to remove the daily quota limit or wait until 24 hours have passed to continue sending.\
\
### `rate_limit_exceeded`\
\
* **Status:** 429\
* **Message:** Too many requests. Please limit the number of requests per second. Or [contact support](https://resend.com/contact) to increase rate limit.\
* **Suggested action:** You should read the [response headers](./introduction#rate-limit) and reduce the rate at which you request the API. This can be done by introducing a queue mechanism or reducing the number of concurrent requests per second. If you have specific requirements, [contact support](https://resend.com/contact) to request a rate increase.\
\
### `security_error`\
\
* **Status:** 451\
* **Message:** We may have found a security issue with the request.\
* **Suggested action:** The message will contain more details. [Contact support](https://resend.com/contact) for more information.\
\
### `application_error`\
\
* **Status:** 500\
* **Message:** An unexpected error occurred.\
* **Suggested action:** Try the request again later. If the error does not resolve, check our [status page](https://resend-status.com) for service updates.\
\
### `internal_server_error`\
\
* **Status:** 500\
* **Message:** An unexpected error occurred.\
* **Suggested action:** Try the request again later. If the error does not resolve, check our [status page](https://resend-status.com) for service updates.\
\
\
# Introduction\
Source: https://resend.com/docs/api-reference/introduction\
\
Understand general concepts, response codes, and authentication strategies.\
\
## Base URL\
\
The Resend API is built on **REST** principles. We enforce **HTTPS** in every request to improve data security, integrity, and privacy. The API does not support **HTTP**.\
\
All requests contain the following base URL:\
\
```\
https://api.resend.com\
```\
\
## Authentication\
\
To authenticate you need to add an *Authorization* header with the contents of the header being `Bearer re_xxxxxxxxx` where `re_xxxxxxxxx` is your [API Key](https://resend.com/api-keys).\
\
```\
Authorization: Bearer re_xxxxxxxxx\
```\
\
## Response codes\
\
Resend uses standard HTTP codes to indicate the success or failure of your requests.\
\
In general, `2xx` HTTP codes correspond to success, `4xx` codes are for user-related failures, and `5xx` codes are for infrastructure issues.\
\
| Status | Description                             |\
| ------ | --------------------------------------- |\
| `200`  | Successful request.                     |\
| `400`  | Check that the parameters were correct. |\
| `401`  | The API key used was missing.           |\
| `403`  | The API key used was invalid.           |\
| `404`  | The resource was not found.             |\
| `429`  | The rate limit was exceeded.            |\
| `5xx`  | Indicates an error with Resend servers. |\
\
<Info>\
  Check [Error Codes](/api-reference/errors) for a comprehensive breakdown of\
  all possible API errors.\
</Info>\
\
## Rate limit\
\
The default maximum rate limit is **2 requests per second**. This number can be increased for trusted senders by request. After that, you'll hit the rate limit and receive a `429` response error code.\
\
Learn more about our [rate limits](/api-reference/rate-limit).\
\
## FAQ\
\
<AccordionGroup>\
  <Accordion title="How does pagination work with the API?">\
    At this moment, there are no pagination parameters since we don't provide a\
    way to fetch data via API yet. We plan to add pagination capabilities in the\
    future.\
  </Accordion>\
\
  <Accordion title="How do you handle API versioning?">\
    Currently, there's no versioning system in place. We plan to add versioning\
    via calendar-based headers in the future.\
  </Accordion>\
</AccordionGroup>\
\
\
# Rate Limit\
Source: https://resend.com/docs/api-reference/rate-limit\
\
Understand rate limits and how to increase them.\
\
The response headers describe your current rate limit following every request in conformance with the [sixth IETF standard draft](https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-ratelimit-headers-06):\
\
| Header name           | Description                                                         |\
| --------------------- | ------------------------------------------------------------------- |\
| `ratelimit-limit`     | Maximum number of requests allowed within a window.                 |\
| `ratelimit-remaining` | How many requests you have left within the current window.          |\
| `ratelimit-reset`     | How many seconds until the limits are reset.                        |\
| `retry-after`         | How many seconds you should wait before making a follow-up request. |\
\
The default maximum rate limit is **2 requests per second**. This number can be increased for trusted senders upon request.\
\
After that, you'll hit the rate limit and receive a `429` response error code. You can find all 429 responses by filtering for 429 at the [Resend Logs page](https://resend.com/logs?status=429).\
\
To prevent this, we recommend reducing the rate at which you request the API. This can be done by introducing a queue mechanism or reducing the number of concurrent requests per second. If you have specific requirements, [contact support](https://resend.com/contact) to request a rate increase.\
\
\
# Introduction\
Source: https://resend.com/docs/dashboard/api-keys/introduction\
\
Visualize all the API Keys on the Resend Dashboard.\
\
## What is an API Key\
\
API Keys are secret tokens used to authenticate your requests. They are unique to your account and should be kept confidential.\
\
## Add API Key\
\
You can create a new API Key from the [API Key Dashboard](https://resend.com/api-keys).\
\
1. Click **Create API Key**.\
2. Give your API Key a name.\
3. Select **Full access** or **Sending access** as the permission.\
4. If you select **Sending access**, you can choose the domain you want to restrict access to.\
\
<img alt="Add API Key" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-add.png?maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4cfc65f0d6f3e6d20f80fd710725f451" height=\{450\} width=\{720\} width="3024" height="1888" data-path="images/dashboard-api-keys-add.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-add.png?w=280&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=0806499bacf77776eeab3a929b67ff05 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-add.png?w=560&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a2fec622c627f28a00f0f13534173ce8 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-add.png?w=840&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=cbe9edd25bcf56d5679d782a5caf6a0d 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-add.png?w=1100&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c5a7634ae82564f9fcb39437c0d6b148 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-add.png?w=1650&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a7a205491d15ebdeb0d35c16f0f15a27 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-add.png?w=2500&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=401339bff5efe49790a56a615dd6484b 2500w" data-optimize="true" data-opv="2" />\
\
<Note>\
  For security reasons, you can only view the API Key once. Learn more about\
  [API key best practices](/knowledge-base/how-to-handle-api-keys).\
</Note>\
\
## Set API Key permissions\
\
There are two different permissions of API Keys:\
\
1. **Full access**: grants access to create, delete, get, and update any resource.\
2. **Sending access**: grants access only to send emails.\
\
With API Key permissions, you can isolate different application actions to different API Keys. Using multiple keys, you can view logs per key, detect possible abuse, and control the damage that may be done accidentally or maliciously.\
\
## View all API Keys\
\
The [API Dashboard](https://resend.com/api-keys) shows you all the API Keys you have created along with their details, including the **last time you used** an API Key.\
\
Different color indicators let you quickly scan and detect which API Keys are being used and which are not.\
\
<img alt="View All API Keys" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-all.jpg?maxW=2584&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1ca3a91657cda5151a757d86f12049ea" width="2584" height="980" data-path="images/dashboard-api-keys-view-all.jpg" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-all.jpg?w=280&maxW=2584&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c65b4a0490a6bd66bb3bf288d7a07359 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-all.jpg?w=560&maxW=2584&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=31c7e679235c3514f17951a40965f77c 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-all.jpg?w=840&maxW=2584&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=dc8c9773e33fb1653cc98fc28ab19169 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-all.jpg?w=1100&maxW=2584&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=18958a3f8b167a4a34140c58c8c12dcf 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-all.jpg?w=1650&maxW=2584&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4e0f372505c0bb95622b09864e299ab2 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-all.jpg?w=2500&maxW=2584&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7068e8453a7457b80442508228ac0d1f 2500w" data-optimize="true" data-opv="2" />\
\
## Edit API Key details\
\
After creating an API Key, you can edit the following details:\
\
* Name\
* Permission\
* Domain\
\
To edit an API Key, click the **More options** <Icon icon="ellipsis" iconType="solid" /> button and then **Edit API Key**.\
\
<img alt="View Inactive API Key" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-edit.jpeg?maxW=1752&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=411f855bf2940e39905d80b0c236f865" width="1752" height="878" data-path="images/dashboard-api-keys-edit.jpeg" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-edit.jpeg?w=280&maxW=1752&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1fb1fbc2fc676af6c1cdfac2a568fade 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-edit.jpeg?w=560&maxW=1752&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=adebbc336fd8c5b50116c48e7473c58e 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-edit.jpeg?w=840&maxW=1752&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e35160c1024dd861e090b33c1ebd1266 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-edit.jpeg?w=1100&maxW=1752&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=120bd9bc4ef7ef486af2cf42067409af 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-edit.jpeg?w=1650&maxW=1752&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=80baab67f6ac0d6b58504b68dfc9e1b1 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-edit.jpeg?w=2500&maxW=1752&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d89cf3dfa4e3a78935b0712ec493beb7 2500w" data-optimize="true" data-opv="2" />\
\
<Info>You cannot edit an API Key value after it has been created.</Info>\
\
## Delete inactive API Keys\
\
If an API Key **hasn't been used in the last 30 days**, consider deleting it to keep your account secure.\
\
<img alt="View Inactive API Key" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-inactive.jpg?maxW=2584&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=2897312dfd728abc6f6147b9a3a08c4c" width="2584" height="980" data-path="images/dashboard-api-keys-view-inactive.jpg" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-inactive.jpg?w=280&maxW=2584&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=464d2f9d683ac26ae4baa1fa0a9a1719 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-inactive.jpg?w=560&maxW=2584&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c80514e989a752b01509b4bac422068d 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-inactive.jpg?w=840&maxW=2584&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c16979e60bd492722b9c165a6e202c1f 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-inactive.jpg?w=1100&maxW=2584&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4429e8828e9f29678fd44d4c43b6c342 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-inactive.jpg?w=1650&maxW=2584&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d1b2b8060b64f62985229bc595237a5b 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-inactive.jpg?w=2500&maxW=2584&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=124c94be902a96a1eeeb0b4f8dd7c234 2500w" data-optimize="true" data-opv="2" />\
\
You can delete an API Key by clicking the **More options** <Icon icon="ellipsis" iconType="solid" /> button and then **Remove API Key**.\
\
<img alt="Delete API Key" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-remove.jpeg?maxW=2649&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=68135e947e1125ba680f95df69e10f85" width="2649" height="980" data-path="images/dashboard-api-keys-remove.jpeg" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-remove.jpeg?w=280&maxW=2649&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7ccee822f01c58638b361847cd46832d 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-remove.jpeg?w=560&maxW=2649&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=eaad61b0874b2e2ee8549f80eb8b45ea 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-remove.jpeg?w=840&maxW=2649&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=77b88d161cca257b026e9076d749c3e3 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-remove.jpeg?w=1100&maxW=2649&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=badae7bae9056616c55e0f43c4806da4 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-remove.jpeg?w=1650&maxW=2649&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=865fb42903db5a3f9f5411eeb0ff741c 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-remove.jpeg?w=2500&maxW=2649&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7d693819c913d31ec298629ee155b580 2500w" data-optimize="true" data-opv="2" />\
\
## View API Key logs\
\
When visualizing an active API Key, you can see the **total number of requests** made to the key. For more detailed logging information, select the underlined number of requests to view all logs for that API Key.\
\
<img alt="View Active API Key" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-active.jpg?maxW=2584&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c6499db78e731072dca88e3fe7a1d93d" width="2584" height="980" data-path="images/dashboard-api-keys-view-active.jpg" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-active.jpg?w=280&maxW=2584&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ee2ab661820ed68cb776eab68f8a10c9 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-active.jpg?w=560&maxW=2584&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=31374d522d5e908c841c0d5245259393 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-active.jpg?w=840&maxW=2584&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8dff28243d1879542f207d9940167e76 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-active.jpg?w=1100&maxW=2584&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7380215ec8c0a6e947ede2ab7e41760a 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-active.jpg?w=1650&maxW=2584&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7f0982bd65e80fe352c6250d87bb3906 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-active.jpg?w=2500&maxW=2584&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1749ceff00eb3fb10fce0970b471100d 2500w" data-optimize="true" data-opv="2" />\
\
<Snippet file="exports-section.mdx" />\
\
\
# Managing Contacts\
Source: https://resend.com/docs/dashboard/audiences/contacts\
\
How to manage and import contacts to your audiences.\
\
Resend has [Audiences](/dashboard/audiences/introduction) made up of Contacts. You can send [Broadcasts](/dashboard/broadcasts/introduction) to your Audiences. When adding a Contact, you can assign it an email address and first and last name to personalize your Broadcast to them.\
\
You can add your Contacts to an Audience in three different ways: via API, CSV upload, or manually.\
\
## 1. Adding Contacts programmatically via API\
\
You can add contacts to an Audience programmatically. For instance, after someone makes a purchase, you can add them to your "Paying Customers" audience. Resend's SDKs have support for the [contacts](/api-reference/contacts/create-contact) endpoint.\
\
<CodeGroup>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  resend.contacts.create(\{\
  email: 'steve.wozniak@gmail.com',\
  firstName: 'Steve',\
  lastName: 'Wozniak',\
  unsubscribed: false,\
  audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',\
  \});\
\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->contacts->create(\
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',\
    parameters: [\
      'email' => 'steve.wozniak@gmail.com',\
      'first_name' => 'Steve',\
      'last_name' => 'Wozniak',\
      'unsubscribed' => false\
    ]\
  );\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  params: resend.Contacts.CreateParams = \{\
    "email": "steve.wozniak@gmail.com",\
    "first_name": "Steve",\
    "last_name": "Wozniak",\
    "unsubscribed": False,\
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
  \}\
\
  resend.Contacts.create(params)\
  ```\
\
  ```ruby Ruby\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  params = \{\
    "email": "steve.wozniak@gmail.com",\
    "first_name": "Steve",\
    "last_name": "Wozniak",\
    "unsubscribed": false,\
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
  \}\
\
  Resend::Contacts.create(params)\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  params := &resend.CreateContactRequest\{\
    Email:        "steve.wozniak@gmail.com",\
    FirstName:    "Steve",\
    LastName:     "Wozniak",\
    Unsubscribed: false,\
    AudienceId:   "78261eea-8f8b-4381-83c6-79fa7120f1cf",\
  \}\
\
  contact, err := client.Contacts.Create(params)\
  ```\
\
  ```rust Rust\
  use resend_rs::\{types::ContactData, Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let contact = ContactData::new("steve.wozniak@gmail.com")\
      .with_first_name("Steve")\
      .with_last_name("Wozniak")\
      .with_unsubscribed(false);\
\
    let _contact = resend\
      .contacts\
      .create("78261eea-8f8b-4381-83c6-79fa7120f1cf", contact)\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          CreateContactOptions params = CreateContactOptions.builder()\
                  .email("steve.wozniak@gmail.com")\
                  .firstName("Steve")\
                  .lastName("Wozniak")\
                  .unsubscribed(false)\
                  .audienceId("78261eea-8f8b-4381-83c6-79fa7120f1cf")\
                  .build();\
\
          CreateContactResponseSuccess data = resend.contacts().create(params);\
      \}\
  \}\
  ```\
\
  ```bash cURL\
  curl -X POST 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf/contacts' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "email": "steve.wozniak@gmail.com",\
    "first_name": "Steve",\
    "last_name": "Wozniak",\
    "unsubscribed": false\
  \}'\
  ```\
</CodeGroup>\
\
## 2. Adding Contacts by uploading a .csv\
\
<Steps>\
  <Step title="Go to Audiences">\
    Go to the [Audiences](https://resend.com/audiences) page, and select **Add Contacts**.\
\
        <img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1919bca02613b6906f6248729209f9aa" alt="Adding Contacts" width="3024" height="1804" data-path="images/audiences-intro-6.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=280&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=3ac23e49b2ffa6a31df64ab37c782879 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=560&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=aac6b2266297305ce36b8faa093d13c7 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=840&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=12dadf9dcede688894690c94eb61546f 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=1100&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=f72c322d501bbdd82efe4649a1c1f062 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=1650&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d92535c032e64f8a193468bf27012508 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=2500&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c9f3645316cfb7944c5628fd879d73f7 2500w" data-optimize="true" data-opv="2" />\
  </Step>\
\
  <Step title="Select Import">\
    Select **Import CSV**.\
  </Step>\
\
  <Step title="Upload CSV">\
    Upload your CSV file from your computer.\
\
        <img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1919bca02613b6906f6248729209f9aa" alt="Adding Contacts" width="3024" height="1804" data-path="images/audiences-intro-6.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=280&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=3ac23e49b2ffa6a31df64ab37c782879 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=560&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=aac6b2266297305ce36b8faa093d13c7 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=840&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=12dadf9dcede688894690c94eb61546f 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=1100&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=f72c322d501bbdd82efe4649a1c1f062 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=1650&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d92535c032e64f8a193468bf27012508 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=2500&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c9f3645316cfb7944c5628fd879d73f7 2500w" data-optimize="true" data-opv="2" />\
  </Step>\
\
  <Step title="Map Fields">\
    After uploading your CSV file, you're able to map the fields you want to use. Currently, the supported mapping fields are `email`, `first_name`, `last_name`, and `unsubscribed`.\
\
    <img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-1.png?maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4fac549a59501ea8a2708781eb724acc" alt="Import Contacts via CSV" class="extraWidth" width="3024" height="1888" data-path="images/audiences-intro-1.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-1.png?w=280&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=03ba42b1228994d0b7bf9948f525dfbf 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-1.png?w=560&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a720cb599ab0ee70e9f49949ac0b85a7 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-1.png?w=840&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=73228068670f06e23b961f11b3571ae3 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-1.png?w=1100&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=53b4297dab9b5e89ca56de6ce3702b74 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-1.png?w=1650&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=622395718c1f2695942485468a2f541a 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-1.png?w=2500&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=fee320e5481c29f43d288d91582b5aef 2500w" data-optimize="true" data-opv="2" />\
\
    Finally, select **Continue**, review the contacts, and finish the upload.\
  </Step>\
</Steps>\
\
## 3. Adding Contacts manually\
\
<Steps>\
  <Step title="Go to Audiences">\
    Go to the [Audiences](https://resend.com/audiences) page, and select **Add Contacts**.\
\
        <img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1919bca02613b6906f6248729209f9aa" alt="Adding Contacts" width="3024" height="1804" data-path="images/audiences-intro-6.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=280&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=3ac23e49b2ffa6a31df64ab37c782879 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=560&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=aac6b2266297305ce36b8faa093d13c7 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=840&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=12dadf9dcede688894690c94eb61546f 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=1100&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=f72c322d501bbdd82efe4649a1c1f062 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=1650&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d92535c032e64f8a193468bf27012508 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=2500&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c9f3645316cfb7944c5628fd879d73f7 2500w" data-optimize="true" data-opv="2" />\
  </Step>\
\
  <Step title="Choose Manual">\
    Select **Add Manually**.\
  </Step>\
\
  <Step title="Add Contacts">\
    You can then add either one, or multiple email addresses into the text field, separating multiple email addresses with commas.\
\
        <img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-7.png?maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5d0a553dd60810a5c111641f63ccdbc9" alt="Adding Contacts Manually" width="3024" height="1810" data-path="images/audiences-intro-7.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-7.png?w=280&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4f8df847a2450e5c5f4e851fcb6ea270 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-7.png?w=560&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d4d5796ad9cabd49a6b74ee420043cd3 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-7.png?w=840&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=6492a61b7ebffbfd28d9bb70da4e4dc1 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-7.png?w=1100&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=0284cd81051d717001318f40431ab73e 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-7.png?w=1650&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=61d1fc41a806788d67b1034a3dd17e22 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-7.png?w=2500&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8d3e78ba60c50afaba903bac38be8ad3 2500w" data-optimize="true" data-opv="2" />\
  </Step>\
</Steps>\
\
\
# Managing Audiences\
Source: https://resend.com/docs/dashboard/audiences/introduction\
\
Learn how to add, update, retrieve, and remove contacts that you send Broadcasts to.\
\
Managing subscribers and unsubscribers is a critical part of any email implementation. It's important to respect your users' preferences and ensure that they're receiving the right emails at the right time.\
\
Resend Audiences allow you to group and manage your [contacts](/dashboard/audiences/contacts) in a simple and intuitive way.\
\
<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-5.png?maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c82a66b590a21a46d148c66136d1121b" alt="Audience" class="extraWidth" width="3024" height="1888" data-path="images/audiences-intro-5.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-5.png?w=280&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=fee9a5252463636235503549d882c95b 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-5.png?w=560&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d36c26d09c949bc34faf2e6fa58e8590 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-5.png?w=840&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5e8abeaf475032c9b141ad8a0a3e95fb 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-5.png?w=1100&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d8f5f92b691085c4f9f4c8a3e915e862 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-5.png?w=1650&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=437e45f616f2c4a72ce14bf11469b67c 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-5.png?w=2500&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4d6578a42a1a33d2a1097304de8c165b 2500w" data-optimize="true" data-opv="2" />\
\
## Send emails to your Audience\
\
Audiences were designed to be used in conjunction with [Broadcasts](https://resend.com/broadcasts). You can send a Broadcast to an Audience from the Resend dashboard or from the Broadcast API.\
\
### From Resend's no-code editor\
\
You can send emails to your Audience by creating a new Broadcast and selecting the Audience you want to send it to.\
\
<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-2.png?maxW=1290&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=685f9b631b70b15f956552319b1216ef" alt="Send emails to your Audience" width="1290" height="284" data-path="images/audiences-intro-2.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-2.png?w=280&maxW=1290&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a0f98308ef2f1fd77021d05567e9351b 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-2.png?w=560&maxW=1290&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c1e0e76c1b28900c554b4eb2cfa8c48e 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-2.png?w=840&maxW=1290&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=df4582593e43804c7b5bdba95db6f174 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-2.png?w=1100&maxW=1290&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d0f0836b4be2f8c80c23fae69133d69c 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-2.png?w=1650&maxW=1290&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=735cf4ad89d738ede02dc1719100d849 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-2.png?w=2500&maxW=1290&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b2720eb28f435f4874c6827533db6fd0 2500w" data-optimize="true" data-opv="2" />\
\
You can include the Unsubscribe Footer in your Broadcasts, which will be automatically replaced with the correct link for each contact.\
\
### From the Broadcast API\
\
You can also use our [Broadcast API](/api-reference/broadcasts/create-broadcast) to create and send a Broadcast to your Audience.\
\
### How to customize the unsubscribe link in my Broadcast?\
\
Resend generates a unique link for each recipient and each Broadcast. You can use `\{\{\{RESEND_UNSUBSCRIBE_URL\}\}\}` as the link target.\
\
<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-3.png?maxW=712&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=bae6d0fe3c7cbfda6770a877f842739a" alt="Unsubscribe Link" width="712" height="214" data-path="images/audiences-intro-3.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-3.png?w=280&maxW=712&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=26fa2774c1eac60762a9bb43ca1e0550 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-3.png?w=560&maxW=712&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7a0364b6cbcc9440d25e2f27a715c6a8 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-3.png?w=840&maxW=712&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=058aa74c2bbfce2672e0fbbb3b9274d9 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-3.png?w=1100&maxW=712&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=6dbd95a0d0a5be30f3ef43c4cca6ed68 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-3.png?w=1650&maxW=712&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a7de2d5197e16f50aa8c6768a8ecfe94 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-3.png?w=2500&maxW=712&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=0a557f68d7e877d8ac2c180e7f411188 2500w" data-optimize="true" data-opv="2" />\
\
## Automatic Unsubscribes\
\
When you send emails to your Audience, Resend will automatically handle the unsubscribe flow for you.\
\
If a contact unsubscribes from your emails, they will be skipped when sending a future Broadcast to this same audience.\
\
<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-4.png?maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=af2f44466bca81de9a67167a32116597" alt="Automatic Unsubscribes" width="3024" height="1888" data-path="images/audiences-intro-4.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-4.png?w=280&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=9cb34a2c6225b9129c659fc6ed96d6df 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-4.png?w=560&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=46ada429250e56edd30984e4f636156e 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-4.png?w=840&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=41d44d03f6a4dc419a8d700b812839c7 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-4.png?w=1100&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=181dc72768a2221e8a199aa1ca916f6d 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-4.png?w=1650&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e65aca298cef94e6bf37a59d53f05f32 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-4.png?w=2500&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=84ed1d58787078aef012933c12dbdcd6 2500w" data-optimize="true" data-opv="2" />\
\
Learn more about [managing your unsubscribe list](/dashboard/audiences/managing-unsubscribe-list) or [customizing your unsubscribe page](/dashboard/settings/unsubscribe-page).\
\
<Snippet file="exports-section.mdx" />\
\
\
# Managing Unsubscribed Contacts\
Source: https://resend.com/docs/dashboard/audiences/managing-unsubscribe-list\
\
Learn how to check and remove recipients who have unsubscribed to your marketing emails.\
\
It's essential to update your contact list when someone unsubscribes to maintain a good sender reputation. This reduces the likelihood of your emails being marked as spam, and can also improve deliverability for any other marketing or transactional emails you send.\
\
When a contact unsubscribes from your emails, Resend will automatically handle the unsubscribe flow for you, and they will be skipped when sending the next Broadcast to that same audience.\
\
## Checking Unsubcribed Contacts\
\
To see which contacts have unsubscribed, first navigate to the [Audiences page](https://resend.com/audiences). Then, select the Audience that you want to check.\
\
Click on the **All Statuses** filter next to the search bar, then select **Unsubscribed**.\
\
<img alt="Managing Unsubscribe List" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/manage-unsubscriptions-1.png?maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d577b206b4d5d489b569b1c7f709075a" width="3024" height="1808" data-path="images/manage-unsubscriptions-1.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/manage-unsubscriptions-1.png?w=280&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=9f4aed779a4fa6af6471ef17e8d4bb53 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/manage-unsubscriptions-1.png?w=560&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=3b70a60e3065fd3190119ca6a9c38e2d 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/manage-unsubscriptions-1.png?w=840&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=0b56164d852cbd7c9a23f5bafec6797d 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/manage-unsubscriptions-1.png?w=1100&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=a315320d466aaca81f7cfaa9e090237c 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/manage-unsubscriptions-1.png?w=1650&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=bae3d7b19029bb3ce7440364bd094faf 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/manage-unsubscriptions-1.png?w=2500&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ace7f43ba6c689978e2aad3c1e3fcd22 2500w" data-optimize="true" data-opv="2" />\
\
\
# Managing Broadcasts\
Source: https://resend.com/docs/dashboard/broadcasts/introduction\
\
Send marketing emails efficiently without code.\
\
Broadcasts allow you to send email blasts to your customers using a no-code editor on Resend, or from our [Broadcast API](/api-reference/broadcasts/create-broadcast).\
\
You can use this to send email blasts such as:\
\
* Newsletters\
* Product Launches\
* Investor Updates\
* Promotions\
* Changelogs\
\
## Sending a Broadcast from Resend\
\
Our Broadcasts feature was made to enable your entire team to send email campaigns without having to ask for help from developers.\
\
### No-Code Editor\
\
<video autoPlay muted loop playsinline className="w-full aspect-video" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/broadcasts-intro-1.mp4?auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=9084a71772ee73cb5474ce11ffb619af" data-path="images/broadcasts-intro-1.mp4" />\
\
### Markdown Support\
\
You can also write your emails using Markdown. This works with headings, lists, italic, bold, links, and quotes.\
\
You can easily copy and paste content from applications like Notion, Google Docs, iA Writter and many others maintaining formatting consistency.\
\
<video autoPlay muted loop src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/broadcasts-intro-2.mp4?auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8bc6b96e9d96426727f2016a849b0476" data-path="images/broadcasts-intro-2.mp4" />\
\
### Custom Styling\
\
You can customize the look and feel of your email by changing **global styles** such as the background color, link color, and container size, allowing you to create emails aligned with your brand identity.\
\
To do this, click on **Styles** at the top left of the Broadcast editor. You can edit specific images or lines of texts by selecting or highlighting them prior to clicking on **Styles**.\
\
<video autoPlay muted loop playsinline className="w-full aspect-video" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/broadcasts-intro-3.mp4?auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d94a124800ef266aec2e57aee63970aa" data-path="images/broadcasts-intro-3.mp4" />\
\
You can also edit individual styles for each component, including the font size, font weight, and text alignment. You can also set custom properties for each component, such as image alt, button links, and social links,\
\
<video autoPlay muted loop playsinline className="w-full aspect-video" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/broadcasts-intro-4.mp4?auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=6281a50e29bb7c03fa20071193817c03" data-path="images/broadcasts-intro-4.mp4" />\
\
### Personalize your content\
\
When creating broadcasts, you can include dynamic audience data to personalize the email content.\
\
* `\{\{\{FIRST_NAME|fallback\}\}\}`\
* `\{\{\{LAST_NAME|fallback\}\}\}`\
* `\{\{\{EMAIL\}\}\}`\
* `\{\{\{RESEND_UNSUBSCRIBE_URL\}\}\}`\
\
When you include the `\{\{\{RESEND_UNSUBSCRIBE_URL\}\}\}` placeholder in the call, Resend includes an unsubscribe link in the email to automatically handle unsubscribe requests.\
\
<Note>\
  Learn how to create a [custom Unsubscribe\
  Page](/dashboard/settings/unsubscribe-page).\
</Note>\
\
### Testing & Sending\
\
Once you're finished writing your email, you can preview it in your personal inbox or send it to your team for feedback.\
\
To do this, click on **Test Email** on the top right of your screen. Enter in the email address you'd like to send your email to, and then click on **Send Test Email** to complete.\
\
Once you're ready to send your email to your Audience, click on **Send**, and slide to confirm.\
\
<video autoPlay muted loop playsinline className="w-full aspect-video" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/broadcasts-intro-5.mp4?auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c6cfe0fc98807dec048b23f1237b194e" data-path="images/broadcasts-intro-5.mp4" />\
\
**Note**: Test emails do not include any custom Reply-To address that may have been configured. This behavior is limited to test mode and does not affect actual email sends.\
\
## Sending a Broadcast from the Broadcast API\
\
We also offer the option to send your Broadcasts from our [Broadcast API](/api-reference/broadcasts/create-broadcast).\
\
The Broadcast API offers 6 endpoints for programmatically creating, updating, and sending broadcasts.\
\
## Understand broadcast statuses\
\
Here are all the statuses that can be associated with a broadcast:\
\
* `draft` - The broadcast is a draft (note: if a broadcast is scheduled, it will be in the `draft` status until the scheduled time).\
* `sent` - The broadcast was sent.\
* `queued` - The broadcast is queued for delivery.\
\
<Snippet file="exports-section.mdx" />\
\
\
# Performance Tracking\
Source: https://resend.com/docs/dashboard/broadcasts/performance-tracking\
\
Track your Broadcasts email performance in real-time\
\
Once your broadcast is sent, you can track its performance right away. The insights you can view are emails delivered, unsubscribed, click rate, and open rate.\
\
You can view these insights by clicking on [Broadcast](https://resend.com/broadcasts) in the left column, and then clicking on the Broadcast that you want to view.\
\
<video autoPlay muted loop playsinline className="w-full aspect-video" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/broadcasts-performance-tracking-1.mp4?auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=11ab891982407c3bc249f485c01750e4" data-path="images/broadcasts-performance-tracking-1.mp4" />\
\
Please note, at times, open rates can be inaccurate for a number of reasons due to the way inbox providers handle incoming emails. You can [read more about this here.](https://resend.com/docs/knowledge-base/why-are-my-open-rates-not-accurate)\
\
\
# Implementing BIMI\
Source: https://resend.com/docs/dashboard/domains/bimi\
\
Set up BIMI to gain brand recognition by displaying your logo in the inbox.\
\
## Prerequisites\
\
To get the most out of this guide, you will need to:\
\
* Establish verifiable use of your logo\
  * Obtain a registered trademark for your logo\
  * Or, use your logo for over one year\
* [Add a DMARC record on your domain](/dashboard/domains/dmarc)\
\
## What is BIMI?\
\
BIMI ([Brand Indicators for Message Identification](https://bimigroup.org/)) is a standard that allows you to specify a logo (and sometimes a checkmark) to display next to your email in the inbox. These indicators can increase brand recognition and trust and improve engagement.\
\
<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bimi-example.png?maxW=1982&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=debbb89e48591ed33864dcd3473bf874" alt="bimi-example" width="1982" height="1040" data-path="images/bimi-example.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bimi-example.png?w=280&maxW=1982&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d4173f93a13b5fbefd568c884a93689c 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bimi-example.png?w=560&maxW=1982&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=bbc2dbd69cb98ccd04906b7cb08759e8 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bimi-example.png?w=840&maxW=1982&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=25abce0969db214e0eec23a3b37fe869 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bimi-example.png?w=1100&maxW=1982&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d4f12a1b4f744ac485b0ed334456990b 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bimi-example.png?w=1650&maxW=1982&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=03ce1e7fb05e870b60361313e958422f 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bimi-example.png?w=2500&maxW=1982&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=002aa85b56b99644a64318da33d9b048 2500w" data-optimize="true" data-opv="2" />\
\
Though this standard is newer, most major mailbox providers now support it. This gives BIMI adoption a competitive edge for brand recognition in the inbox. Most mailbox providers show brand indicators for those who purchase a certificate, of which there are two types: a Common Mark Certificate (CMC) and a Verified Mark Certificate (VMC).\
\
Here's an overview of current email client support:\
\
| Client                                                | BIMI w/a CMC | BIMI w/a VMC | BIMI w/out a VMC or CMC |\
| ----------------------------------------------------- | ------------ | ------------ | ----------------------- |\
| [Apple Mail](https://support.apple.com/en-us/108340)  | X            | \uc0\u10003             | X                       |\
| [Gmail](https://support.google.com/a/answer/10911320) | \uc0\u10003             | \u10003             | X                       |\
| Outlook                                               | X            | X            | X                       |\
| [Yahoo](https://senders.yahooinc.com/bimi/)           | \uc0\u10003             | \u10003             | \u10003                        |\
\
## Implementing BIMI\
\
### 1. Configure DMARC\
\
<Note>\
  If you haven't set up DMARC yet, follow our [DMARC Setup\
  Guide](/dashboard/domains/dmarc).\
</Note>\
\
BIMI requires a DMARC policy of `p=quarantine;`\'a0or\'a0`p=reject;`. This policy assures that your emails are properly authenticated and that no one else can spoof your domain and send them with your logo.\
\
Here's an overview of the required parameters:\
\
| Parameter | Purpose    | Required Value                 |\
| --------- | ---------- | ------------------------------ |\
| `p`       | Policy     | `p=quarantine;` or `p=reject;` |\
| `pct`     | Percentage | `pct=100;`                     |\
\
Here is an example of an adequate DMARC record:\
\
```\
"v=DMARC1; p=quarantine; pct=100; rua=mailto:dmarcreports@example.com"\
```\
\
<Note>\
  For BIMI on a subdomain, the root or APEX domain must also have a DMARC policy\
  of\'a0`p=quarantine`\'a0or\'a0`p=reject` in addition to the subdomain. If not, the\
  subdomain will not be compliant to display a BIMI logo.\
</Note>\
\
### 2. Establish verifiable use of your logo\
\
To display your logo in most email clients using BIMI, you need to prove ownership of your logo by obtaining a mark certificate. This process is similar to acquiring an SSL certificate for your website. You can purchase a mark certificate from various authorized vendors. We recommend [DigiCert](https://www.digicert.com/).\
\
There are two possible mark Certificate's to verify the use of your logo:\
\
* **Verified Mark Certificate (VMC)**: A certificate issued by a Certificate Authority (CA) that is used to verify that you are the owner of the logo you are trying to display. A VMC is avaiable if you have a trademark of your logo. With a VMC, Gmail will display a blue checkmark.\
* **Common Mark Certificate (CMC)**: A certificate also issued by Certificate Authority (CA) to verify you. A CMC is available to you if you can establish that you\'92ve used your logo for one year. Currently, only Gmail supports a CMC.\
\
A VMC offers the widest email client support, though the barrier of a trademark means a CMC is an easier path if you have eastablished use of your logo for one year.\
\
Here are a some things to know before starting the certificate purchase process:\
\
* If you don't hold a trademark for your logo or have not used your logo for a year, you will not be able to purchase a certiifcate.\
* The process could take weeks, so start early and respond to their requests quickly.\
* You will need to provide a [SVG Tiny P/S formatted logo](https://bimigroup.org/creating-bimi-svg-logo-files/).\
* You will need to prove you own the domain by adding a DNS record.\
* You will need to prove you are the owner of the trademark or logo by providing identification.\
* You will need publicly available proof that your business exists. For newer startups, recommend [Yellow Pages](https://marketing.yellowpages.com/en/) or [Google Business Profiles](https://support.google.com/business/answer/3039617?hl=en) as the easiest method for proving your existence\
\
## 3. Set your BIMI DNS Record\
\
Once you have your VMC, you can set your BIMI DNS record. This TXT record points to the location of your VMC and your logo.\
\
| Name           | Type | Value                                               |\
| -------------- | ---- | --------------------------------------------------- |\
| default.\\_bimi | TXT  | v=BIMI1; l=link\\_to\\_logo; a=link\\_to\\_certificate; |\
\
Here is an example of a BIMI record:\
\
```\
v=BIMI1; l=https://vmc.digicert.com/00-00.svg; a=https://vmc.digicert.com/00-00.pem;\
```\
\
<Tip>\
  Ensure your logo uses an HTTPS URL. Mailbox providers will not display the\
  logo if served from an HTTP URL.\
</Tip>\
\
It contains a publicly and programmatically accessible link to your verified logo (.svg) and a link to your VMC (.pem).\
\
To confirm that your BIMI record is published correctly, the [BIMI working group offers a tool](https://bimigroup.org/bimi-generator/) to check it.\
\
It often takes a few days for your logo to display in inboxes after this record propagates. Mailbox providers will also conditionally decide to show the logo based on the domain's sending email volume and reputation. A domain with a high spam or bounce rate may not have their avatar displayed.\
\
## Reference\
\
| Parameter | Purpose             | Example                                |\
| --------- | ------------------- | -------------------------------------- |\
| `v`       | The version of BIMI | `v=BIMI1`                              |\
| `l`       | Logo                | `l=https://vmc.digicert.com/00-00.svg` |\
| `a`       | Certificate         | `a=https://vmc.digicert.com/00-00.pem` |\
| `s`       | Selector            | `s=springlogo`                         |\
\
<Tip>\
  The BIMI standard allows for multiple logos using the [selector\
  parameter](https://bimigroup.org/how-and-why-to-implement-bimi-selectors/).\
</Tip>\
\
<Note>\
  Having issues setting up BIMI? [We can help](https://resend.com/help).\
</Note>\
\
\
# Implementing DMARC\
Source: https://resend.com/docs/dashboard/domains/dmarc\
\
Implement DMARC to build trust in your domain and protect against email spoofing and unauthorized use of your domain in email messages.\
\
## Prerequisites\
\
Since DMARC relies on DKIM AND SPF, first ensure your existing emails are passing SPF and DKIM.\
\
* DKIM verifies the email wasn't altered in transit using cryptographic authentication.\
* SPF authorizes IP addresses to send email for a domain.\
\
If you have a [verified](/dashboard/domains/introduction) domain with Resend, it means you are already passing SPF and DKIM\
\
## What is DMARC?\
\
DMARC ([Domain-based Message Authentication, Reporting, and Conformance](https://dmarc.org/overview/)) is an email authentication protocol that instructs mail servers what to do if an email message fails SPF and DKIM, preventing email spoofing (forged headers). DMARC is added to a domain through a TXT record added to the domain at `_dmarc`.\
\
By preventing spoofing, a domain can build trust with mailbox providers, as it allows them to verify that emails are authorized to send on behalf of that domain.\
\
An email must pass either SPF or DKIM checks (but not necessarily both) to achieve DMARC compliance and be considered authenticated. A message fails DMARC if both SPF and DKIM fail on the message.\
\
## Implementing DMARC\
\
### 1. Add a TXT `_dmarc` Record\
\
To start, add a flexible DMARC record to your domain.\
\
| Name                | Type | Value                                                       |\
| ------------------- | ---- | ----------------------------------------------------------- |\
| \\_dmarc.example.com | TXT  | `v=DMARC1; p=none; rua=mailto:dmarcreports@yourdomain.com;` |\
\
This record is specifying a few parameters (see [Reference](#reference) section for more details):\
\
* `v` - Version:\
  This is the version of DMARC\
* `p` - Policy:\
  This is telling the inbox how to process messages that fail DMARC. Options are `none`, `quarantine`, `reject`. It's a best practice to use `quarantine` or `reject`, but you should only do it once you know your messages are delivering and fully passing DMARC.\
* `rua` - Reporting URI of Aggregate:\
  Provide a **valid address** that can receive email. The address can be a different domain than the one on which you set the DMARC policy. The aggregate report comes as an email with a\'a0`.xml`\'a0file attached that shares the IP sources of your messages and if they passed SPF or DKIM.\
\
To ensure you don't accidentally introduce breaking changes to your email sending, we suggest starting with a policy of `p=none;` before moving to a stricter policy.\
\
### 2. Test to Confirm Delivery and Passing\
\
To test emails, send an email from all the applications and services your domain uses. Confirm that the messages are delivered to the inbox and that the headers show DMARC passing. Spending a few at this step is a good rule of thumb to ensure you're checking all sources of email from your domain and catch email that is sent at a different cadence than daily.\
\
To confirm DMARC passed, you can inspect the email headers and confirm there is `dmarc=pass`.\
\
<Tip>\
  Gradually identify email sources using tools like [Google Postmaster\
  Tools](https://gmail.com/postmaster/), which provides DKIM/SPF feedback.\
  [DMARC monitoring\
  services](https://dmarc.org/resources/products-and-services/) can aggregate\
  your email sources by collecting DMARC reports, helping you discover any\
  services sending email on your domain's behalf.\
</Tip>\
\
### 3. Upgrade Policy\
\
Once you have verified DMARC is passing across all your sending, you should upgrade your Policy to `p=quarantine;`. This policy gives mailbox providers greater confidence in your domain since your domain only allows authenticated email.\
\
| Policy        | Value                                            |\
| ------------- | ------------------------------------------------ |\
| p=none;       | Allow all email. Monitoring for DMARC failures.  |\
| p=quarantine; | Send messages that fail DMARC to the spam folder |\
| p=reject;     | Bounce delivery of emails that fail DMARC.       |\
\
Once your policy is `p=quarantine;` or `p=reject;` you can explore setting up [BIMI](/dashboard/domains/bimi), which can provide established brands even greater sending credibility by displaying a logo as an avatar in an email client.\
\
## Reference\
\
<Tip>\
  While the DMARC protocol includes both `pct` and `ruf` parameters, they are\
  not widely followed by mailbox providers. These settings may not be respected\
  or followed.\
</Tip>\
\
| Parameter | Purpose                                       | Example                           |\
| --------- | --------------------------------------------- | --------------------------------- |\
| `v`       | Protocol version                              | `v=DMARC1`                        |\
| `pct`     | Percentage of messages subjected to filtering | `pct=20`                          |\
| `ruf`     | Reporting URI for forensic reports            | `ruf=mailto:authfail@example.com` |\
| `rua`     | Reporting URI of aggregate reports            | `rua=mailto:aggrep@example.com`   |\
| `p`       | Policy for organizational domain              | `p=quarantine`                    |\
| `sp`      | Policy for subdomains of the OD               | `sp=reject`                       |\
| `adkim`   | Alignment mode for DKIM                       | `adkim=s`                         |\
| `aspf`    | Alignment mode for SPF                        | `aspf=r`                          |\
\
<Note>\
  Having issues setting up DMARC? [We can help](https://resend.com/help).\
</Note>\
\
\
# Managing Domains\
Source: https://resend.com/docs/dashboard/domains/introduction\
\
Visualize all the domains on the Resend Dashboard.\
\
<Warning>\
  Domain not verifying? [Try\
  this](/knowledge-base/what-if-my-domain-is-not-verifying).\
</Warning>\
\
## Verifying a domain\
\
Resend sends emails using a domain you own.\
\
We recommend using subdomains (e.g., `updates.yourdomain.com`) to isolate your sending reputation and communicate your intent. Learn more about [using subdomains](/knowledge-base/is-it-better-to-send-emails-from-a-subdomain-or-the-root-domain).\
\
In order to verify a domain, you must set two DNS entries:\
\
1. [SPF](#what-are-spf-records): list of IP addresses authorized to send email on behalf of your domain\
2. [DKIM](#what-are-dkim-records): public key used to verify email authenticity\
\
These two DNS entries grant Resend permission to send email on your behalf. Once SPF and DKIM verify, you can optionally add a [DMARC record](/dashboard/domains/dmarc) to build additional trust with mailbox providers.\
\
<Info>\
  Resend requires you own your domain (i.e., not a shared or public domain).\
</Info>\
\
## View domain details\
\
The [Domains dashboard](https://resend.com/domains) shows information about your domain name, its verification status, and history.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend.png?maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=43360d4e74b33fe439380166d856aeb9" width="2992" height="1868" data-path="images/dashboard-domains-resend.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend.png?w=280&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=460dec97bc1526dc63a09deb728d0016 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend.png?w=560&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d12303f69f3f19722ae78fb95956fe03 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend.png?w=840&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=708e9affa9053f7768ea8b024834c80f 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend.png?w=1100&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a31b733f50e16854e017423f12d01aed 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend.png?w=1650&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=355ec34e623c1884c23f2092d8862fd1 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend.png?w=2500&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9e0a03f0ee1bdd9d24809b7069c7305c 2500w" data-optimize="true" data-opv="2" />\
\
<Info>\
  Need specific help with a provider? View our [knowledge base DNS\
  Guides](/knowledge-base).\
</Info>\
\
## What are SPF records\
\
Sender Policy Framework (SPF) is an email authentication standard that allows you to list all the IP addresses that are authorized to send email on behalf of your domain.\
\
The SPF configuration is made of a TXT record that lists the IP addresses approved by the domain owner. It also includes a MX record that allows the recipient to send bounce and complaint feedback to your domain.\
\
<img alt="SPF Records" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf.png?maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2160bf54d822136cc7629a21a10cc1c3" width="2992" height="1868" data-path="images/dashboard-domains-resend-spf.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf.png?w=280&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d912442f7f4eb1206486a08f52107de2 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf.png?w=560&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6fc7f0de83f252852f387e2410460c9a 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf.png?w=840&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3ff5436e718fc8ed82c19f2deda04620 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf.png?w=1100&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=fd6e6011681d90c9e1531542e7b061ae 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf.png?w=1650&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=fadcec4e8c530de2ea08e7959261203b 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf.png?w=2500&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a674ba66e8b863cb2a9b6363ba951d49 2500w" data-optimize="true" data-opv="2" />\
\
## Custom Return Path\
\
By default, Resend will use the `send` subdomain for the Return-Path address. You can change this by setting the optional `custom_return_path` parameter when [creating a domain](/api-reference/domains/create-domain) via the API or under **Advanced options** in the dashboard.\
\
<img alt="Custom Return Path" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-custom-return-path.png?maxW=3360&auto=format&n=JHWt09hsc7E33HK2&q=85&s=71e54f7ba2534fbcc9a0f3c2f1b370d0" width="3360" height="2100" data-path="images/dashboard-domains-resend-custom-return-path.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-custom-return-path.png?w=280&maxW=3360&auto=format&n=JHWt09hsc7E33HK2&q=85&s=79fbb85deff66f9f564253980ef10aa5 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-custom-return-path.png?w=560&maxW=3360&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5ec3b87fd963a2df4cb2e9659774f892 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-custom-return-path.png?w=840&maxW=3360&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e353d11503d63077e8262c272f6dc36b 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-custom-return-path.png?w=1100&maxW=3360&auto=format&n=JHWt09hsc7E33HK2&q=85&s=78542e63729fb4276a960d6af97bf1e8 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-custom-return-path.png?w=1650&maxW=3360&auto=format&n=JHWt09hsc7E33HK2&q=85&s=50d9828b0cfb8f04d292c368e0862ec9 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-custom-return-path.png?w=2500&maxW=3360&auto=format&n=JHWt09hsc7E33HK2&q=85&s=aa58c1439976a829da3c6cd2f895a49e 2500w" data-optimize="true" data-opv="2" />\
\
For the API, optionally pass the custom return path parameter.\
\
<CodeGroup>\
  ```ts Node.js\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  resend.domains.create(\{ name: 'example.com', customReturnPath: 'outbound' \});\
  ```\
\
  ```php PHP\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->domains->create([\
    'name' => 'example.com',\
    'custom_return_path' => 'outbound'\
  ]);\
  ```\
\
  ```python Python\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  params: resend.Domains.CreateParams = \{\
    "name": "example.com",\
    "custom_return_path": "outbound"\
  \}\
\
  resend.Domains.create(params)\
  ```\
\
  ```ruby Ruby\
  Resend.api_key = ENV["RESEND_API_KEY"]\
\
  params = \{\
    name: "example.com",\
    custom_return_path: "outbound"\
  \}\
  domain = Resend::Domains.create(params)\
  puts domain\
  ```\
\
  ```go Go\
  import 	"github.com/resend/resend-go/v2"\
\
  client := resend.NewClient("re_xxxxxxxxx")\
\
  params := &resend.CreateDomainRequest\{\
      Name: "example.com",\
      CustomReturnPath: "outbound",\
  \}\
\
  domain, err := client.Domains.Create(params)\
  ```\
\
  ```rust Rust\
  use resend_rs::\{types::CreateDomainOptions, Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let _domain = resend\
      .domains\
      .add(CreateDomainOptions::new("example.com").with_custom_return_path("outbound"))\
      .await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          CreateDomainOptions params = CreateDomainOptions\
                  .builder()\
                  .name("example.com")\
                  .customReturnPath("outbound")\
                  .build();\
\
          CreateDomainResponse domain = resend.domains().create(params);\
      \}\
  \}\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var resp = await resend.DomainAddAsync( "example.com", new DomainAddOptions \{ CustomReturnPath = "outbound" \} );\
  Console.WriteLine( "Domain Id=\{0\}", resp.Content.Id );\
  ```\
\
  ```bash cURL\
  curl -X POST 'https://api.resend.com/domains' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "name": "example.com",\
    "custom_return_path": "outbound"\
  \}'\
  ```\
</CodeGroup>\
\
Custom return paths must adhere to the following rules:\
\
* Must be 63 characters or less\
* Must start with a letter, end with a letter or number, and contain only letters, numbers, and hyphens\
\
Avoid setting values that could undermine credibility (e.g. `testing`), as they may be exposed to recipients in some email clients.\
\
## What are DKIM records\
\
DomainKeys Identified Mail (DKIM) is an email security standard designed to make sure that an email that claims to have come from a specific domain was indeed authorized by the owner of that domain.\
\
The DKIM configuration is made of a TXT record that contains a public key that is used to verify the authenticity of the email.\
\
<img alt="DKIM Records" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=664211d386b509e71a2a1ed05cefee73" width="2992" height="1868" data-path="images/dashboard-domains-resend-dkim.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e67460142f3afb173aaf6e0b7de5c91e 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=967d173c52b6d8f4f4cb084c018baef4 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a3a6c52abfac2a1e868371804da1a2dc 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8a62a7acf499f5ec75a70f87fa3a274a 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a9eadede29682ebd7cfaab3bf5300d64 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2fb4c83336c19d0dbe91569a022386e9 2500w" data-optimize="true" data-opv="2" />\
\
## Understand a domain status\
\
Domains can have different statuses, including:\
\
* `not_started`: You've added a domain to Resend, but you haven't clicked on `Verify DNS Records` yet.\
* `pending`: Resend is still trying to verify the domain.\
* `verified`: Your domain is successfully verified for sending in Resend.\
* `failed`: Resend was unable to detect the DNS records within 72 hours.\
* `temporary_failure`: For a previously verified domain, Resend will periodically check for the DNS record required for verification. If at some point, Resend is unable to detect the record, the status would change to "Temporary Failure". Resend will recheck for the DNS record for 72 hours, and if it's unable to detect the record, the domain status would change to "Failure". If it's able to detect the record, the domain status would change to "Verified".\
\
## Open and Click Tracking\
\
Open and click tracking is disabled by default for all domains. You can enable it by clicking on the toggles within the domain settings.\
\
<img alt="Open and Click Tracking" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-open-and-click-tracking.png?maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e86949253c27c7b8639a7cc4c53ed02e" width="2992" height="1868" data-path="images/dashboard-domains-open-and-click-tracking.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-open-and-click-tracking.png?w=280&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d355d49f1aa0c1a9825b990505688e54 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-open-and-click-tracking.png?w=560&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=dae90b50dea9402cf1e3b02850a96a59 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-open-and-click-tracking.png?w=840&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f226cd81d184360bbbdb137827bd3a7e 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-open-and-click-tracking.png?w=1100&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4b27ae3ec9ac03db29decda573a9da94 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-open-and-click-tracking.png?w=1650&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d415ee2b26d36a51ddf9bca0b5834db3 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-open-and-click-tracking.png?w=2500&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=c0fc4eba5fafc17982a02625355f19af 2500w" data-optimize="true" data-opv="2" />\
\
<Info>\
  For best deliverability, we recommend disabling click and open tracking [for\
  sensitive transactional\
  emails](/dashboard/emails/deliverability-insights#disable-click-tracking).\
</Info>\
\
## How Open Tracking Works\
\
A 1x1 pixel transparent GIF image is inserted in each email and includes a unique reference to this image file. When the image is downloaded, Resend can tell exactly which message was opened and by whom.\
\
## How Click Tracking Works\
\
To track clicks, Resend modifies each link in the body of the HTML email. When recipients open a link, they are sent to a Resend server, and are immediately redirected to the URL destination.\
\
<Snippet file="exports-section.mdx" />\
\
\
# Choosing a Region\
Source: https://resend.com/docs/dashboard/domains/regions\
\
Resend offers sending from multiple regions\
\
Resend users have the option to send transactional and marketing emails from four different regions:\
\
* North Virginia (us-east-1)\
* Ireland (eu-west-1)\
* S\'e3o Paulo (sa-east-1)\
* Tokyo (ap-northeast-1)\
\
No matter where your users are, you can ensure that they receive your emails in a timely and efficient manner. You can visualize the different regions in the Resend dashboard:\
\
<img alt="Multi Region Domains" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/multi-region-1.png?maxW=1680&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=da8317619454843bc17ceb1977398610" width="1680" height="1050" data-path="images/multi-region-1.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/multi-region-1.png?w=280&maxW=1680&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=57bdbc79f4f2c09a12f6c6f65cb2104c 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/multi-region-1.png?w=560&maxW=1680&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=030d67142a52e0f1374e83d135396dec 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/multi-region-1.png?w=840&maxW=1680&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1b069391d53461f6d6ca79dcc6b4637b 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/multi-region-1.png?w=1100&maxW=1680&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=7e68ad1aae2d0002177fc59a8d1f7add 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/multi-region-1.png?w=1650&maxW=1680&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=a099dcd733f44752b2e1c25ec71fa6cf 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/multi-region-1.png?w=2500&maxW=1680&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1fb5c366f66e4658ad3ff0892d782c6c 2500w" data-optimize="true" data-opv="2" />\
\
## Why is this important?\
\
Especially for transactional emails like magic links, password resets, and welcome messages, users expect to receive them right away. If they don't, they might not be able to access your service right away, which could be a missed opportunity for your organization.\
\
Here are some of the other benefits of using our multi-region email sending feature:\
\
1. **Faster delivery:** By sending emails from the region closest to your user, you can reduce latency and ensure a faster time-to-inbox. This can be the difference between people using/buying your product or not.\
2. **Easier account management:** Instead of having to maintain different accounts for each region, we're providing multi-region within the same account. That way, you aren't juggling different login credentials.\
3. **Increased resilience:** In case of disruption in one region, our multi-region feature enables you to send emails from a backup domain in a separate region, guaranteeing maximum uptime.\
\
## Get Started\
\
To start using our multi-region email sending feature, go to **[Domains](https://resend.com/domains)**, then select the option to add a new domain.\
\
Finally, select the region you want to send your emails.\
\
## How to set up multi-region for the same domain\
\
For advanced needs, you can set up multiple regions for the same domain. We recommend setting a unique subdomain for each region (e.g., us.domain.com, eu.domain.com). When sending transactional emails or marketing emails, choose the right domain for your users.\
\
## Changing Domain Region\
\
If you'd like to switch the region your domain is currently set to:\
\
1. Delete your current domain in the [Domain's page](https://resend.com/domains).\
2. Add the same domain again, selecting the new region.\
3. Update your DNS records to point to the new domain.\
\
For more help, please reach out to [Support](https://resend.com/help), and we can help you out.\
\
\
# Add an unsubscribe link to transactional emails\
Source: https://resend.com/docs/dashboard/emails/add-unsubscribe-to-transactional-emails\
\
Learn how to give email recipients the ability to unsubscribe without searching for the unsubscribe link.\
\
Resend currently doesn't manage contact lists for transactional emails.\
\
If you manage your own list, you can add the `List-Unsubscribe: https://example.com/unsubscribe` header when sending emails using the Resend API.\
\
As of Febuary 2024, your bulk messages must include a URL version in your list-unsubscribe header, `List-Unsubscribe-Post: List-Unsubscribe=One-Click`, and to allow for a `POST` request from the same URL.\
\
When receiving a `POST`, it should return a blank page with `200 (OK)` or `202 (Accepted)`, and should show the regular unsubscribe page with the `GET` method. Ensure that users stop receiving email within 48 hours of this request.\
\
This header allows email clients to offer an easy \'93Unsubscribe\'94 option in their UI, enhancing user experience and decreasing spam complaints.\
\
You can read more about this requirement in our [Bulk Sending Requirements blog post.](https://resend.com/blog/gmail-and-yahoo-bulk-sending-requirements-for-2024#one-click-unsubscribe)\
\
```ts Node.js \{11\}\
import \{ Resend \} from 'resend';\
\
const resend = new Resend('re_xxxxxxxxx');\
\
await resend.emails.send(\{\
  from: 'Acme <onboarding@resend.dev>',\
  to: ['delivered@resend.dev'],\
  subject: 'hello world',\
  text: 'it works!',\
  headers: \{\
    'List-Unsubscribe': '<https://example.com/unsubscribe>',\
  \},\
\});\
```\
\
## Example\
\
<Card title="Unsubscribe url header" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-examples/tree/main/with-unsubscribe-url-header">\
  See the full source code.\
</Card>\
\
\
# Attachments\
Source: https://resend.com/docs/dashboard/emails/attachments\
\
Send emails with attachments.\
\
There are two ways to send attachments:\
\
1. [From a remote file](#send-attachments-from-a-remote-file)\
2. [From a local file](#send-attachments-from-a-local-file)\
\
<Info>\
  We currently do not support sending attachments [when using our batch\
  endpoint](/api-reference/emails/send-batch-emails).\
</Info>\
\
## Send attachments from a remote file\
\
Include the `path` parameter to send attachments from a remote file. This parameter accepts a URL to the file you want to attach.\
\
Define the file name that will be attached using the `filename` parameter.\
\
<CodeGroup>\
  ```ts Node.js \{12-13\}\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  await resend.emails.send(\{\
    from: 'Acme <onboarding@resend.dev>',\
    to: ['delivered@resend.dev'],\
    subject: 'Receipt for your payment',\
    html: '<p>Thanks for the payment</p>',\
    attachments: [\
      \{\
        path: 'https://resend.com/static/sample/invoice.pdf',\
        filename: 'invoice.pdf',\
      \},\
    ],\
  \});\
  ```\
\
  ```php PHP \{10-11\}\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->emails->send([\
    'from' => 'Acme <onboarding@resend.dev>',\
    'to' => ['delivered@resend.dev'],\
    'subject' => 'Receipt for your payment',\
    'html' => '<p>Thanks for the payment</p>',\
    'attachments' => [\
      [\
        'path' => 'https://resend.com/static/sample/invoice.pdf',\
        'filename' => 'invoice.pdf'\
      ]\
    ]\
  ]);\
  ```\
\
  ```python Python \{6-7\}\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  attachment: resend.RemoteAttachment = \{\
    "path": "https://resend.com/static/sample/invoice.pdf",\
    "filename": "invoice.pdf",\
  \}\
\
  params: resend.Emails.SendParams = \{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "Receipt for your payment",\
    "html": "<p>Thanks for the payment</p>",\
    "attachments": [attachment],\
  \}\
\
  resend.Emails.send(params)\
  ```\
\
  ```rb Ruby \{12-13\}\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  params = \{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "Receipt for your payment",\
    "html": "<p>Thanks for the payment</p>",\
    "attachments": [\
      \{\
        "path": "https://resend.com/static/sample/invoice.pdf",\
        "filename": 'invoice.pdf',\
      \}\
    ]\
  \}\
\
  Resend::Emails.send(params)\
  ```\
\
  ```go Go \{12-13\}\
  import (\
  	"fmt"\
\
  	"github.com/resend/resend-go/v2"\
  )\
\
  func main() \{\
    ctx := context.TODO()\
    client := resend.NewClient("re_xxxxxxxxx")\
\
    attachment := &resend.Attachment\{\
      Path:  "https://resend.com/static/sample/invoice.pdf",\
      Filename: "invoice.pdf",\
    \}\
\
    params := &resend.SendEmailRequest\{\
        From:        "Acme <onboarding@resend.dev>",\
        To:          []string\{"delivered@resend.dev"\},\
        Subject:     "Receipt for your payment",\
        Html:        "<p>Thanks for the payment</p>",\
        Attachments: []*resend.Attachment\{attachment\},\
    \}\
\
    sent, err := client.Emails.SendWithContext(ctx, params)\
\
    if err != nil \{\
      panic(err)\
    \}\
    fmt.Println(sent.Id)\
  \}\
  ```\
\
  ```rust Rust \{12-13\}\
  use resend_rs::types::\{Attachment, CreateEmailBaseOptions\};\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let from = "Acme <onboarding@resend.dev>";\
    let to = ["delivered@resend.dev"];\
    let subject = "Receipt for your payment";\
\
    let path = "https://resend.com/static/sample/invoice.pdf";\
    let filename = "invoice.pdf";\
\
    let email = CreateEmailBaseOptions::new(from, to, subject)\
      .with_html("<p>Thanks for the payment</p>")\
      .with_attachment(Attachment::from_path(path).with_filename(filename));\
\
    let _email = resend.emails.send(email).await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java \{8-9\}\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          Attachment att = Attachment.builder()\
                  .path("https://resend.com/static/sample/invoice.pdf")\
                  .fileName("invoice.pdf")\
                  .build();\
\
          CreateEmailOptions params = CreateEmailOptions.builder()\
                  .from("Acme <onboarding@resend.dev>")\
                  .to("delivered@resend.dev")\
                  .subject("Receipt for your payment")\
                  .html("<p>Thanks for the payment</p>")\
                  .attachments(att)\
                  .build();\
\
          CreateEmailResponse data = resend.emails().send(params);\
      \}\
  \}\
  ```\
\
  ```csharp .NET \{14-18\}\
  using Resend;\
  using System.Collections.Generic;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var message = new EmailMessage()\
  \{\
      From = "Acme <onboarding@resend.dev>",\
      To = "delivered@resend.dev",\
      Subject = "Receipt for your payment",\
      HtmlBody = "<p>Thanks for the payment</p>",\
  \};\
\
  message.Attachments = new List<EmailAttachment>();\
  message.Attachments.Add( new EmailAttachment() \{\
    Filename = "invoice.pdf",\
    Path = "https://resend.com/static/sample/invoice.pdf",\
  \} );\
\
  var resp = await resend.EmailSendAsync( message );\
  Console.WriteLine( "Email Id=\{0\}", resp.Content );\
  ```\
\
  ```bash cURL \{11-12\}\
  curl -X POST 'https://api.resend.com/emails' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "Receipt for your payment",\
    "html": "<p>Thanks for the payment</p>",\
    "attachments": [\
      \{\
        "path": "https://resend.com/static/sample/invoice.pdf",\
        "filename": "invoice.pdf"\
      \}\
    ]\
  \}'\
  ```\
</CodeGroup>\
\
## Send attachments from a local file\
\
Include the `content` parameter to send attachments from a local file. This parameter accepts the Base64 encoded content of the file you want to attach.\
\
Define the file name that will be attached using the `filename` parameter.\
\
<CodeGroup>\
  ```ts Node.js \{16-17\}\
  import \{ Resend \} from 'resend';\
  import fs from 'fs';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const filepath = `$\{__dirname\}/static/invoice.pdf`;\
  const attachment = fs.readFileSync(filepath).toString('base64');\
\
  await resend.emails.send(\{\
    from: 'Acme <onboarding@resend.dev>',\
    to: ['delivered@resend.dev'],\
    subject: 'Receipt for your payment',\
    text: '<p>Thanks for the payment</p>',\
    attachments: [\
      \{\
        content: attachment,\
        filename: 'invoice.pdf',\
      \},\
    ],\
  \});\
  ```\
\
  ```php PHP \{10-11\}\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->emails->send([\
    'from' => 'Acme <onboarding@resend.dev>',\
    'to' => ['delivered@resend.dev'],\
    'subject' => 'Receipt for your payment',\
    'html' => '<p>Thanks for the payment</p>',\
    'attachments' => [\
      [\
        'filename' => 'invoice.pdf',\
        'content' => $invoiceBuffer\
      ]\
    ]\
  ]);\
  ```\
\
  ```python Python \{10\}\
  import os\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  f: bytes = open(\
    os.path.join(os.path.dirname(__file__), "../static/invoice.pdf"), "rb"\
  ).read()\
\
  attachment: resend.Attachment = \{"content": list(f), "filename": "invoice.pdf"\}\
\
  params: resend.Emails.SendParams = \{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "Receipt for your payment",\
    "html": "<p>Thanks for the payment</p>",\
    "attachments": [attachment],\
  \}\
\
  resend.Emails.send(params)\
  ```\
\
  ```rb Ruby \{14-15\}\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  file = IO.read("invoice.pdf")\
\
  params = \{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "Receipt for your payment",\
    "html": "<p>Thanks for the payment</p>",\
    "attachments": [\
      \{\
        "content": file.bytes,\
        "filename": 'invoice.pdf',\
      \}\
    ]\
  \}\
\
  Resend::Emails.send(params)\
  ```\
\
  ```go Go \{19-20\}\
  import (\
  	"fmt"\
  	"os"\
\
  	"github.com/resend/resend-go/v2"\
  )\
\
  func main() \{\
    ctx := context.TODO()\
    client := resend.NewClient("re_xxxxxxxxx")\
\
    pwd, _ := os.Getwd()\
    f, err := os.ReadFile(pwd + "/static/invoice.pdf")\
    if err != nil \{\
      panic(err)\
    \}\
\
    attachment := &resend.Attachment\{\
      Content:  f,\
      Filename: "invoice.pdf",\
    \}\
\
    params := &resend.SendEmailRequest\{\
        From:        "Acme <onboarding@resend.dev>",\
        To:          []string\{"delivered@resend.dev"\},\
        Subject:     "Receipt for your payment",\
        Html:        "<p>Thanks for the payment</p>",\
        Attachments: []*resend.Attachment\{attachment\},\
    \}\
\
    sent, err := client.Emails.SendWithContext(ctx, params)\
\
    if err != nil \{\
      panic(err)\
    \}\
    fmt.Println(sent.Id)\
  \}\
  ```\
\
  ```rust Rust \{22\}\
  use std::fs::File;\
  use std::io::Read;\
\
  use resend_rs::types::\{Attachment, CreateEmailBaseOptions\};\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let from = "Acme <onboarding@resend.dev>";\
    let to = ["delivered@resend.dev"];\
    let subject = "Receipt for your payment";\
\
    let filename = "invoice.pdf";\
    let mut f = File::open(filename).unwrap();\
    let mut invoice = Vec::new();\
    f.read_to_end(&mut invoice).unwrap();\
\
    let email = CreateEmailBaseOptions::new(from, to, subject)\
      .with_html("<p>Thanks for the payment</p>")\
      .with_attachment(Attachment::from_content(invoice).with_filename(filename));\
\
    let _email = resend.emails.send(email).await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java \{8-9\}\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          Attachment att = Attachment.builder()\
                  .fileName("invoice.pdf")\
                  .content("invoiceBuffer")\
                  .build();\
\
          CreateEmailOptions params = CreateEmailOptions.builder()\
                  .from("Acme <onboarding@resend.dev>")\
                  .to("delivered@resend.dev")\
                  .subject("Receipt for your payment")\
                  .html("<p>Thanks for the payment</p>")\
                  .attachments(att)\
                  .build();\
\
          CreateEmailOptions params = CreateEmailOptions.builder()\
      \}\
  \}\
  ```\
\
  ```csharp .NET \{15-19\}\
  using Resend;\
  using System.Collections.Generic;\
  using System.IO;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var message = new EmailMessage()\
  \{\
      From = "Acme <onboarding@resend.dev>",\
      To = "delivered@resend.dev",\
      Subject = "Receipt for your payment",\
      HtmlBody = "<p>Thanks for the payment</p>",\
  \};\
\
  message.Attachments = new List<EmailAttachment>();\
  message.Attachments.Add( new EmailAttachment() \{\
    Filename = "invoice.pdf",\
    Content = await File.ReadAllBytesAsync( "invoice.pdf" ),\
  \} );\
\
  var resp = await resend.EmailSendAsync( message );\
  Console.WriteLine( "Email Id=\{0\}", resp.Content );\
  ```\
\
  ```bash cURL \{11-12\}\
  curl -X POST 'https://api.resend.com/emails' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "Receipt for your payment",\
    "html": "<p>Thanks for the payment</p>",\
    "attachments": [\
      \{\
        "content": "UmVzZW5kIGF0dGFjaG1lbnQgZXhhbXBsZS4gTmljZSBqb2Igc2VuZGluZyB0aGUgZW1haWwh%",\
        "filename": "invoice.txt"\
      \}\
    ]\
  \}'\
  ```\
</CodeGroup>\
\
## Embed Images using CID\
\
You can optionally embed an image in the HTML body of the email. Both remote and local attachments are supported. All attachment requirements, options, and limitations apply to embedded inline images as well.\
\
Embedding images requires two steps:\
\
**1. Add the CID in the email HTML.**\
\
Use the prefix `cid:` to reference the ID in the `src` attribute of an image tag in the HTML body of the email.\
\
```html\
<img src="cid:logo-image" />\
```\
\
**2. Reference the CID in the attachment**\
\
Include the `content_id` parameter in the attachment object (e.g. `content_id: "logo-image"`).\
\
The ID is an arbitrary string set by you, and must be less than 128 characters.\
\
Learn more about [embedding images](/dashboard/emails/embed-inline-images).\
\
## Attachment Limitations\
\
* Emails can be no larger than 40MB (including attachments after Base64 encoding).\
* Not all file types are supported. See the list of [unsupported file types](/knowledge-base/what-attachment-types-are-not-supported).\
* Emails with attachments cannot be scheduled.\
* Emails with attachments cannot be sent using our [batching endpoint](/api-reference/emails/send-batch-emails).\
\
<Note>\
  All attachments (including inline images) do not currently display in the\
  [emails dashboard](https://resend.com/emails) when previewing an email's HTML.\
</Note>\
\
## Examples\
\
<CardGroup>\
  <Card title="Attachments with Next.js (remote file)" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-examples/tree/main/with-attachments">\
    See the full source code.\
  </Card>\
\
  <Card title="Attachments with Next.js (local file)" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-examples/tree/main/with-attachments-content">\
    See the full source code.\
  </Card>\
</CardGroup>\
\
\
# Custom Headers\
Source: https://resend.com/docs/dashboard/emails/custom-headers\
\
Customize how emails are sent with your own headers.\
\
Email headers are typically hidden from the end user but are crucial for deliverability. They include information about the sender, receiver, timestamp, and more.\
\
Resend already includes all the necessary headers for you, but now you can also add your own custom headers.\
\
This is a fairly advanced feature, but it can be useful for a few things:\
\
* Prevent threading on Gmail with the **`X-Entity-Ref-ID`** header ([Example](https://github.com/resend/resend-examples/tree/main/with-prevent-thread-on-gmail))\
* Include a shortcut for users to unsubscribe with the **`List-Unsubscribe`** header ([Example](https://github.com/resend/resend-examples/tree/main/with-unsubscribe-url-header))\
\
Here's how you can add custom headers to your emails:\
\
<CodeGroup>\
  ```ts Node.js \{11\}\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  await resend.emails.send(\{\
    from: 'Acme <onboarding@resend.dev>',\
    to: ['delivered@resend.dev'],\
    subject: 'hello world',\
    html: '<p>it works!</p>',\
    headers: \{\
      'X-Entity-Ref-ID': 'xxx_xxxx',\
    \},\
  \});\
  ```\
\
  ```php PHP \{9\}\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->emails->send([\
    'from' => 'Acme <onboarding@resend.dev>',\
    'to' => ['delivered@resend.dev'],\
    'subject' => 'hello world',\
    'html' => '<p>it works!</p>',\
    'headers' => [\
      'X-Entity-Ref-ID' => 'xxx_xxxx',\
    ]\
  ]);\
  ```\
\
  ```python Python \{11\}\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  params: resend.Emails.SendParams = \{\
    "from": "onboarding@resend.dev",\
    "to": ["delivered@resend.dev"],\
    "subject": "hi",\
    "html": "<p>it works!</p>",\
    "headers": \{\
      "X-Entity-Ref-ID": "xxx_xxxx"\
    \}\
  \}\
\
  email = resend.Emails.send(params)\
  print(email)\
  ```\
\
  ```rb Ruby \{11\}\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  params = \{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "hello world",\
    "html": "<p>it works!</p>",\
    "headers": \{\
      "X-Entity-Ref-ID": "123"\
    \},\
  \}\
\
  sent = Resend::Emails.send(params)\
  puts sent\
  ```\
\
  ```go Go \{17\}\
  import (\
  	"fmt"\
\
  	"github.com/resend/resend-go/v2"\
  )\
\
  func main() \{\
    ctx := context.TODO()\
    client := resend.NewClient("re_xxxxxxxxx")\
\
    params := &resend.SendEmailRequest\{\
        From:        "Acme <onboarding@resend.dev>",\
        To:          []string\{"delivered@resend.dev"\},\
        Subject:     "hello world",\
        Html:        "<p>it works!</p>",\
        Headers:     map[string]string\{\
          "X-Entity-Ref-ID": "xxx_xxxx",\
        \}\
    \}\
\
    sent, err := client.Emails.SendWithContext(ctx, params)\
\
    if err != nil \{\
      panic(err)\
    \}\
    fmt.Println(sent.Id)\
  \}\
  ```\
\
  ```rust Rust \{14\}\
  use resend_rs::types::\{Attachment, CreateEmailBaseOptions, Tag\};\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let from = "Acme <onboarding@resend.dev>";\
    let to = ["delivered@resend.dev"];\
    let subject = "hello world";\
\
    let email = CreateEmailBaseOptions::new(from, to, subject)\
      .with_html("<p>it works!</p>")\
      .with_header("X-Entity-Ref-ID", "xxx_xxxx");\
\
    let _email = resend.emails.send(email).await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java \{13\}\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          CreateEmailOptions params = CreateEmailOptions.builder()\
                  .from("Acme <onboarding@resend.dev>")\
                  .to("delivered@resend.dev")\
                  .subject("hello world")\
                  .html("<p>it works!</p>")\
                  .headers(Map.of(\
                      "X-Entity-Ref-ID", "xxx_xxxx"\
                  ))\
                  .build();\
\
          CreateEmailResponse data = resend.emails().send(params);\
      \}\
  \}\
  ```\
\
  ```csharp .NET \{12-15\}\
  using Resend;\
  using System.Collections.Generic;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var message = new EmailMessage()\
  \{\
      From = "Acme <onboarding@resend.dev>",\
      To = "delivered@resend.dev",\
      Subject = "hello world",\
      HtmlBody = "<p>it works!</p>",\
      Headers = new Dictionary<string, string>()\
      \{\
          \{ "X-Entity-Ref-ID", "xxx_xxxx" \},\
      \},\
  \};\
\
  var resp = await resend.EmailSendAsync( message );\
  Console.WriteLine( "Email Id=\{0\}", resp.Content );\
  ```\
\
  ```bash cURL \{10\}\
  curl -X POST 'https://api.resend.com/emails' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "hello world",\
    "html": "<p>it works!</p>",\
    "headers": \{\
      "X-Entity-Ref-ID": "xxx_xxxx"\
    \}\
  \}'\
  ```\
</CodeGroup>\
\
\
# Deliverability Insights\
Source: https://resend.com/docs/dashboard/emails/deliverability-insights\
\
Improve your deliverability with tailored insights based on your sending.\
\
When you view your email within Resend, there is a "Insights" option. When selected, this will run eight deliverability best practice checks on your email and recommend possible changes to improve deliverability.\
\
<img alt="Deliverability Insights" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-1.jpg?maxW=3357&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=616b7fe9cc88d20757eea39bfc5dd4a5" width="3357" height="2101" data-path="images/deliverability-insights-1.jpg" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-1.jpg?w=280&maxW=3357&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=96217ff6cc51cfd52f19451f9487700d 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-1.jpg?w=560&maxW=3357&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=3c62074d1d5be32d1466079ef0a29e2d 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-1.jpg?w=840&maxW=3357&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=9f560df143fdc35a8325225546abbb73 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-1.jpg?w=1100&maxW=3357&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=cbf0faa8fd7dd5a6417459a0a768aca3 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-1.jpg?w=1650&maxW=3357&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=f62e9caccf74d235716258ee5333f6fb 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-1.jpg?w=2500&maxW=3357&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d7d023e3fc57cc59ccfb34561fd73876 2500w" data-optimize="true" data-opv="2" />\
\
If a check passes, you'll get a nice green check. Resend will provide advice if it fails. We break these into two categories: Attention and Improvements.\
\
## Attention Insights\
\
Changes to your email that can improve deliverability.\
\
<img alt="Attention Insights" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-2.jpg?maxW=2058&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=60e2b418cda2decf32882f7fada9ef6c" width="2058" height="714" data-path="images/deliverability-insights-2.jpg" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-2.jpg?w=280&maxW=2058&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=8e63362323b135b3f4b6baf6c23244e6 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-2.jpg?w=560&maxW=2058&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=284c978c87867466b054e144228b9ccf 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-2.jpg?w=840&maxW=2058&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=524f308899eba1dc27574ccb69f9227c 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-2.jpg?w=1100&maxW=2058&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=bddf64c70529593ae3171f677bfffd9c 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-2.jpg?w=1650&maxW=2058&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=3ba3897e2b57ff69b7b9b02d9e77deb8 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-2.jpg?w=2500&maxW=2058&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ff40ebc2b26077dbc8fa53d373604e60 2500w" data-optimize="true" data-opv="2" />\
\
#### Link URLs match sending domain\
\
Ensure that the URLs in your email match the sending domain. Mismatched URLs can trigger spam filters.\
\
For example, if your sending domain is `@widgets.com`, ensure links within the message point back to `https://widgets.com`.\
\
#### DMARC Record is Valid\
\
DMARC is a TXT record published in the DNS that specifies how email receivers should handle messages from your domain that don\'92t pass SPF or DKIM validation. [A valid DMARC record](/dashboard/domains/dmarc) can help improve email deliverability.\
\
Starting in 2024, Gmail and Yahoo require senders to have a DMARC record published. When [viewing your domain](https://resend.com/domains) in Resend, we provide a suggested DMARC record if you\'92re unsure what to publish.\
\
#### Include Plain Text Version\
\
Including a plain text version of your email ensures that your message is accessible to all recipients, including those who have email clients that do not support HTML.\
\
If you're using Resend's API, [plain text is passed via the `text` parameter](https://resend.com/docs/api-reference/emails/send-email).\
\
This can also generate plain text using [React Email](https://react.email/docs/utilities/render#4-convert-to-plain-text).\
\
#### Don't use "no-reply"\
\
Indicating that this is a one-way communication decreases trust. Some email providers use engagement (email replies) when deciding how to filter your email. A valid email address allows you to communicate with your recipients easily if they have questions.\
\
#### Keep email body size small\
\
Gmail limits the size of each email message to 102 KB. Once that limit is reached, the remaining content is clipped and hidden behind a link to view the entire message. Keep your email body size small to avoid this issue.\
\
This check will show the current size of your email.\
\
## Improvement Insights\
\
If you're diagnosing a deliverability issue, changing your email practices could be helpful.\
\
<img alt="Improvement Insights" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-3.jpg?maxW=2058&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=2334e65d8d233381c6c3c55d782615b3" width="2058" height="844" data-path="images/deliverability-insights-3.jpg" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-3.jpg?w=280&maxW=2058&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=5edf04da367ded4288722398f7c8532a 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-3.jpg?w=560&maxW=2058&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=80b9adea19c7a240aa64a40c3410843a 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-3.jpg?w=840&maxW=2058&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=58a642196df1040d07f7df2282e51c25 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-3.jpg?w=1100&maxW=2058&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=3d14a194fa114f260affdd9d870bb6e5 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-3.jpg?w=1650&maxW=2058&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=f00e42a9bc23e4c4a34770c3b715aa60 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-3.jpg?w=2500&maxW=2058&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=751bb29aefaf57b5dc0303b52afc5863 2500w" data-optimize="true" data-opv="2" />\
\
#### Use a Subdomain\
\
Using a subdomain instead of the root domain helps segment your sending by purpose. This protects different types of sending from impacting the reputation of others and clearly shows the sending purpose.\
\
#### Disable Click Tracking\
\
Click tracking modifies links, sometimes causing spam filters to flag emails as suspicious or phishing attempts. Disabling click tracking can help with email deliverability, especially for sensitive transactional emails like login or email verification.\
\
If on, you can [disable click tracking on your domain in Resend](https://resend.com/domains).\
\
#### Disable Open Tracking\
\
Spam filters are sensitive to tracking pixels, flagging them as potential spam. Without these tracking elements, emails may bypass these filters more effectively, especially for sensitive transactional emails like login or email verification.\
\
If on, you can [disable open tracking on your domain in Resend](https://resend.com/domains).\
\
\
# Email Bounces\
Source: https://resend.com/docs/dashboard/emails/email-bounces\
\
Understanding and resolving delivery issues.\
\
## Why does an email bounce?\
\
A bounce happens when an email cannot be delivered to the person it was meant for, and is returned to the sender. It essentially "bounces" back to the person who sent it.\
\
Some reasons include invalid email addresses, full mailboxes, technical issues with email servers, spam filters, message size restrictions, or blacklisting of the sender's email server.\
\
## Bounce Types and Subtypes\
\
When an email bounces, Resend receives a message from the recipient's mail server. The bounce message explains why the delivery failed so the sender can fix the issue.\
\
There are three types of bounces:\
\
1. `Permanent` - also known as\'a0"hard bounce,\'94 where the recipient's mail server rejects the email and will never be delivered.\
\
   * `General` - The recipient's email provider sent a hard bounce message.\
   * `NoEmail` - It was not possible to retrieve the recipient email address from the bounce message.\
   * `Suppressed` - The recipient's email address is on the suppression list because it has a history of producing hard bounces.\
   * `OnAccountSuppressionList` - Resend has suppressed sending to this address because it has previously "hard bounced."\
\
2. `Transient` - also known as\'a0"soft bounce,\'94 where the recipient's mail server rejects the email but it could be delivered in the future.\
\
   * `General` - The recipient's email provider sent a general bounce message. You might be able to send a message to the same recipient in the future if the issue that caused the message to bounce is resolved.\
   * `MailboxFull` - The recipient's email provider sent a bounce message because the recipient's inbox was full. You might be able to send to the same recipient in the future when the mailbox is no longer full.\
   * `MessageTooLarge` - The recipient's email provider sent a bounce message because message you sent was too large. You might be able to send a message to the same recipient if you reduce the size of the message.\
   * `ContentRejected` - The recipient's email provider sent a bounce message because the message you sent contains content that the provider doesn't allow. You might be able to send a message to the same recipient if you change the content of the message.\
   * `AttachmentRejected` - The recipient's email provider sent a bounce message because the message contained an unacceptable attachment. For example, some email providers may reject messages with attachments of a certain file type, or messages with very large attachments. You might be able to send a message to the same recipient if you remove or change the content of the attachment.\
\
<Tip>\
  Sometimes, inboxes use autoresponders to signal a bounce. A `transient` status\
  could mean it's related to the autoresponder, and it's not a permanent issue.\
</Tip>\
\
3. `Undetermined` - where the recipient's email server bounced, but the bounce message didn't contain enough information for Resend to determine the underlying reason.\
   * `Undetermined` - The recipient's email provider sent a bounce message. The bounce message didn't contain enough information for Resend to determine the reason for the bounce.\
\
## Viewing Bounce Details in Resend\
\
You can see the bounce details by clicking on the email, and hovering over the `Bounced` label.\
\
<img alt="Email Bounce Notification" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-bounce-details-1.png?maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d0df3efad6ac50a9af279586c3b882ba" width="3024" height="1888" data-path="images/email-bounce-details-1.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-bounce-details-1.png?w=280&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=79325fdd4ed1bee6e31d086de993b40d 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-bounce-details-1.png?w=560&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=25e130e82fa693f51cdc0bbae819a1f8 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-bounce-details-1.png?w=840&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b49f7cde2d8c8f25eb95f99b67be1e50 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-bounce-details-1.png?w=1100&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=5485b79a2b0388ba0e31da84687a04a0 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-bounce-details-1.png?w=1650&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=e0cb7b3bb1c42de6bd294a32a9d4a6eb 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-bounce-details-1.png?w=2500&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b1136d28f697a6f2ce8bc9b6732df482 2500w" data-optimize="true" data-opv="2" />\
\
Once you click **See Details**, the drawer will open on the right side of your screen with the bounce type, subtype, along with suggestions on how to proceed.\
\
If the email is on the suppression list, you can click **Remove from Suppression List** to remove it.\
\
<img alt="Email Bounce Drawer" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b538b978ca9c6b4e888d728388585918" width="2992" height="1868" data-path="images/email-suppression-list-2.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=280&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=998b4945fb435125095e6e7b1753c99e 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=560&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ca9cf2f4520e43ce49a4654b3dba198d 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=840&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ecfac30278f887e829bf7fd7e16882a0 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=1100&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=649b99c23a02f92902a92789b35de32b 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=1650&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=73f6a2aeb0f63e67a6888e4c85478dd9 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=2500&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=3ade8d9b5bb1109ee1b57ac4b82c6b7f 2500w" data-optimize="true" data-opv="2" />\
\
\
# Email Templates\
Source: https://resend.com/docs/dashboard/emails/email-templates\
\
Use high quality, unstyled components for your transactional emails using React and Typescript\
\
While you can generate HTML for your emails using any method, we recommend [React Email](https://react.email/) for React developers. It makes it easy to create email templates with React and TailwindCSS.\
\
* [Getting started quickguide](https://react.email/docs/getting-started/automatic-setup)\
* [Email components](https://react.email/components)\
* [Email examples](https://react.email/templates)\
\
Each example includes a preview, the React code, the rendered HTML, and the plain text version of the email.\
\
<video autoPlay muted loop src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-templates.mp4?auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b91ff9098f3295ba9c78390d5147d5be" data-path="images/email-templates.mp4" />\
\
\
# Embed Inline Images\
Source: https://resend.com/docs/dashboard/emails/embed-inline-images\
\
Send emails with inline images.\
\
You can optionally embed an image in the HTML body of the email. This allows you to include images without needing to host them in an external server.\
\
<Info>\
  We currently do not support sending attachments (including inline images)\
  [when using our batch endpoint](/api-reference/emails/send-batch-emails).\
</Info>\
\
<Steps>\
  <Step title="Add the CID in the email HTML.">\
    Use the prefix `cid:` to reference the ID in the `src` attribute of an image tag in the HTML body of the email.\
\
    ```html\
      <img src="cid:logo-image">\
    ```\
  </Step>\
\
  <Step title="Reference the CID in the attachment">\
    Include the `content_id` parameter in the attachment object (e.g. `content_id: "logo-image"`).\
\
    ```bash\
    "attachments": [\
        \{\
          "path": "https://resend.com/static/sample/logo.png",\
          "filename": "logo.png",\
          "content_id": "logo-image"\
        \}\
      ]\
    ```\
\
    The ID is an arbitrary string set by you, and must be less than 128 characters.\
  </Step>\
</Steps>\
\
## Implementation details\
\
Both remote and local attachments are supported. All attachment [requirements, options, and limitations](/dashboard/emails/attachments) apply to inline images as well.\
\
As with all our features, inline images are available across all our SDKs.\
\
### Remote image example\
\
<CodeGroup>\
  ```ts Node.js \{9, 14\}\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  await resend.emails.send(\{\
    from: 'Acme <onboarding@resend.dev>',\
    to: ['delivered@resend.dev'],\
    subject: 'Thank you for contacting us',\
    html: '<p>Here is our <img src="cid:logo-image"/> inline logo</p>',\
    attachments: [\
      \{\
        path: 'https://resend.com/static/sample/logo.png',\
        filename: 'logo.png',\
        contentId: 'logo-image',\
      \},\
    ],\
  \});\
  ```\
\
  ```php PHP \{7,12\}\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->emails->send([\
    'from' => 'Acme <onboarding@resend.dev>',\
    'to' => ['delivered@resend.dev'],\
    'subject' => 'Thank you for contacting us',\
    'html' => '<p>Here is our <img src="cid:logo-image"/> inline logo</p>',\
    'attachments' => [\
      [\
        'path' => 'https://resend.com/static/sample/logo.png',\
        'filename' => 'logo.png',\
        'content_id' => 'logo-image',\
      ]\
    ]\
  ]);\
  ```\
\
  ```python Python \{8,15\}\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  attachment: resend.RemoteAttachment = \{\
    "path": "https://resend.com/static/sample/logo.png",\
    "filename": "logo.png",\
    "content_id": "logo-image",\
  \}\
\
  params: resend.Emails.SendParams = \{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "Thank you for contacting us",\
    "html": "<p>Here is our <img src=\\"cid:logo-image\\"/> inline logo</p>",\
    "attachments": [attachment],\
  \}\
\
  resend.Emails.send(params)\
  ```\
\
  ```rb Ruby \{9, 14\}\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  params = \{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "Thank you for contacting us",\
    "html": "<p>Here is our <img src=\\"cid:logo-image\\"/> inline logo</p>",\
    "attachments": [\
      \{\
        "path": "https://resend.com/static/sample/logo.png",\
        "filename": 'logo.png',\
        "content_id": "logo-image",\
      \}\
    ]\
  \}\
\
  Resend::Emails.send(params)\
  ```\
\
  ```go Go \{14, 21\}\
  import (\
  	"fmt"\
\
  	"github.com/resend/resend-go/v2"\
  )\
\
  func main() \{\
    ctx := context.TODO()\
    client := resend.NewClient("re_xxxxxxxxx")\
\
    attachment := &resend.Attachment\{\
      Path:  "https://resend.com/static/sample/logo.png",\
      Filename: "logo.png",\
      ContentId: "logo-image",\
    \}\
\
    params := &resend.SendEmailRequest\{\
        From:        "Acme <onboarding@resend.dev>",\
        To:          []string\{"delivered@resend.dev"\},\
        Subject:     "Thank you for contacting us",\
        Html:        "<p>Here is our <img src=\\"cid:logo-image\\"/> inline logo</p>",\
        Attachments: []*resend.Attachment\{attachment\},\
    \}\
\
    sent, err := client.Emails.SendWithContext(ctx, params)\
\
    if err != nil \{\
      panic(err)\
    \}\
    fmt.Println(sent.Id)\
  \}\
  ```\
\
  ```rust Rust \{14, 17\}\
  use resend_rs::types::\{Attachment, CreateEmailBaseOptions\};\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let from = "Acme <onboarding@resend.dev>";\
    let to = ["delivered@resend.dev"];\
    let subject = "Thank you for contacting us";\
\
    let path = "https://resend.com/static/sample/logo.png";\
    let filename = "logo.png";\
    let content_id = "logo-image";\
\
    let email = CreateEmailBaseOptions::new(from, to, subject)\
      .with_html("<p>Here is our <img src=\\"cid:logo-image\\"/> inline logo</p>")\
      .with_attachment(Attachment::from_path(path).with_filename(filename).with_content_id(content_id));\
\
    let _email = resend.emails.send(email).await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java \{10, 17\}\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          Attachment att = Attachment.builder()\
                  .path("https://resend.com/static/sample/logo.png")\
                  .fileName("logo.png")\
                  .ContentId("logo-image")\
                  .build();\
\
          CreateEmailOptions params = CreateEmailOptions.builder()\
                  .from("Acme <onboarding@resend.dev>")\
                  .to("delivered@resend.dev")\
                  .subject("Thank you for contacting us")\
                  .html("<p>Here is our <img src=\\"cid:logo-image\\"/> inline logo</p>")\
                  .attachments(att)\
                  .build();\
\
          CreateEmailResponse data = resend.emails().send(params);\
      \}\
  \}\
  ```\
\
  ```csharp .NET \{11, 18\}\
  using Resend;\
  using System.Collections.Generic;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var message = new EmailMessage()\
  \{\
      From = "Acme <onboarding@resend.dev>",\
      To = "delivered@resend.dev",\
      Subject = "Thank you for contacting us",\
      HtmlBody = "<p>Here is our <img src=\\"cid:logo-image\\"/> inline logo</p>",\
  \};\
\
  message.Attachments = new List<EmailAttachment>();\
  message.Attachments.Add( new EmailAttachment() \{\
    Filename = "logo.png",\
    Path = "https://resend.com/static/sample/logo.png",\
    ContentId = "logo-image",\
  \} );\
\
  var resp = await resend.EmailSendAsync( message );\
  Console.WriteLine( "Email Id=\{0\}", resp.Content );\
  ```\
\
  ```bash cURL \{8,13\}\
  curl -X POST 'https://api.resend.com/emails' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "Thank you for contacting us",\
    "html": "<p>Here is our <img src=\\"cid:logo-image\\"/> inline logo</p>",\
    "attachments": [\
      \{\
        "path": "https://resend.com/static/sample/logo.png",\
        "filename": "logo.png",\
        "content_id": "logo-image"\
      \}\
    ]\
  \}'\
  ```\
</CodeGroup>\
\
### Local image example\
\
<CodeGroup>\
  ```ts Node.js \{13, 18\}\
  import \{ Resend \} from 'resend';\
  import fs from 'fs';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const filepath = `$\{__dirname\}/static/logo.png`;\
  const attachment = fs.readFileSync(filepath).toString('base64');\
\
  await resend.emails.send(\{\
    from: 'Acme <onboarding@resend.dev>',\
    to: ['delivered@resend.dev'],\
    subject: 'Thank you for contacting us',\
    text: '<p>Here is our <img src="cid:logo-image"/> inline logo</p>',\
    attachments: [\
      \{\
        content: attachment,\
        filename: 'logo.png',\
        content_id: 'logo-image',\
      \},\
    ],\
  \});\
  ```\
\
  ```php PHP \{7, 12\}\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->emails->send([\
    'from' => 'Acme <onboarding@resend.dev>',\
    'to' => ['delivered@resend.dev'],\
    'subject' => 'Thank you for contacting us',\
    'html' => '<p>Here is our <img src="cid:logo-image"/> inline logo</p>',\
    'attachments' => [\
      [\
        'filename' => 'logo.png',\
        'content' => $invoiceBuffer,\
        'content_id' => 'logo-image',\
      ]\
    ]\
  ]);\
  ```\
\
  ```python Python \{10, 16\}\
  import os\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  f: bytes = open(\
    os.path.join(os.path.dirname(__file__), "../static/logo.png"), "rb"\
  ).read()\
\
  attachment: resend.Attachment = \{"content": list(f), "filename": "logo.png", "content_id": "logo-image"\}\
\
  params: resend.Emails.SendParams = \{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "Thank you for contacting us",\
    "html": "<p>Here is our <img src=\\"cid:logo-image\\"/> inline logo</p>",\
    "attachments": [attachment],\
  \}\
\
  resend.Emails.send(params)\
  ```\
\
  ```rb Ruby \{11,16\}\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  file = IO.read("logo.png")\
\
  params = \{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "Thank you for contacting us",\
    "html": "<p>Here is our <img src=\\"cid:logo-image\\"/> inline logo</p>",\
    "attachments": [\
      \{\
        "content": file.bytes,\
        "filename": 'logo.png',\
        "content_id": "logo-image",\
      \}\
    ]\
  \}\
\
  Resend::Emails.send(params)\
  ```\
\
  ```go Go \{21, 28\}\
  import (\
  	"fmt"\
  	"os"\
\
  	"github.com/resend/resend-go/v2"\
  )\
\
  func main() \{\
    ctx := context.TODO()\
    client := resend.NewClient("re_xxxxxxxxx")\
\
    pwd, _ := os.Getwd()\
    f, err := os.ReadFile(pwd + "/static/logo.png")\
    if err != nil \{\
      panic(err)\
    \}\
\
    attachment := &resend.Attachment\{\
      Content:  f,\
      Filename: "logo.png",\
      ContentId: "logo-image",\
    \}\
\
    params := &resend.SendEmailRequest\{\
        From:        "Acme <onboarding@resend.dev>",\
        To:          []string\{"delivered@resend.dev"\},\
        Subject:     "Thank you for contacting us",\
        Html:        "<p>Here is our <img src=\\"cid:logo-image\\"/> inline logo</p>",\
        Attachments: []*resend.Attachment\{attachment\},\
    \}\
\
    sent, err := client.Emails.SendWithContext(ctx, params)\
\
    if err != nil \{\
      panic(err)\
    \}\
    fmt.Println(sent.Id)\
  \}\
  ```\
\
  ```rust Rust \{16,22\}\
  use std::fs::File;\
  use std::io::Read;\
\
  use resend_rs::types::\{Attachment, CreateEmailBaseOptions\};\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let from = "Acme <onboarding@resend.dev>";\
    let to = ["delivered@resend.dev"];\
    let subject = "Thank you for contacting us";\
\
    let filename = "logo.png";\
    let content_id = "logo-image";\
    let mut f = File::open(filename).unwrap();\
    let mut invoice = Vec::new();\
    f.read_to_end(&mut invoice).unwrap();\
\
    let email = CreateEmailBaseOptions::new(from, to, subject)\
      .with_html("<p>Here is our <img src=\\"cid:logo-image\\"/> inline logo</p>")\
      .with_attachment(Attachment::from_content(invoice).with_filename(filename).with_content_id(content_id));\
\
    let _email = resend.emails.send(email).await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java \{10, 17\}\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          Attachment att = Attachment.builder()\
                  .fileName("logo.png")\
                  .content("invoiceBuffer")\
                  .contentId("logo-image")\
                  .build();\
\
          CreateEmailOptions params = CreateEmailOptions.builder()\
                  .from("Acme <onboarding@resend.dev>")\
                  .to("delivered@resend.dev")\
                  .subject("Thank you for contacting us")\
                  .html("<p>Here is our <img src=\\"cid:logo-image\\"/> inline logo</p>")\
                  .attachments(att)\
                  .build();\
\
          CreateEmailOptions params = CreateEmailOptions.builder()\
      \}\
  \}\
  ```\
\
  ```csharp .NET \{12, 19\}\
  using Resend;\
  using System.Collections.Generic;\
  using System.IO;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var message = new EmailMessage()\
  \{\
      From = "Acme <onboarding@resend.dev>",\
      To = "delivered@resend.dev",\
      Subject = "Thank you for contacting us",\
      HtmlBody = "<p>Here is our <img src=\\"cid:logo-image\\"/> inline logo</p>",\
  \};\
\
  message.Attachments = new List<EmailAttachment>();\
  message.Attachments.Add( new EmailAttachment() \{\
    Filename = "logo.png",\
    Content = await File.ReadAllBytesAsync( "logo.png" ),\
    ContentId = "logo-image",\
  \} );\
\
  var resp = await resend.EmailSendAsync( message );\
  Console.WriteLine( "Email Id=\{0\}", resp.Content );\
  ```\
\
  ```bash cURL \{8, 13\}\
  curl -X POST 'https://api.resend.com/emails' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "Thank you for contacting us",\
    "html": "<p>Here is our <img src=\\"cid:logo-image\\"/> inline logo</p>",\
    "attachments": [\
      \{\
        "content": "UmVzZW5kIGF0dGFjaG1lbnQgZXhhbXBsZS4gTmljZSBqb2Igc2VuZGluZyB0aGUgZW1haWwh%",\
        "filename": "invoice.txt",\
        "content_id": "logo-image"\
      \}\
    ]\
  \}'\
  ```\
</CodeGroup>\
\
## Other considerations\
\
Before adding inline images, consider the following.\
\
* As these images are sent as attachments, you need to encode your image as Base64 when sending the raw content via the API. There is no need to do this when passing the path of a remote image (the API handles this for you).\
* Inline images increase the size of the email.\
* Inline images may be rejected by some clients (especially webmail).\
* As with all attachments, we recommend adding a `content_type` (e.g. `image/png`) or `filename` (e.g. `logo.png`) parameter to the attachment object, as this often helps email clients render the attachment correctly.\
\
<Note>\
  All attachments (including inline images) do not currently display in the\
  [emails dashboard](https://resend.com/emails) when previewing email HTML.\
</Note>\
\
\
# Idempotency Keys\
Source: https://resend.com/docs/dashboard/emails/idempotency-keys\
\
Use idempotency keys to ensure that emails are sent only once.\
\
Include an idempotency key in any email requests to ensure that the same email request is processed only once, even if it's sent multiple times.\
\
<Info>\
  Idempotency keys are currently supported on the `POST /emails` and the `POST\
    /emails/batch` endpoints on the Resend API.\
</Info>\
\
## How does it work?\
\
When you send an email with an idempotency key, we check if an email with the same idempotency key has already been sent in the last 24 hours. **This is an optional feature** that simplifies managing retries on your side.\
\
This makes it safe to retry requests that send an email. You don't have to worry about checking if the original request was sent -- you can just make the same request and our API will give the same response, without actually sending the email again.\
\
## How to use idempotency keys?\
\
Idempotency keys can be **up to 256 characters** and should be unique per API request.\
\
We **recommend using a UUID** or other string that uniquely identifies that specific email.\
\
<Tip>If you have multiple events that trigger emails related to a single entity in your system, you can format your idempotency keys to take advantage of that entity's ID. One idea is to format idempotency keys like `<event-type>/<entity-id>`, for example `welcome-user/123456789`. The specific format you use is up to you.</Tip>\
\
We keep idempotency keys in our system for **24 hours**. This should give you an ample window to retry any failed processes on your end without having to keep track of the sent status.\
\
### `POST /emails` endpoint example\
\
<CodeGroup>\
  ```ts Node.js \{9\}\
  await resend.emails.send(\
    \{\
      from: 'Acme <onboarding@resend.dev>',\
      to: ['delivered@resend.dev'],\
      subject: 'hello world',\
      html: '<p>it works!</p>',\
    \},\
    \{\
      idempotencyKey: 'welcome-user/123456789',\
    \},\
  );\
  ```\
\
  ```php PHP \{9\}\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->emails->send([\
    'from' => 'Acme <onboarding@resend.dev>',\
    'to' => ['delivered@resend.dev'],\
    'subject' => 'hello world',\
    'html' => '<p>it works!</p>',\
  ], [\
    'idempotency_key' => 'welcome-user/123456789',\
  ]);\
  ```\
\
  ```python Python \{9\}\
  params: resend.Emails.SendParams = \{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "hello world",\
    "html": "<p>it works!</p>"\
  \}\
\
  options: resend.Emails.SendOptions = \{\
    "idempotency_key": "welcome-user/123456789",\
  \}\
\
  resend.Emails.send(params, options)\
  ```\
\
  ```rb Ruby \{9\}\
  params = \{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "hello world",\
    "html": "<p>it works!</p>"\
  \}\
  Resend::Emails.send(\
    params,\
    options: \{ idempotency_key: "welcome-user/123456789" \}\
  )\
  ```\
\
  ```go Go \{9\}\
  ctx := context.TODO()\
  params := &resend.SendEmailRequest\{\
    From:    "onboarding@resend.dev",\
    To:      []string\{"delivered@resend.dev"\},\
    Subject: "hello world",\
    Html:    "<p>it works!</p>",\
  \}\
  options := &resend.SendEmailOptions\{\
    IdempotencyKey: "welcome-user/123456789",\
  \}\
  _, err := client.Emails.SendWithOptions(ctx, params, options)\
  if err != nil \{\
    panic(err)\
  \}\
  ```\
\
  ```rust Rust \{14\}\
  use resend_rs::types::CreateEmailBaseOptions;\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let from = "Acme <onboarding@resend.dev>";\
    let to = ["delivered@resend.dev"];\
    let subject = "Hello World";\
\
    let email = CreateEmailBaseOptions::new(from, to, subject)\
      .with_html("<p>it works!</p>")\
      .with_idempotency_key("welcome-user/123456789");\
\
    let _email = resend.emails.send(email).await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java \{9\}\
  CreateEmailOptions params = CreateEmailOptions.builder()\
    .from("Acme <onboarding@resend.dev>")\
    .to("delivered@resend.dev")\
    .subject("hello world")\
    .html("<p>it works!</p>")\
    .build();\
\
  RequestOptions options = RequestOptions.builder()\
    .setIdempotencyKey("welcome-user/123456789").build();\
\
  CreateEmailResponse data = resend.emails().send(params, options);\
  ```\
\
  ```csharp C# \{11\}\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var key = IdempotencyKey.New<int>( "welcome-user", 123456789 );\
  var resp = await resend.EmailSendAsync(key, new EmailMessage()\
  \{\
      From = "Acme <onboarding@resend.dev>",\
      To = "delivered@resend.dev",\
      Subject = "hello world",\
      HtmlBody = "<p>it works!</p>",\
  \} );\
  Console.WriteLine( "Email Id=\{0\}", resp.Content );\
  ```\
\
  ```bash cURL \{4\}\
  curl -X POST 'https://api.resend.com/emails' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -H 'Idempotency-Key: welcome-user/123456789' \\\
       -d $'\{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "hello world",\
    "html": "<p>it works!</p>"\
  \}'\
  ```\
</CodeGroup>\
\
### `POST /emails/batch` endpoint example\
\
<Tip>\
  Format your idempotency keys to take advantage of that entity's ID (i.e.,\
  `<event-type>/<entity-id>`). For batch sends, choose a key that represents the whole batch, like a team, workspace, or project (i.e., `team-quota/123456789`).\
</Tip>\
\
<CodeGroup>\
  ```ts Node.js \{21\}\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  await resend.batch.send(\
    [\
      \{\
        from: 'Acme <onboarding@resend.dev>',\
        to: ['foo@gmail.com'],\
        subject: 'hello world',\
        html: '<h1>it works!</h1>',\
      \},\
      \{\
        from: 'Acme <onboarding@resend.dev>',\
        to: ['bar@outlook.com'],\
        subject: 'world hello',\
        html: '<p>it works!</p>',\
      \},\
    ],\
    \{\
      idempotencyKey: 'team-quota/123456789',\
    \},\
  );\
  ```\
\
  ```php PHP \{19\}\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->batch->send(\
    [\
      [\
        'from' => 'Acme <onboarding@resend.dev>',\
        'to' => ['foo@gmail.com'],\
        'subject' => 'hello world',\
        'html' => '<h1>it works!</h1>',\
      ],\
      [\
        'from' => 'Acme <onboarding@resend.dev>',\
        'to' => ['bar@outlook.com'],\
        'subject' => 'world hello',\
        'html' => '<p>it works!</p>',\
      ]\
    ],\
    [\
      'idempotency_key' => 'team-quota/123456789',\
    ]\
  );\
  ```\
\
  ```py Python \{22\}\
  import resend\
  from typing import List\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  params: List[resend.Emails.SendParams] = [\
    \{\
      "from": "Acme <onboarding@resend.dev>",\
      "to": ["foo@gmail.com"],\
      "subject": "hello world",\
      "html": "<h1>it works!</h1>",\
    \},\
    \{\
      "from": "Acme <onboarding@resend.dev>",\
      "to": ["bar@outlook.com"],\
      "subject": "world hello",\
      "html": "<p>it works!</p>",\
    \}\
  ]\
\
  options: resend.Batch.SendOptions = \{\
    "idempotency_key": "team-quota/123456789",\
  \}\
\
  resend.Batch.send(params, options)\
  ```\
\
  ```rb Ruby \{22\}\
  require "resend"\
\
  Resend.api_key = 're_xxxxxxxxx'\
\
  params = [\
    \{\
      "from": "Acme <onboarding@resend.dev>",\
      "to": ["foo@gmail.com"],\
      "subject": "hello world",\
      "html": "<h1>it works!</h1>",\
    \},\
    \{\
      "from": "Acme <onboarding@resend.dev>",\
      "to": ["bar@outlook.com"],\
      "subject": "world hello",\
      "html": "<p>it works!</p>",\
    \}\
  ]\
\
  Resend::Batch.send(\
    params,\
    options: \{ idempotency_key: "team-quota/123456789" \}\
  )\
  ```\
\
  ```go Go \{32\}\
  package examples\
\
  import (\
  	"fmt"\
  	"os"\
\
  	"github.com/resend/resend-go/v2"\
  )\
\
  func main() \{\
\
    ctx := context.TODO()\
\
    client := resend.NewClient("re_xxxxxxxxx")\
\
    var batchEmails = []*resend.SendEmailRequest\{\
      \{\
        From:    "Acme <onboarding@resend.dev>",\
        To:      []string\{"foo@gmail.com"\},\
        Subject: "hello world",\
        Html:    "<h1>it works!</h1>",\
      \},\
      \{\
        From:    "Acme <onboarding@resend.dev>",\
        To:      []string\{"bar@outlook.com"\},\
        Subject: "world hello",\
        Html:    "<p>it works!</p>",\
      \},\
    \}\
\
    options := &resend.BatchSendEmailOptions\{\
      IdempotencyKey: "team-quota/123456789",\
    \}\
\
    sent, err := client.Batch.SendWithOptions(ctx, batchEmails, options)\
\
    if err != nil \{\
      panic(err)\
    \}\
    fmt.Println(sent.Data)\
  \}\
  ```\
\
  ```rust Rust \{23\}\
  use resend_rs::types::CreateEmailBaseOptions;\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let emails = vec![\
      CreateEmailBaseOptions::new(\
        "Acme <onboarding@resend.dev>",\
        vec!["foo@gmail.com"],\
        "hello world",\
      )\
      .with_html("<h1>it works!</h1>"),\
      CreateEmailBaseOptions::new(\
        "Acme <onboarding@resend.dev>",\
        vec!["bar@outlook.com"],\
        "world hello",\
      )\
      .with_html("<p>it works!</p>"),\
    ];\
\
    let _emails = resend.batch.send_with_idempotency_key(emails, "team-quota/123456789").await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java \{23\}\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          CreateEmailOptions firstEmail = CreateEmailOptions.builder()\
              .from("Acme <onboarding@resend.dev>")\
              .to("foo@gmail.com")\
              .subject("hello world")\
              .html("<h1>it works!</h1>")\
              .build();\
\
          CreateEmailOptions secondEmail = CreateEmailOptions.builder()\
              .from("Acme <onboarding@resend.dev>")\
              .to("bar@outlook.com")\
              .subject("world hello")\
              .html("<p>it works!</p>")\
              .build();\
\
          CreateBatchEmailsResponse data = resend.batch().send(\
              Arrays.asList(firstEmail, secondEmail),\
              Map.of("idempotency_key", "team-quota/123456789")\
          );\
      \}\
  \}\
  ```\
\
  ```csharp .NET \{5\}\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var key = IdempotencyKey.New<int>( "team-quota", 123456789 );\
\
  var mail1 = new EmailMessage()\
  \{\
      From = "Acme <onboarding@resend.dev>",\
      To = "foo@gmail.com",\
      Subject = "hello world",\
      HtmlBody = "<p>it works!</p>",\
  \};\
\
  var mail2 = new EmailMessage()\
  \{\
      From = "Acme <onboarding@resend.dev>",\
      To = "bar@outlook.com",\
      Subject = "hello world",\
      HtmlBody = "<p>it works!</p>",\
  \};\
\
  var resp = await resend.EmailBatchAsync(key, [ mail1, mail2 ] );\
  Console.WriteLine( "Nr Emails=\{0\}", resp.Content.Count );\
  ```\
\
  ```bash cURL \{4\}\
  curl -X POST 'https://api.resend.com/emails/batch' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -H 'Idempotency-Key: team-quota/123456789' \\\
       -d $'[\
    \{\
      "from": "Acme <onboarding@resend.dev>",\
      "to": ["foo@gmail.com"],\
      "subject": "hello world",\
      "html": "<h1>it works!</h1>"\
    \},\
    \{\
      "from": "Acme <onboarding@resend.dev>",\
      "to": ["bar@outlook.com"],\
      "subject": "world hello",\
      "html": "<p>it works!</p>"\
    \}\
  ]'\
  ```\
</CodeGroup>\
\
## Possible responses\
\
After checking if an email with the same idempotency key has already been sent, Resend returns one of the following responses:\
\
* **Successful responses** will return the email ID of the sent email.\
* **Error responses** will return one of the following errors:\
  * `400`: `invalid_idempotency_key` - the idempotency key has to be between 1-256 characters. You can retry with a valid key or without supplying an idempotency key.\
  * `409`: `invalid_idempotent_request` - this idempotency key has already been used on a request that had a different payload. Retrying this request is useless without changing the idempotency key or payload.\
  * `409`: `concurrent_idempotent_requests` - another request with the same idempotency key is currently in progress. As it isn't finished yet, Resend can't return its original response, but it is safe to retry this request later if needed.\
\
\
# Managing Emails\
Source: https://resend.com/docs/dashboard/emails/introduction\
\
Learn how to view and manage all sent emails on the Resend Dashboard.\
\
## View email details\
\
See all the metadata associated with an email, including the sender address, recipient address, subject, and more from the [Emails](https://resend.com/emails) page. Select any email to view its details.\
\
<img alt="Email Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-item.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cf999ef480d8b7bc8719717803bd635a" width="3024" height="1888" data-path="images/dashboard-emails-item.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-item.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=99b0861d3c8951e0cf24c379a47b4fb8 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-item.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=276cd0336fb152ddda974deeb7d40ce8 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-item.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=88cfb32e04109e2f81294597086fd15f 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-item.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=09b2bca168d30ae8cda470ecb90e0a0b 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-item.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=ac1cdc67e16ab08406167cd3f7561c09 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-item.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=fc3ef39c92bcbda20a0f2936bb2bc761 2500w" data-optimize="true" data-opv="2" />\
\
Each email contains a **Preview**, **Plain Text**, and **HTML** version to visualize the content of your sent email in its various formats.\
\
## Understand email events\
\
Here are all the events that can be associated with an email:\
\
* `bounced` - The recipient's mail server rejected the email. ([Learn more about bounced emails](/dashboard/emails/email-bounces))\
* `canceled` - The scheduled email was canceled (by user).\
* `clicked` - The recipient clicked on a link in the email.\
* `complained` - The email was successfully delivered to the recipient's mail server, but the recipient marked it as spam.\
* `delivered` - Resend successfully delivered the email to the recipient's mail server.\
* `delivery_delayed` - The email couldn't be delivered to the recipient's mail server because a temporary issue occurred. Delivery delays can occur, for example, when the recipient's inbox is full, or when the receiving email server experiences a transient issue.\
* `failed` - The email failed to be sent.\
* `opened` - The recipient opened the email.\
* `queued` - The email created from Broadcasts or Batches is queued for delivery.\
* `scheduled` - The email is scheduled for delivery.\
* `sent` - The email was sent successfully.\
\
## Share email link\
\
You can share a public link of a sent email, which is valid for 48 hours. Anyone with the link can visualize the email.\
\
To share a link, click on the **dropdown menu** <Icon icon="ellipsis" iconType="solid" />, and select **Share email**.\
\
<img alt="Email - Share Link Option" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-option.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3883db7777f4848357dfac265d4b3a45" width="3024" height="1888" data-path="images/dashboard-emails-share-option.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-option.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3485fe407675de60a551dfefbbbca1f6 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-option.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=da5016859678ce7830d574636ec4cb0c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-option.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=1347757f330c566af0f9cc7e7497211e 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-option.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=35ba6c8a64d272039f4480495ba64f53 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-option.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=50400ae4add2f530a21d456cd6f8a620 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-option.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e3c3c64f00faa58410d9a1c585715410 2500w" data-optimize="true" data-opv="2" />\
\
Then copy the URL and share it with your team members.\
\
<img alt="Email - Share Link Modal" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-modal.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d88bf8c7a535f5ebe3f67d4d230fcc55" width="3024" height="1888" data-path="images/dashboard-emails-share-modal.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-modal.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=ab886d09ffeab52ac7ba0efe2e230148 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-modal.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e1dcb54806a383cc29a3d8604c3a1ad8 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-modal.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=b8d538a6b98e61176b168402caf98704 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-modal.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=14adb4e15cff5882a4ccfd037104af93 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-modal.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6faf8d8d91f5ea3321c8916b486f3e3a 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-modal.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a1d586ef5b44120f8efc996b786d3151 2500w" data-optimize="true" data-opv="2" />\
\
Anyone with the link can visualize the email without authenticating for 48 hours.\
\
<img alt="Email - Share Link Item" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-item.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=edae2736866051c78dfdfd762c1732d3" width="3024" height="1888" data-path="images/dashboard-emails-share-item.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-item.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5282ac50011079ce8ff0954468a3ad8a 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-item.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=c7181d5d4dd15a3316ca76b95238af11 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-item.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e9f2b5b14849f2f596aa523e956bf16f 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-item.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5d7e62819a25847997ee651faede109b 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-item.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=90a7a7a15f339af9e6f8dc480651cd43 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-item.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=963c3aa5e8751d1670861939c3c041dc 2500w" data-optimize="true" data-opv="2" />\
\
## See associated logs\
\
You can check all the logs associated with an email. This will help you troubleshoot any issues with the request itself.\
\
To view the logs, click on the dropdown menu, and select "View log".\
\
<img alt="Email - View Logs Option" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-option.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=7a5d5ddb1372cf5bbc081709576c1d2e" width="3024" height="1888" data-path="images/dashboard-emails-log-option.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-option.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3799fca630d78db2ec0ea9a1abf84782 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-option.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5c583fa751b2cfd4506c36cf80422c12 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-option.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=36eb5ac49e3b46b4183978e3351007e3 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-option.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9860f91bb02b36a2dd6be33f4777250b 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-option.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=58a358d63a04ede7063de13e2f272a8b 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-option.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=482a7573a8cf201e3243b2fd9c434628 2500w" data-optimize="true" data-opv="2" />\
\
This will take you to logs, where you can see all the logs associated with the email.\
\
<img alt="Email - View Logs Item" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-item.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cf258fa3c94bc845e60f673bea08fefc" width="3024" height="1888" data-path="images/dashboard-emails-log-item.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-item.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5b74ccb43b9aea2e252c1064420d5e68 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-item.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=27835e8d611d6c10cd8d907a8f29027f 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-item.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a86a2b58a4bbf3c22fca91fca165d8b1 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-item.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e585622e330af694a6f5a47100a1ec97 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-item.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a7fba4c4ac320181ca34b24cfd7d3218 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-item.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=652a1213389b0e16f380b24695dc997d 2500w" data-optimize="true" data-opv="2" />\
\
<Snippet file="exports-section.mdx" />\
\
\
# Schedule Email\
Source: https://resend.com/docs/dashboard/emails/schedule-email\
\
Send emails at a specific time without additional complexity.\
\
While some emails need to be delivered as soon as possible, like password resets or magic links, others can be scheduled for a specific time.\
\
Here are some examples of when you might want to schedule an email:\
\
* Send welcome email **5 minutes after** signup\
* Trigger a reminder email **24 hours before** an event\
* Schedule a weekly digest email for the **next day at 9am PST**\
\
Before, you had to use external services to handle the scheduling logic, but now you can use the new Resend API to schedule emails.\
\
<Info>Emails can be scheduled up to 30 days in advance.</Info>\
\
There are two ways to schedule an email:\
\
1. [Using natural language](#1-schedule-using-natural-language)\
2. [Using date format](#2-schedule-using-date-format)\
\
## 1. Schedule using natural language\
\
You can use the various Resend SDKs to schedule emails.\
\
The date can be defined using natural language, such as `"in 1 hour"`, `"tomorrow at 9am"`, or `"Friday at 3pm ET"`.\
\
<CodeGroup>\
  ```ts Node.js \{10\}\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  await resend.emails.send(\{\
    from: 'Acme <onboarding@resend.dev>',\
    to: ['delivered@resend.dev'],\
    subject: 'hello world',\
    html: '<p>it works!</p>',\
    scheduledAt: 'in 1 min',\
  \});\
  ```\
\
  ```php PHP \{8\}\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->emails->send([\
    'from' => 'Acme <onboarding@resend.dev>',\
    'to' => ['delivered@resend.dev'],\
    'subject' => 'hello world',\
    'html' => '<p>it works!</p>',\
    'scheduled_at' => 'in 1 min'\
  ]);\
  ```\
\
  ```python Python \{10\}\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  params: resend.Emails.SendParams = \{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "hello world",\
    "html": "<p>it works!</p>",\
    "scheduled_at": "in 1 min"\
  \}\
\
  resend.Emails.send(params)\
  ```\
\
  ```rb Ruby \{10\}\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  params = \{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "hello world",\
    "html": "<p>it works!</p>",\
    "scheduled_at": "in 1 min"\
  \}\
\
  Resend::Emails.send(params)\
  ```\
\
  ```go Go \{16\}\
  import (\
  	"fmt"\
\
  	"github.com/resend/resend-go/v2"\
  )\
\
  func main() \{\
    ctx := context.TODO()\
    client := resend.NewClient("re_xxxxxxxxx")\
\
    params := &resend.SendEmailRequest\{\
      From:        "Acme <onboarding@resend.dev>",\
      To:          []string\{"delivered@resend.dev"\},\
      Subject:     "hello world",\
      Html:        "<p>it works!</p>",\
      ScheduledAt: "in 1 min"\
    \}\
\
    sent, err := client.Emails.SendWithContext(ctx, params)\
\
    if err != nil \{\
      panic(err)\
    \}\
    fmt.Println(sent.Id)\
  \}\
  ```\
\
  ```rust Rust \{14\}\
  use resend_rs::types::CreateEmailBaseOptions;\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let from = "Acme <onboarding@resend.dev>";\
    let to = ["delivered@resend.dev"];\
    let subject = "hello world";\
\
    let email = CreateEmailBaseOptions::new(from, to, subject)\
      .with_html("<p>it works!</p>")\
      .with_scheduled_at("in 1 min");\
\
    let _email = resend.emails.send(email).await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java \{12\}\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          CreateEmailOptions params = CreateEmailOptions.builder()\
                  .from("Acme <onboarding@resend.dev>")\
                  .to("delivered@resend.dev")\
                  .subject("hello world")\
                  .html("<p>it works!</p>")\
                  .scheduledAt("in 1 min")\
                  .build();\
\
          CreateEmailResponse data = resend.emails().send(params);\
      \}\
  \}\
  ```\
\
  ```csharp .NET \{11\}\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var resp = await resend.EmailSendAsync( new EmailMessage()\
  \{\
      From = "Acme <onboarding@resend.dev>",\
      To = "delivered@resend.dev",\
      Subject = "hello world",\
      HtmlBody = "<p>it works!</p>",\
      MomentSchedule = "in 1 min",\
  \} );\
  Console.WriteLine( "Email Id=\{0\}", resp.Content );\
  ```\
\
  ```bash cURL \{9\}\
  curl -X POST 'https://api.resend.com/emails' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "hello world",\
    "html": "<p>it works!</p>",\
    "scheduled_at": "in 1 min"\
  \}'\
  ```\
</CodeGroup>\
\
## 2. Schedule using date format\
\
You can also use a date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (e.g: `2024-08-05T11:52:01.858Z`).\
\
<CodeGroup>\
  ```ts Node.js \{5\}\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  const oneMinuteFromNow = new Date(Date.now() + 1000 * 60).toISOString();\
\
  await resend.emails.send(\{\
    from: 'Acme <onboarding@resend.dev>',\
    to: ['delivered@resend.dev'],\
    subject: 'hello world',\
    html: '<p>it works!</p>',\
    scheduledAt: oneMinuteFromNow,\
  \});\
  ```\
\
  ```php PHP \{3\}\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $oneMinuteFromNow = (new DateTime())->modify('+1 minute')->format(DateTime::ISO8601);\
\
  $resend->emails->send([\
    'from' => 'Acme <onboarding@resend.dev>',\
    'to' => ['delivered@resend.dev'],\
    'subject' => 'hello world',\
    'html' => '<p>it works!</p>',\
    'scheduled_at' => $oneMinuteFromNow\
  ]);\
  ```\
\
  ```python Python \{6\}\
  import resend\
  from datetime import datetime, timedelta\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  one_minute_from_now = (datetime.now() + timedelta(minutes=1)).isoformat()\
\
  params: resend.Emails.SendParams = \{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "hello world",\
    "html": "<p>it works!</p>",\
    "scheduled_at": one_minute_from_now\
  \}\
\
  resend.Emails.send(params)\
  ```\
\
  ```rb Ruby \{5\}\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  one_minute_from_now = (Time.now + 1 * 60).strftime("%Y-%m-%dT%H:%M:%S.%L%z")\
\
  params = \{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "hello world",\
    "html": "<p>it works!</p>",\
    "scheduled_at": one_minute_from_now\
  \}\
\
  Resend::Emails.send(params)\
  ```\
\
  ```go Go \{12\}\
  import (\
  	"fmt"\
\
  	"github.com/resend/resend-go/v2"\
  )\
\
  func main() \{\
    ctx := context.TODO()\
    client := resend.NewClient("re_xxxxxxxxx")\
\
    oneMinuteFromNow := time.Now().Add(time.Minute * time.Duration(1))\
    oneMinuteFromNowISO := oneMinuteFromNow.Format("2006-01-02T15:04:05-0700")\
\
    params := &resend.SendEmailRequest\{\
      From:        "Acme <onboarding@resend.dev>",\
      To:          []string\{"delivered@resend.dev"\},\
      Subject:     "hello world",\
      Html:        "<p>it works!</p>",\
      ScheduledAt: oneMinuteFromNowISO\
    \}\
\
    sent, err := client.Emails.SendWithContext(ctx, params)\
\
    if err != nil \{\
      panic(err)\
    \}\
    fmt.Println(sent.Id)\
  \}\
  ```\
\
  ```rust Rust \{12-15\}\
  use chrono::\{Local, TimeDelta\};\
  use resend_rs::types::CreateEmailBaseOptions;\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let from = "Acme <onboarding@resend.dev>";\
    let to = ["delivered@resend.dev"];\
    let subject = "hello world";\
    let one_minute_from_now = Local::now()\
      .checked_add_signed(TimeDelta::minutes(1))\
      .unwrap()\
      .to_rfc3339();\
\
    let email = CreateEmailBaseOptions::new(from, to, subject)\
      .with_html("<p>it works!</p>")\
      .with_scheduled_at(&one_minute_from_now);\
\
    let _email = resend.emails.send(email).await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java \{7-10\}\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          String oneMinuteFromNow = Instant\
            .now()\
            .plus(1, ChronoUnit.MINUTES)\
            .toString();\
\
          CreateEmailOptions params = CreateEmailOptions.builder()\
                  .from("Acme <onboarding@resend.dev>")\
                  .to("delivered@resend.dev")\
                  .subject("hello world")\
                  .html("<p>it works!</p>")\
                  .scheduledAt(oneMinuteFromNow)\
                  .build();\
\
          CreateEmailResponse data = resend.emails().send(params);\
      \}\
  \}\
  ```\
\
  ```csharp .NET \{11\}\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  var resp = await resend.EmailSendAsync( new EmailMessage()\
  \{\
      From = "Acme <onboarding@resend.dev>",\
      To = "delivered@resend.dev",\
      Subject = "hello world",\
      HtmlBody = "<p>it works!</p>",\
      MomentSchedule = DateTime.UtcNow.AddMinutes( 1 ),\
  \} );\
  Console.WriteLine( "Email Id=\{0\}", resp.Content );\
  ```\
\
  ```bash cURL \{9\}\
  curl -X POST 'https://api.resend.com/emails' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "hello world",\
    "html": "<p>it works!</p>",\
    "scheduled_at": "2024-08-20T11:52:01.858Z"\
  \}'\
  ```\
</CodeGroup>\
\
## View a scheduled email\
\
Once you schedule an email, you can see the scheduled time in the Resend dashboard.\
\
<video autoPlay muted loop playsInline className="w-full" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/schedule-email-api-1.mp4?auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c5b58dcc61ae29c6896ac9878fc48f2a" data-path="images/schedule-email-api-1.mp4" />\
\
## Reschedule an email\
\
After scheduling an email, you might need to update the scheduled time.\
\
You can do so with the following method:\
\
<CodeGroup>\
  ```ts Node.js \{3\}\
  resend.emails.update(\{\
    id: '49a3999c-0ce1-4ea6-ab68-afcd6dc2e794',\
    scheduledAt: 'in 1 min',\
  \});\
  ```\
\
  ```php PHP \{2\}\
  $resend->emails->update('49a3999c-0ce1-4ea6-ab68-afcd6dc2e794', [\
    'scheduled_at' => 'in 1 min'\
  ]);\
  ```\
\
  ```python Python \{3\}\
  update_params: resend.Emails.UpdateParams = \{\
    "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",\
    "scheduled_at": "in 1 min"\
  \}\
\
  resend.Emails.update(params=update_params)\
  ```\
\
  ```rb Ruby \{3\}\
  update_params = \{\
    "email_id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",\
    "scheduled_at": "in 1 min"\
  \}\
\
  updated_email = Resend::Emails.update(update_params)\
  ```\
\
  ```go Go \{3\}\
  updateParams := &resend.UpdateEmailRequest\{\
    Id:          "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",\
    ScheduledAt: "in 1 min",\
  \}\
\
  updatedEmail, err := client.Emails.Update(updateParams)\
\
  if err != nil \{\
    panic(err)\
  \}\
  fmt.Printf("%v\\n", updatedEmail)\
  ```\
\
  ```rust Rust \{2\}\
  let update = UpdateEmailOptions::new()\
    .with_scheduled_at("in 1 min");\
\
  let _email = resend\
    .emails\
    .update("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794", update)\
    .await?;\
  ```\
\
  ```java Java \{2\}\
  UpdateEmailOptions updateParams = UpdateEmailOptions.builder()\
    .scheduledAt("in 1 min")\
    .build();\
\
  UpdateEmailResponse data = resend.emails().update("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794", updateParams);\
  ```\
\
  ```csharp .NET \{7\}\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  await resend.EmailRescheduleAsync(\
    new Guid( "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794" ),\
    "in 1 min"\
  );\
  ```\
\
  ```bash cURL \{5\}\
  curl -X PATCH 'https://api.resend.com/emails/49a3999c-0ce1-4ea6-ab68-afcd6dc2e794' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "scheduled_at": "in 1 min"\
  \}'\
  ```\
</CodeGroup>\
\
You can also reschedule an email directly in the Resend dashboard.\
\
<video autoPlay muted loop playsInline className="w-full" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/schedule-email-api-2.mp4?auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=bc8296263f7cc4f05dc9b4b46d644904" data-path="images/schedule-email-api-2.mp4" />\
\
## Cancel a scheduled email\
\
<Warning>Once an email is canceled, it cannot be rescheduled.</Warning>\
\
If you need to cancel a scheduled email, you can do so with the following code:\
\
<CodeGroup>\
  ```ts Node.js\
  resend.emails.cancel('49a3999c-0ce1-4ea6-ab68-afcd6dc2e794');\
  ```\
\
  ```php PHP\
  $resend->emails->cancel('49a3999c-0ce1-4ea6-ab68-afcd6dc2e794');\
  ```\
\
  ```python Python\
  resend.Emails.cancel(email_id="49a3999c-0ce1-4ea6-ab68-afcd6dc2e794")\
  ```\
\
  ```rb Ruby\
  Resend::Emails.cancel("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794")\
  ```\
\
  ```go Go\
  canceled, err := client.Emails.Cancel("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794")\
  if err != nil \{\
    panic(err)\
  \}\
  fmt.Println(canceled.Id)\
  ```\
\
  ```rust Rust\
  let _canceled = resend\
    .emails\
    .cancel("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794")\
    .await?;\
  ```\
\
  ```java Java\
  CancelEmailResponse canceled = resend\
      .emails()\
      .cancel("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794");\
  ```\
\
  ```csharp .NET\
  using Resend;\
\
  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI\
\
  await resend.EmailCancelAsync( new Guid( "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794" ) );\
  ```\
\
  ```bash cURL\
  curl -X POST 'https://api.resend.com/emails/49a3999c-0ce1-4ea6-ab68-afcd6dc2e794/cancel' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json'\
  ```\
</CodeGroup>\
\
You can also cancel a scheduled email in the Resend dashboard.\
\
<video autoPlay muted loop playsInline className="w-full" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/schedule-email-api-3.mp4?auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=e2716f2a12785418de5d28321e5286ab" data-path="images/schedule-email-api-3.mp4" />\
\
## Limitations\
\
* Batch emails cannot be scheduled\
* Emails sent via SMTP cannot be scheduled\
* Emails with attachments cannot be scheduled\
\
\
# Send Test Emails\
Source: https://resend.com/docs/dashboard/emails/send-test-emails\
\
Simulate different events by sending test emails.\
\
## How to send test emails\
\
During development, it's important to test different deliverability scenarios.\
\
> **Example**: When an email hard bounces or is marked as spam, it's important to stop sending emails to the recipient, as continuing to send emails to those addresses will damage your domain reputation. We recommend [creating a webhook endpoint](/dashboard/webhooks/introduction) to capture these events and remove the addresses from your mailing lists.\
\
When testing, avoid:\
\
* sending to fake email addresess\
* setting up a fake SMTP server\
\
We provide the following test email addresses to help you simulate different email events without damaging your domain reputation. These test emails enable the safe use of Resend's Dashboard, Webhooks, and API when developing your application.\
\
All test email addresses support labeling, which enables you to send emails to the same test address in multiple ways. You can add a label after the `+` symbol (e.g., `delivered+label1@resend.dev`) to help track and differentiate between different test scenarios in your application.\
\
## Test delivered emails\
\
To test that your emails are being successfully delivered, you can send an email to:\
\
```\
delivered@resend.dev\
```\
\
With labeling support, you can also use:\
\
```\
delivered+user1@resend.dev\
delivered+user2@resend.dev\
delivered+user3@resend.dev\
```\
\
## Test bounced emails\
\
To test that the recipient's email provider rejected your email, you can send an email to:\
\
```\
bounced@resend.dev\
```\
\
With labeling support, you can also use:\
\
```\
bounced+user1@resend.dev\
bounced+user2@resend.dev\
bounced+user3@resend.dev\
```\
\
This will generate a SMTP 550 5.1.1 ("Unknown User") response code.\
\
## Test "Marked as Spam" emails\
\
To test that your emails are being received but marked as spam, you can send an email to:\
\
```\
complained@resend.dev\
```\
\
With labeling support, you can also use:\
\
```\
complained+user1@resend.dev\
complained+user2@resend.dev\
complained+user3@resend.dev\
```\
\
## Using labels effectively\
\
The labeling feature allows you to use any string as a label after the `+` symbol. This is particularly useful for:\
\
* Testing different email flows (e.g., `delivered+signup@resend.dev`, `delivered+password-reset@resend.dev`)\
* Tracking webhook responses for specific test scenarios\
* Differentiating between multiple test runs\
* Matching responses with the specific email address that triggered the event\
\
\
# Managing Tags\
Source: https://resend.com/docs/dashboard/emails/tags\
\
Add unique identifiers to emails sent.\
\
Tags are unique identifiers you can add to your emails. They help associate emails with your application. They are passed in key/value pairs. After the email is sent, the tag is included in the webhook event. Tags can include ASCII letters, numbers, underscores, or dashes.\
\
Some examples of when to use a tag:\
\
* Associate the email a "customer ID" from your application\
* Add a label from your database like "free" or "enterprise"\
* Note the category of email sent, like "welcome" or "password reset"\
\
Here's how you can add custom tags to your emails:\
\
<CodeGroup>\
  ```ts Node.js \{10-15\}\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend('re_xxxxxxxxx');\
\
  await resend.emails.send(\{\
    from: 'Acme <onboarding@resend.dev>',\
    to: ['delivered@resend.dev'],\
    subject: 'hello world',\
    html: '<p>it works!</p>',\
    tags: [\
      \{\
        name: 'category',\
        value: 'confirm_email',\
      \},\
    ],\
  \});\
  ```\
\
  ```php PHP \{8-13\}\
  $resend = Resend::client('re_xxxxxxxxx');\
\
  $resend->emails->send([\
    'from' => 'Acme <onboarding@resend.dev>',\
    'to' => ['delivered@resend.dev'],\
    'subject' => 'hello world',\
    'html' => '<p>it works!</p>',\
    'tags' => [\
      [\
        'name' => 'category',\
        'value' => 'confirm_email',\
      ],\
    ]\
  ]);\
  ```\
\
  ```python Python \{10-12\}\
  import resend\
\
  resend.api_key = "re_xxxxxxxxx"\
\
  params: resend.Emails.SendParams = \{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "hello world",\
    "html": "<p>it works!</p>",\
    "tags": [\
      \{"name": "category", "value": "confirm_email"\},\
    ],\
  \}\
\
  email = resend.Emails.send(params)\
  print(email)\
  ```\
\
  ```rb Ruby \{10-12\}\
  require "resend"\
\
  Resend.api_key = "re_xxxxxxxxx"\
\
  params = \{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "hello world",\
    "html": "<p>it works!</p>",\
    "tags": [\
      \{"name": "category", "value": "confirm_email"\}\
    ]\
  \}\
\
  sent = Resend::Emails.send(params)\
  puts sent\
  ```\
\
  ```go Go \{16\}\
  import (\
  	"fmt"\
\
  	"github.com/resend/resend-go/v2"\
  )\
\
  func main() \{\
    ctx := context.TODO()\
    client := resend.NewClient("re_xxxxxxxxx")\
\
    params := &resend.SendEmailRequest\{\
        From:        "Acme <onboarding@resend.dev>",\
        To:          []string\{"delivered@resend.dev"\},\
        Text:        "<p>it works!</p>",\
        Subject:     "hello world",\
        Tags:        []resend.Tag\{\{Name: "category", Value: "confirm_email"\}\},\
    \}\
\
    sent, err := client.Emails.SendWithContext(ctx, params)\
\
    if err != nil \{\
      panic(err)\
    \}\
    fmt.Println(sent.Id)\
  \}\
  ```\
\
  ```rust Rust \{14\}\
  use resend_rs::types::\{CreateEmailBaseOptions, Tag\};\
  use resend_rs::\{Resend, Result\};\
\
  #[tokio::main]\
  async fn main() -> Result<()> \{\
    let resend = Resend::new("re_xxxxxxxxx");\
\
    let from = "Acme <onboarding@resend.dev>";\
    let to = ["delivered@resend.dev"];\
    let subject = "hello world";\
\
    let email = CreateEmailBaseOptions::new(from, to, subject)\
      .with_html("<p>it works!</p>")\
      .with_tag(Tag::new("category", "confirm_email"));\
\
    let _email = resend.emails.send(email).await?;\
\
    Ok(())\
  \}\
  ```\
\
  ```java Java \{17\}\
  import com.resend.*;\
\
  public class Main \{\
      public static void main(String[] args) \{\
          Resend resend = new Resend("re_xxxxxxxxx");\
\
          Tag tag = Tag.builder()\
                  .name("category")\
                  .value("confirm_email")\
                  .build();\
\
          SendEmailRequest sendEmailRequest = SendEmailRequest.builder()\
                  .from("Acme <onboarding@resend.dev>")\
                  .to("delivered@resend.dev")\
                  .subject("hello world")\
                  .html("<p>it works!</p>")\
                  .tags(tag)\
                  .build();\
\
          SendEmailResponse data = resend.emails().send(sendEmailRequest);\
      \}\
  \}\
  ```\
\
  ```bash cURL \{9-14\}\
  curl -X POST 'https://api.resend.com/emails' \\\
       -H 'Authorization: Bearer re_xxxxxxxxx' \\\
       -H 'Content-Type: application/json' \\\
       -d $'\{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "hello world",\
    "html": "<p>it works!</p>",\
    "tags": [\
      \{\
        "name": "category",\
        "value": "confirm_email"\
      \}\
    ]\
  \}'\
  ```\
</CodeGroup>\
\
\
# Managing Billing\
Source: https://resend.com/docs/dashboard/settings/billing\
\
Manage your account subscription and billing information\
\
The [Billing](https://resend.com/settings/billing) page in the Settings section provides a clear view of your subscription details, billing email, payment method, and account invoices. From here, you can:\
\
* View and manage your subscription - Upgrade, downgrade, or modify your current plan.\
* Manage billing contacts - Ensure the right people receive billing-related notifications.\
* Update payment information - Add or change your credit card or billing details.\
* Access invoices - Download past invoices for your records.\
\
For any other billing inquiries, please [contact support](https://resend.com/help).\
\
## How to cancel your subscription\
\
1. Go to the [Billing](https://resend.com/settings/billing) page.\
2. Click on the three dots <span className="inline-block align-middle"><Icon icon="ellipsis" iconType="solid" /></span> next to your plan.\
3. Select **Cancel Subscription** from the dropdown menu.\
\
<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-billing.jpg?maxW=2314&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4887406378c4a82798dd441336d33598" alt="Cancel subscription" width="2314" height="724" data-path="images/dashboard-billing.jpg" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-billing.jpg?w=280&maxW=2314&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=695e531a93574ba0dc3c8b64b3b95470 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-billing.jpg?w=560&maxW=2314&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7c7fc33cb0aca5066817294cc89a91c3 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-billing.jpg?w=840&maxW=2314&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b5718d4656cab2cc39b32930647e025a 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-billing.jpg?w=1100&maxW=2314&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=9daa5f482b0ca1ffbfd58dd53b5fffa0 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-billing.jpg?w=1650&maxW=2314&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=58e6985db113ade2a6eff31efa6fd765 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-billing.jpg?w=2500&maxW=2314&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=684fe1cd94a982ca92fc5773bca577d3 2500w" data-optimize="true" data-opv="2" />\
\
\
# Managing Teams\
Source: https://resend.com/docs/dashboard/settings/team\
\
Manage your account across multiple teams\
\
Resend allows multiple teams to be managed under a single email address. Each team is distinct, with its own API keys, billing, and usage.\
\
## Inviting new members to a team\
\
1. Navigate to your [**Team Settings**](https://resend.com/settings/team).\
2. Click **Invite**. Input an email address and select a role (**Admin** or **Member**).\
   * **Members** have access to manage emails, domains and webhooks.\
   * **Admins** have all Member permissions plus the ability to invite users, update payments, and delete the team.\
3. The new member will receive an email invitation to join the team.\
\
## Add a team avatar\
\
1. Navigate to your [**Team Settings**](https://resend.com/settings/team).\
2. Click **Upload Image** next to the avatar placeholders.\
3. Upload an image file to use as the team avatar.\
\
<video autoPlay muted loop playsinline className="w-full aspect-video" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/team-avatars.mp4?auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=162e33818a5fedca0c8c89b3b00a0137" data-path="images/team-avatars.mp4" />\
\
## Switching between teams\
\
After accepting an invite from the account owner, users can switch between teams:\
\
1. Click on the **team name** in the top left corner of any Resend page.\
2. A dropdown menu will appear, listing all the teams you belong to.\
3. Select a team to switch between them.\
\
<img src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/teams-toggle.png?maxW=1366&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b622b2d058f6638d71a6d68ce8f3619f" alt="image" width="1366" height="852" data-path="images/teams-toggle.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/teams-toggle.png?w=280&maxW=1366&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=6ceae7a7c4a890b0002872b2b1291130 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/teams-toggle.png?w=560&maxW=1366&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=2c4103e06b7904ee54c576b6db829d33 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/teams-toggle.png?w=840&maxW=1366&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=3455835d0eed061dc3567b63e092037e 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/teams-toggle.png?w=1100&maxW=1366&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=83e69c07ffda7d09e2d947ebf2c27199 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/teams-toggle.png?w=1650&maxW=1366&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=363222c405709aae98531beda7bff2e9 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/teams-toggle.png?w=2500&maxW=1366&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=0a8e8af71760eaeb21864bba7f1f00f7 2500w" data-optimize="true" data-opv="2" />\
\
## Change the team member roles\
\
As an admin of your team, you can change the role of members in your team.\
\
1. Navigate to your [**Team Settings**](https://resend.com/settings/team).\
2. Find the user you want to change.\
3. Select the more options button <span className="inline-block align-middle"><Icon icon="ellipsis" iconType="solid" /></span> and choose **Change role**.\
\
<img alt="Change role popover visible for team member" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/how-can-i-change-team-roles-1.png?maxW=3360&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=956469a7a8307f47c942cc74c15123b9" width="3360" height="2100" data-path="images/how-can-i-change-team-roles-1.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/how-can-i-change-team-roles-1.png?w=280&maxW=3360&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c329052e43832a4e130f3b8820daa1d8 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/how-can-i-change-team-roles-1.png?w=560&maxW=3360&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d5853709daeb345305a9cb0da15b8653 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/how-can-i-change-team-roles-1.png?w=840&maxW=3360&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=6552b890a4a4c7e7f2633d5b8145dd50 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/how-can-i-change-team-roles-1.png?w=1100&maxW=3360&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=34eaa9a1ebd31d3276d51a91506634bd 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/how-can-i-change-team-roles-1.png?w=1650&maxW=3360&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=e8351e579021163672444fadaefaa9d2 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/how-can-i-change-team-roles-1.png?w=2500&maxW=3360&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=7b6e0b80347db80e0a71c0496b749201 2500w" data-optimize="true" data-opv="2" />\
\
Upon confirmation, your team member will be given the new role.\
\
## Leave your Resend team\
\
If your team has another admin, you can leave your team by following these steps:\
\
1. Navigate to your [**Team Settings**](https://resend.com/settings/team).\
2. Under members, click on <span className="inline-block align-middle"><Icon icon="ellipsis" iconType="solid" /></span> next to your name for more options.\
3. Select the **Leave Team** button.\
\
Upon confirmation, you will leave your team.\
\
\
# Custom Unsubscribe Page\
Source: https://resend.com/docs/dashboard/settings/unsubscribe-page\
\
Customize your unsubscribe page\
\
When sending to Resend Audiences, Resend can [automatically handle the unsubscribe flow for you](/dashboard/audiences/introduction#automatic-unsubscribes).\
\
You can customize your unsubscribe page to match your brand. Your unsubscribe page is used for every domain on your team.\
\
1. Navigate to your [**Unsubscribe Page**](https://resend.com/settings/unsubscribe-page).\
2. Click **Edit**.\
\
You can customize the following:\
\
* **Title**: The title of the unsubscribe page.\
* **Description**: The description of the unsubscribe page.\
* **Logo**: The logo of the unsubscribe page.\
* **Background Color**: The background color of the unsubscribe page.\
* **Text Color**: The text color of the unsubscribe page.\
* **Accent Color**: The accent color of the unsubscribe page.\
\
<video autoPlay muted loop playsinline className="w-full aspect-video" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/unsubscribe-page.mp4?auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=2e220ef4075e43d40bf25fae51f88cbd" data-path="images/unsubscribe-page.mp4" />\
\
<Note>\
  Pro plan users or higher can also remove the \'93Powered by Resend\'94 footer.\
</Note>\
\
\
# Event Types\
Source: https://resend.com/docs/dashboard/webhooks/event-types\
\
List of supported event types and their payload.\
\
### `email.sent`\
\
Occurs whenever the **API request was successful**. Resend will attempt to deliver the message to the recipient's mail server.\
\
<Accordion title="Sample Request Body">\
  <Snippet file="email-sent-webhook.mdx" />\
</Accordion>\
\
### `email.delivered`\
\
Occurs whenever Resend **successfully delivered the email** to the recipient's mail server.\
\
<Accordion title="Sample Request Body">\
  <Snippet file="email-delivered-webhook.mdx" />\
</Accordion>\
\
### `email.delivery_delayed`\
\
Occurs whenever the **email couldn't be delivered due to a temporary issue**.\
\
Delivery delays can occur, for example, when the recipient's inbox is full, or when the receiving email server experiences a transient issue.\
\
<Accordion title="Sample Request Body">\
  <Snippet file="email-delivery-delayed-webhook.mdx" />\
</Accordion>\
\
### `email.complained`\
\
Occurs whenever the email was successfully **delivered, but the recipient marked it as spam**.\
\
<Accordion title="Sample Request Body">\
  <Snippet file="email-complained-webhook.mdx" />\
</Accordion>\
\
### `email.bounced`\
\
Occurs whenever the recipient's mail server **permanently rejected the email**.\
\
<Accordion title="Sample Request Body">\
  <Snippet file="email-bounced-webhook.mdx" />\
</Accordion>\
\
### `email.opened`\
\
Occurs whenever the **recipient opened the email**.\
\
<Accordion title="Sample Request Body">\
  <Snippet file="email-opened-webhook.mdx" />\
</Accordion>\
\
### `email.clicked`\
\
Occurs whenever the **recipient clicks on an email link**.\
\
<Accordion title="Sample Request Body">\
  <Snippet file="email-clicked-webhook.mdx" />\
</Accordion>\
\
### `email.failed`\
\
Occurs whenever the **email failed to send due to an error**.\
\
This event is triggered when there are issues such as invalid recipients, API key problems, domain verification issues, quota limits, or other sending failures.\
\
<Accordion title="Sample Request Body">\
  <Snippet file="email-failed-webhook.mdx" />\
</Accordion>\
\
### `contact.created`\
\
Occurs whenever a **contact was successfully created**.\
\
*Note: When importing multiple contacts using CSV, these events won't be triggered. [Contact support](https://resend.com/contact) if you have any questions.*\
\
<Accordion title="Sample Request Body">\
  <Snippet file="contact-created-webhook.mdx" />\
</Accordion>\
\
### `contact.updated`\
\
Occurs whenever a **contact was successfully updated**.\
\
<Accordion title="Sample Request Body">\
  <Snippet file="contact-updated-webhook.mdx" />\
</Accordion>\
\
### `contact.deleted`\
\
Occurs whenever a **contact was successfully deleted**.\
\
<Accordion title="Sample Request Body">\
  <Snippet file="contact-deleted-webhook.mdx" />\
</Accordion>\
\
### `domain.created`\
\
Occurs when a **domain was successfully created**.\
\
<Accordion title="Sample Request Body">\
  <Snippet file="domain-created-webhook.mdx" />\
</Accordion>\
\
### `domain.updated`\
\
Occurs when a **domain was successfully updated**.\
\
<Accordion title="Sample Request Body">\
  <Snippet file="domain-updated-webhook.mdx" />\
</Accordion>\
\
### `domain.deleted`\
\
Occurs when a **domain was successfully deleted**.\
\
<Accordion title="Sample Request Body">\
  <Snippet file="domain-deleted-webhook.mdx" />\
</Accordion>\
\
\
# Managing Webhooks\
Source: https://resend.com/docs/dashboard/webhooks/introduction\
\
Use webhooks to notify your application about email events.\
\
## What is a webhook?\
\
Resend uses webhooks to push real-time notifications to you about your email sending. All webhooks use HTTPS and deliver a JSON payload that can be used by your application. You can use webhook feeds to do things like:\
\
* Automatically remove bounced email addresses from mailing lists\
* Create alerts in your messaging or incident tools based on event types\
* Store all send events in your own database for custom reporting/retention\
\
## Steps to receive webhooks\
\
You can start receiving real-time events in your app using the steps:\
\
1. Create a local endpoint to receive requests\
2. Register your development webhook endpoint\
3. Test that your webhook endpoint is working properly\
4. Deploy your webhook endpoint to production\
5. Register your production webhook endpoint\
\
## 1. Create a local endpoint to receive requests\
\
In your local application, create a new route that can accept POST requests.\
\
For example, you can add an API route on Next.js:\
\
```js pages/api/webhooks.ts\
import type \{ NextApiRequest, NextApiResponse \} from 'next';\
\
export default (req: NextApiRequest, res: NextApiResponse) => \{\
  if (req.method === 'POST') \{\
    const payload = req.body;\
    console.log(payload);\
    res.status(200);\
  \}\
\};\
```\
\
On receiving an event, you should respond with an `HTTP 200 OK` to signal to Resend that the event was successfully delivered.\
\
## 2. Register your development webhook endpoint\
\
Register your publicly accessible HTTPS URL in the Resend dashboard.\
\
<Tip>\
  You can create a tunnel to your localhost server using a tool like\
  [ngrok](https://ngrok.com/download). For example:\
  `https://8733-191-204-177-89.sa.ngrok.io/api/webhooks`\
</Tip>\
\
<img alt="Add Webhook" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhooks-add.png?maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=a82938b33d35fae70571785a5038b5eb" width="3024" height="1888" data-path="images/dashboard-webhooks-add.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhooks-add.png?w=280&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=e158131c1d5d7066d911c4fcd54e85a8 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhooks-add.png?w=560&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=f29c61b85821e1c9b0a02a3490950e4a 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhooks-add.png?w=840&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ffb4bb203c2d073e239c7042b9a3aefe 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhooks-add.png?w=1100&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=af5eec8f28421622e3fccb23580b5085 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhooks-add.png?w=1650&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=07d3e5d0a9722a9e81754f9a64f42a5f 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhooks-add.png?w=2500&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=5facb3da55a2633c62d61e04eaba3f65 2500w" data-optimize="true" data-opv="2" />\
\
## 3. Test that your webhook endpoint is working properly\
\
Send a few test emails to check that your webhook endpoint is receiving the events.\
\
<img alt="Webhook Events List" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhook-events-list.png?maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=508f3da98bee77f903ebb07d8a765ece" width="3024" height="1888" data-path="images/dashboard-webhook-events-list.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhook-events-list.png?w=280&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=f31945d20a049e6d0548d7a0bac512ba 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhook-events-list.png?w=560&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=30ac08041eed0e4cd307bcde9d79d9f7 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhook-events-list.png?w=840&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=4f23b18a0ec74c17985309948086ec87 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhook-events-list.png?w=1100&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=5b52cad0acf5d45ce7cc57357f0678c3 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhook-events-list.png?w=1650&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c60b0d509518c10cc07eed65f47f6e47 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhook-events-list.png?w=2500&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=7b052e458a1e1b3636e71cb2ed17f24f 2500w" data-optimize="true" data-opv="2" />\
\
## 4. Deploy your webhook endpoint\
\
After you're done testing, deploy your webhook endpoint to production.\
\
## 5. Register your production webhook endpoint\
\
Once your webhook endpoint is deployed to production, you can register it in the Resend dashboard.\
\
## FAQ\
\
<AccordionGroup>\
  <Accordion title="What is the retry schedule?">\
    If Resend does not receive a 200 response from a webhook server, we will retry the webhooks.\
\
    Each message is attempted based on the following schedule, where each period is started following the failure of the preceding attempt:\
\
    * 5 seconds\
    * 5 minutes\
    * 30 minutes\
    * 2 hours\
    * 5 hours\
    * 10 hours\
  </Accordion>\
\
  <Accordion title="What happens after all the retries fail?">\
    After the conclusion of the above attempts the message will be marked as failed, and you will get a webhook of type `message.attempt.exhausted` notifying you of this error.\
  </Accordion>\
\
  <Accordion title="What IPs do webhooks POST from?">\
    If your server requires an allowlist, our webhooks come from the following IP addresses:\
\
    * `44.228.126.217`\
    * `50.112.21.217`\
    * `52.24.126.164`\
    * `54.148.139.208`\
    * `2600:1f24:64:8000::/52`\
  </Accordion>\
</AccordionGroup>\
\
## Try it yourself\
\
<Card title="Webhook Code Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-examples/tree/main/with-webhooks">\
  See an example of how to receive webhooks events for Resend emails.\
</Card>\
\
\
# Verify Webhooks Requests\
Source: https://resend.com/docs/dashboard/webhooks/verify-webhooks-requests\
\
Learn how to use the signing secret to verify your webhooks.\
\
Webhook signing secrets are used to validate the payload data sent to your application from Resend. You can find the signing secret in the webhook detail page.\
\
<img alt="Signing Secret" src="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/webhooks-secret-1.png?maxW=1485&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=ba478c098b47b25a4866a6538ed8157b" width="1485" height="926" data-path="images/webhooks-secret-1.png" srcset="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/webhooks-secret-1.png?w=280&maxW=1485&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=eca46a205bd31d6f864163627006a5cb 280w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/webhooks-secret-1.png?w=560&maxW=1485&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=2826a1038b78cbac6e8b9706a4167868 560w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/webhooks-secret-1.png?w=840&maxW=1485&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=6c94c2c9cc0dd5b9cdfa3fe798d5cf6e 840w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/webhooks-secret-1.png?w=1100&maxW=1485&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=6bcdbff1403ef4ec80e25fc1511fe289 1100w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/webhooks-secret-1.png?w=1650&maxW=1485&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=9b4a341edb7bae8348dd5482e36e63af 1650w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/webhooks-secret-1.png?w=2500&maxW=1485&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=6ed13f7ad91c27110d9d253a64322e90 2500w" data-optimize="true" data-opv="2" />\
\
To verify the webhook request, you have to use the secret and deconstruct the Svix headers, and Base64-decode the Resend secret. The example below is for Javascript. [Learn more and view all supported languages here.](https://docs.svix.com/receiving/verifying-payloads/how)\
\
First, install the Svix libaries.\
\
<CodeGroup>\
  ```sh npm\
  npm install svix\
  ```\
\
  ```sh yarn\
  yarn add svix\
  ```\
</CodeGroup>\
\
Then, verify the webhooks using the code below. The payload is the raw (string) body of the request, and the headers are the headers passed in the request.\
\
<Tip>\
  Make sure that you're using the raw request body when verifying webhooks,\
  since the crypotgraphic signature is sensitive to even the slightest change.\
  Watch out for frameworks that parse the request as JSON and then stringify it,\
  since this too will break the signature verification.\
</Tip>\
\
```js\
import \{ Webhook \} from 'svix';\
\
const secret = process.env.WEBHOOK_SECRET;\
\
// These were all sent from the server\
const headers = \{\
  'svix-id': 'msg_p5jXN8AQM9LWM0D4loKWxJek',\
  'svix-timestamp': '1614265330',\
  'svix-signature': 'v1,g0hM9SsE+OTPJTGt/tmIKtSyZlE3uFJELVlNIOLJ1OE=',\
\};\
const payload = '\{"test": 2432232314\}';\
\
const wh = new Webhook(secret);\
// Throws on error, returns the verified content on success\
wh.verify(payload, headers);\
```\
\
If you prefer, you can also [manually verify the headers as well.](https://docs.svix.com/receiving/verifying-payloads/how-manual)\
\
## Why should I verify webhooks?\
\
Webhooks are vulnerable because attackers can send fake HTTP POST requests to endpoints, pretending to be legitimate services. This can lead to security risks or operational issues.\
\
To mitigate this, each webhook and its metadata are signed with a unique key specific to the endpoint. This signature helps verify the source of the webhook, allowing only authenticated webhooks to be processed.\
\
Another security concern is replay attacks, where intercepted valid payloads, complete with their signatures, are resent to endpoints. These payloads would pass the signature verification and be executed, posing a potential security threat.\
\
\
# Examples\
Source: https://resend.com/docs/examples\
\
Explore sample apps for different use cases.\
\
<CardGroup>\
  <Card title="Attachments" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-examples/tree/main/with-attachments">\
    Send emails with attachments\
  </Card>\
\
  <Card title="NextAuth" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-examples/tree/main/with-nextauth">\
    Send emails with NextAuth\
  </Card>\
\
  <Card title="React Email" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-examples/tree/main/with-react-email">\
    Send emails with React Email\
  </Card>\
\
  <Card title="Webhooks" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-examples/tree/main/with-webhooks">\
    A Slack app using Resend webhooks\
  </Card>\
\
  <Card title="Prevent thread on Gmail" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-examples/tree/main/with-prevent-thread-on-gmail">\
    Prevent threading on Gmail\
  </Card>\
\
  <Card title="Unsubscribe url header" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-examples/tree/main/with-unsubscribe-url-header">\
    Add a shortcut for users to unsubscribe\
  </Card>\
</CardGroup>\
\
\
# Integrations\
Source: https://resend.com/docs/integrations\
\
Integrate Resend with the tools you already use.\
\
## AI\
\
<CardGroup>\
  <Card\
    title="Lovable"\
    href="https://docs.lovable.dev/integrations/resend"\
    icon=\{\
    <svg\
      className="h-6 w-6"\
      viewBox="0 0 78 69"\
      fill="none"\
      xmlns="http://www.w3.org/2000/svg"\
    >\
      <path\
        d="M38.768 69C37.9927 69 37.2119 68.8597 36.4255 68.5791C35.6398 68.2993 34.9562 67.8684 34.3747 67.2869L28.7204 62.0831C21.096 55.0378 14.4033 48.2348 8.64237 41.6741C2.88079 35.1136 0 28.1383 0 20.7484C0 14.8451 1.98137 9.91108 5.94412 5.94627C9.90752 1.98209 14.8181 0 20.676 0C24.0146 0 27.2669 0.770147 30.4329 2.31044C33.599 3.85139 36.3774 6.24845 38.768 9.50161C41.3739 6.24845 44.1953 3.85139 47.232 2.31044C50.2688 0.770147 53.4785 0 56.8602 0C62.7179 0 67.6288 1.98209 71.5921 5.94627C75.555 9.91108 77.5361 14.8451 77.5361 20.7484C77.5361 28.1383 74.6611 35.119 68.9103 41.6906C63.1595 48.2624 56.4504 55.0708 48.783 62.1161L43.1614 67.2869C42.5799 67.8684 41.8964 68.2993 41.1106 68.5791C40.3244 68.8597 39.5435 69 38.768 69Z"\
        fill="currentColor"\
      />\
    </svg>\
  \}\
  >\
    Tell the Lovable AI to send emails\
  </Card>\
\
  <Card\
    title="Anything"\
    href="https://www.createanything.com/docs/integrations/resend"\
    icon=\{\
    <svg\
      className="h-6 w-6"\
      width="97"\
      height="100"\
      viewBox="0 0 97 100"\
      fill="none"\
      xmlns="http://www.w3.org/2000/svg"\
    >\
      <path\
        d="M84.2829 96.286C89.269 75.7132 93.7568 55.6139 93.9185 35.9376C94.0751 16.4376 89.7641 10.1999 86.5099 7.20085C85.8404 6.58277 85.1171 6.0387 84.3605 5.57696C81.7207 3.96559 78.5784 3.28239 74.752 3.48907C66.1585 3.95218 53.56 9.57643 38.3173 19.7567C22.4623 30.3451 9.05946 42.2082 5.33074 45.5938C5.22428 45.6911 5.05302 45.8388 4.84081 46.0254C4.19915 46.5866 3.64115 47.0877 3.18632 47.5108C3.05153 47.6337 3.04057 47.8407 3.16012 47.9948C3.1942 48.037 3.23208 48.0729 3.27877 48.1014C3.39396 48.1717 3.53522 48.1853 3.6595 48.1287C4.5571 47.7153 5.49911 47.222 6.41155 46.7492C7.44585 46.2097 8.50903 45.658 9.46801 45.235C17.3073 41.7862 27.6006 37.6006 37.6684 35.807C48.85 33.813 56.5565 34.586 62.6643 38.3142C67.8972 41.5084 71.49 45.0517 74.3123 49.8082C77.3625 54.9474 79.5651 61.6501 81.2392 70.9058C82.7572 79.2971 83.1466 87.8714 83.5238 96.1646C83.5291 96.296 83.6088 96.4172 83.7241 96.4875C83.7707 96.5161 83.8231 96.5352 83.8781 96.5432C84.0718 96.5759 84.2484 96.4615 84.2929 96.2836L84.2829 96.286Z"\
        fill="currentColor"\
      />\
      <path\
        d="M70.3756 85.1586C70.2252 76.2348 69.8684 55.336 58.319 48.2863C58.0762 48.1381 57.8234 47.9923 57.571 47.8597C52.0261 44.8895 44.5351 44.8206 35.2986 47.6601C27.9612 49.9154 21.6293 53.3656 18.9266 54.8394C18.4392 55.1058 18.0824 55.2983 17.8739 55.4018C17.71 55.4812 17.6417 55.6703 17.7104 55.8446C17.7442 55.9294 17.8069 56.0017 17.8815 56.0473C17.9562 56.093 18.0555 56.1193 18.1532 56.1063C18.264 56.0928 18.3791 56.0862 18.4993 56.0783C18.7083 56.0649 18.9205 56.0534 19.136 56.0012C36.5276 51.8627 45.3418 55.1962 51.0756 58.5638C51.1535 58.6113 51.2313 58.6588 51.3091 58.7062C60.6202 64.3898 67.0919 80.8639 69.2168 86.28C69.4137 86.7763 69.5671 87.1691 69.6771 87.437C69.7127 87.5186 69.7722 87.5891 69.8438 87.6328C69.9247 87.6822 70.0209 87.7067 70.1155 87.6918C70.2977 87.6663 70.4264 87.5184 70.4222 87.3363C70.4016 86.747 70.3885 86.0125 70.3736 85.1617L70.3756 85.1586Z"\
        fill="currentColor"\
      />\
    </svg>\
  \}\
  >\
    Add email to your Anything projects\
  </Card>\
\
  <Card\
    title="Wildcard"\
    href="https://github.com/wild-card-ai/agents-json/blob/master/examples/resend.ipynb"\
    icon=\{\
    <svg\
      className="h-6 w-6"\
      width="64"\
      height="64"\
      viewBox="0 0 64 64"\
      xmlns="http://www.w3.org/2000/svg"\
    >\
      <defs fill="currentColor" id="defs1" />\
      <path\
        d="m44,32l11.78,6.8-6,10.39-11.78-6.8v13.61h-12v-13.61l-11.78,6.8-6-10.39,11.78-6.8-11.78-6.8,6-10.39,11.78,6.8v-13.61h12v13.61l11.78-6.8,6,10.39-11.78,6.8Z"\
        fill="currentColor"\
      />\
    </svg>\
  \}\
  >\
    Send natural language emails using Wildcard\
  </Card>\
\
  <Card\
    title="mcp.run"\
    href="https://www.mcp.run/nilslice/resend"\
    icon=\{\
    <svg\
      className="h-6 w-6"\
      xmlns="http://www.w3.org/2000/svg"\
      viewBox="0 0 570 126"\
    >\
      <g>\
        <g>\
          <g>\
            <rect class="cls-2" x="0" y="0" width="18" height="18" />\
            <rect class="cls-2" y="18" width="18" height="18" />\
            <rect class="cls-2" x="0" y="36" width="18" height="18" />\
            <rect class="cls-2" x="0" y="54" width="18" height="18" />\
            <rect class="cls-2" y="72" width="18" height="18" />\
            <rect class="cls-2" x="36" y="0" width="18" height="18" />\
            <rect class="cls-2" x="36" y="18" width="18" height="18" />\
            <rect class="cls-2" x="36" y="36" width="18" height="18" />\
            <rect class="cls-2" x="36" y="54" width="18" height="18" />\
            <rect class="cls-2" x="36" y="72" width="18" height="18" />\
            <rect class="cls-2" x="72" y="0" width="18" height="18" />\
            <rect class="cls-2" x="72" y="18" width="18" height="18" />\
            <rect class="cls-2" x="72" y="36" width="18" height="18" />\
            <rect class="cls-2" x="72" y="54" width="18" height="18" />\
            <rect class="cls-2" x="72" y="72" width="18" height="18" />\
            <polygon class="cls-2" points="11.12 18 36 18 36 0 11.12 18" />\
            <polygon class="cls-2" points="47.12 18 72 18 72 0 47.12 18" />\
          </g>\
          <g>\
            <rect\
              class="cls-2"\
              x="126"\
              y="0"\
              width="18"\
              height="18"\
              transform="translate(126 144) rotate(-90)"\
            />\
            <rect\
              class="cls-2"\
              x="126"\
              y="72"\
              width="18"\
              height="18"\
              transform="translate(54 216) rotate(-90)"\
            />\
            <rect\
              class="cls-2"\
              x="144"\
              y="0"\
              width="18"\
              height="18"\
              transform="translate(144 162) rotate(-90)"\
            />\
            <rect\
              class="cls-2"\
              x="144"\
              y="72"\
              width="18"\
              height="18"\
              transform="translate(72 234) rotate(-90)"\
            />\
            <rect\
              class="cls-2"\
              x="162"\
              y="0"\
              width="18"\
              height="18"\
              transform="translate(162 180) rotate(-90)"\
            />\
            <rect\
              class="cls-2"\
              x="162"\
              y="72"\
              width="18"\
              height="18"\
              transform="translate(90 252) rotate(-90)"\
            />\
            <rect class="cls-2" x="99" y="18" width="18" height="18" />\
            <rect class="cls-2" x="99" y="36" width="18" height="18" />\
            <rect class="cls-2" x="99" y="54" width="18" height="18" />\
            <polygon class="cls-2" points="99 18 126 18 126 0 99 18" />\
            <polygon class="cls-2" points="99 72 126 72 126 90 99 72" />\
          </g>\
          <g>\
            <rect\
              class="cls-2"\
              x="189"\
              y="0"\
              width="18"\
              height="18"\
              transform="translate(189 207) rotate(-90)"\
            />\
            <rect\
              class="cls-2"\
              x="207"\
              y="0"\
              width="18"\
              height="18"\
              transform="translate(207 225) rotate(-90)"\
            />\
            <rect\
              class="cls-2"\
              x="225"\
              y="0"\
              width="18"\
              height="18"\
              transform="translate(225 243) rotate(-90)"\
            />\
            <rect\
              class="cls-2"\
              x="189"\
              y="72"\
              width="18"\
              height="18"\
              transform="translate(117 279) rotate(-90)"\
            />\
            <rect\
              class="cls-2"\
              x="207"\
              y="72"\
              width="18"\
              height="18"\
              transform="translate(135 297) rotate(-90)"\
            />\
            <rect\
              class="cls-2"\
              x="225"\
              y="72"\
              width="18"\
              height="18"\
              transform="translate(153 315) rotate(-90)"\
            />\
            <rect class="cls-2" x="189" y="18" width="18" height="18" />\
            <rect class="cls-2" x="189" y="36" width="18" height="18" />\
            <rect class="cls-2" x="189" y="54" width="18" height="18" />\
            <rect class="cls-2" x="189" y="90" width="18" height="18" />\
            <rect class="cls-2" x="189" y="108" width="18" height="18" />\
            <rect class="cls-2" x="252" y="18" width="18" height="18" />\
            <rect class="cls-2" x="252" y="36" width="18" height="18" />\
            <rect class="cls-2" x="252" y="54" width="18" height="18" />\
            <polygon class="cls-2" points="270 18 243 18 243 0 270 18" />\
            <polygon class="cls-2" points="270 72 243 72 243 90 270 72" />\
          </g>\
          <g>\
            <rect class="cls-2" x="552" y="18" width="18" height="18" />\
            <rect class="cls-2" x="552" y="36" width="18" height="18" />\
            <rect class="cls-2" x="489" y="18" width="18" height="18" />\
            <rect class="cls-2" x="489" y="36" width="18" height="18" />\
            <rect\
              class="cls-2"\
              x="552"\
              y="0"\
              width="18"\
              height="18"\
              transform="translate(570 -552) rotate(90)"\
            />\
            <rect\
              class="cls-2"\
              x="529.5"\
              y="-4.5"\
              width="18"\
              height="27"\
              transform="translate(547.5 -529.5) rotate(90)"\
            />\
            <rect\
              class="cls-2"\
              x="552"\
              y="54"\
              width="18"\
              height="18"\
              transform="translate(624 -498) rotate(90)"\
            />\
            <rect\
              class="cls-2"\
              x="507"\
              y="0"\
              width="18"\
              height="18"\
              transform="translate(525 -507) rotate(90)"\
            />\
            <rect\
              class="cls-2"\
              x="489"\
              y="54"\
              width="18"\
              height="18"\
              transform="translate(561 -435) rotate(90)"\
            />\
            <rect\
              class="cls-2"\
              x="552"\
              y="72"\
              width="18"\
              height="18"\
              transform="translate(642 -480) rotate(90)"\
            />\
            <rect\
              class="cls-2"\
              x="489"\
              y="72"\
              width="18"\
              height="18"\
              transform="translate(579 -417) rotate(90)"\
            />\
            <polygon class="cls-2" points="516 18 489 18 489 0 516 18" />\
          </g>\
          <g>\
            <polygon class="cls-2" points="399 72 426 72 426 90 399 72" />\
            <rect\
              class="cls-2"\
              x="399"\
              y="54"\
              width="18"\
              height="18"\
              transform="translate(816 126) rotate(180)"\
            />\
            <rect\
              class="cls-2"\
              x="399"\
              y="36"\
              width="18"\
              height="18"\
              transform="translate(816 90) rotate(180)"\
            />\
            <rect\
              class="cls-2"\
              x="462"\
              y="54"\
              width="18"\
              height="18"\
              transform="translate(942 126) rotate(180)"\
            />\
            <rect\
              class="cls-2"\
              x="462"\
              y="36"\
              width="18"\
              height="18"\
              transform="translate(942 90) rotate(180)"\
            />\
            <polygon\
              class="cls-2"\
              points="435 72 435 90 417 81 417 72 435 72"\
            />\
            <rect\
              class="cls-2"\
              x="430.5"\
              y="67.5"\
              width="18"\
              height="27"\
              transform="translate(358.5 520.5) rotate(-90)"\
            />\
            <rect\
              class="cls-2"\
              x="399"\
              y="18"\
              width="18"\
              height="18"\
              transform="translate(381 435) rotate(-90)"\
            />\
            <polygon\
              class="cls-2"\
              points="462 72 462 81 444 90 444 72 462 72"\
            />\
            <rect\
              class="cls-2"\
              x="462"\
              y="0"\
              width="18"\
              height="18"\
              transform="translate(462 480) rotate(-90)"\
            />\
            <rect\
              class="cls-2"\
              x="399"\
              width="18"\
              height="18"\
              transform="translate(399 417) rotate(-90)"\
            />\
            <rect\
              class="cls-2"\
              x="462"\
              y="18"\
              width="18"\
              height="18"\
              transform="translate(444 498) rotate(-90)"\
            />\
            <polygon class="cls-2" points="480 72 453 72 453 90 480 72" />\
          </g>\
          <g>\
            <rect\
              class="cls-2"\
              x="336"\
              y="0"\
              width="18"\
              height="18"\
              transform="translate(336 354) rotate(-90)"\
            />\
            <rect\
              class="cls-2"\
              x="354"\
              y="0"\
              width="18"\
              height="18"\
              transform="translate(354 372) rotate(-90)"\
            />\
            <rect\
              class="cls-2"\
              x="372"\
              y="0"\
              width="18"\
              height="18"\
              transform="translate(372 390) rotate(-90)"\
            />\
            <rect\
              class="cls-2"\
              x="318"\
              y="72"\
              width="18"\
              height="18"\
              transform="translate(246 408) rotate(-90)"\
            />\
            <rect class="cls-2" x="318" y="18" width="18" height="18" />\
            <rect class="cls-2" x="318" y="36" width="18" height="18" />\
            <rect class="cls-2" x="318" y="54" width="18" height="18" />\
            <polygon class="cls-2" points="345 18 318 18 318 0 345 18" />\
          </g>\
        </g>\
        <rect\
          class="cls-1"\
          x="280.88"\
          y="50.37"\
          width="25.26"\
          height="25.26"\
          transform="translate(-6.32 77.77) rotate(-14.93)"\
        />\
      </g>\
    </svg>\
  \}\
  >\
    Build email AI agents using mcp.run\
  </Card>\
\
  <Card\
    title="Rocket"\
    href="https://docs.rocket.new/integrations/resend"\
    icon=\{\
    <svg\
      width="121"\
      className="h-6 w-6"\
      height="127"\
      viewBox="0 0 121 127"\
      fill="none"\
      xmlns="http://www.w3.org/2000/svg"\
    >\
      <path\
        d="M108.729 108.725L93.6186 94.4048C82.9086 84.2448 75.4986 71.1048 72.3386 56.6948L62.5386 12.1348C62.3086 11.1348 61.4786 10.6348 60.6486 10.6348C59.8186 10.6348 58.9986 11.1348 58.7586 12.1348L48.9586 56.7048C45.7886 71.1148 38.3886 84.2548 27.6786 94.4148L12.5686 108.735C11.1586 110.245 10.3686 112.235 10.3686 114.305V116.115L48.6886 109.495C52.6386 108.815 56.6486 108.465 60.6386 108.465C64.6286 108.465 68.6386 108.815 72.5886 109.495L110.909 116.115V114.305C110.909 112.235 110.119 110.245 108.709 108.735L108.729 108.725Z"\
        fill="currentColor"\
      />\
    </svg>\
  \}\
  >\
    Send emails from apps built with Rocket\
  </Card>\
\
  <Card\
    title="Base44"\
    href="https://app--base44-resend-integration-20-b5e74b23.base44.app/"\
    icon=\{\
    <svg\
      width="159"\
      className="h-6 w-6"\
      height="159"\
      viewBox="0 0 159 159"\
      fill="none"\
      xmlns="http://www.w3.org/2000/svg"\
    >\
      <path\
        d="M122.471 133.996C110.721 143.22 95.9081 148.721 79.8113 148.721C63.7148 148.721 48.903 143.22 37.1531 133.996H122.471ZM140.073 113.498C137.592 117.896 134.644 121.995 131.296 125.729H28.327C24.9786 121.995 22.0304 117.896 19.5496 113.498H140.073ZM147.648 93C146.817 97.2278 145.6 101.317 144.036 105.23H15.5867C14.0225 101.317 12.806 97.2278 11.9744 93H147.648ZM79.8113 10.4414C117.996 10.4414 148.951 41.3963 148.951 79.5811C148.951 81.3138 148.887 83.0317 148.762 84.7324H10.8621C10.7369 83.0316 10.6717 81.3138 10.6717 79.5811C10.6717 41.3963 41.6266 10.4415 79.8113 10.4414Z"\
        fill="currentColor"\
      />\
    </svg>\
  \}\
  >\
    Add email to your Base44 apps\
  </Card>\
\
  <Card\
    title="Leap.new"\
    href="https://docs.leap.new/integrations/resend"\
    icon=\{\
    <svg\
      width="24"\
      height="24"\
      viewBox="0 0 24 24"\
      fill="none"\
      xmlns="http://www.w3.org/2000/svg"\
    >\
      <g clip-path="url(#clip0_1111_9)">\
        <path\
          d="M12.0515 12.0071V0.0585938H24V12.0071H12.0515ZM0.103027 23.9557V12.0071H12.0515V23.9557H0.103027Z"\
          fill="currentColor"\
        />\
      </g>\
      <defs>\
        <clipPath id="clip0_1111_9">\
          <rect width="24" height="24" fill="currentColor" />\
        </clipPath>\
      </defs>\
    </svg>\
  \}\
  >\
    Add email to your Leap apps\
  </Card>\
</CardGroup>\
\
## No-code\
\
<CardGroup>\
  <Card\
    title="Zapier"\
    href="https://zapier.com/apps/resend/integrations"\
    icon=\{\
    <svg className="h-6 w-6" width="68" height="68" viewBox="0 0 256 256">\
      <title>Zapier</title>\
      <g>\
        <path\
          d="M128.080089,-0.000183105 C135.311053,0.0131003068 142.422517,0.624138494 149.335663,1.77979593 L149.335663,1.77979593 L149.335663,76.2997796 L202.166953,23.6044907 C208.002065,27.7488446 213.460883,32.3582023 218.507811,37.3926715 C223.557281,42.4271407 228.192318,47.8867213 232.346817,53.7047992 L232.346817,53.7047992 L179.512985,106.400063 L254.227854,106.400063 C255.387249,113.29414 256,120.36111 256,127.587243 L256,127.587243 L256,127.759881 C256,134.986013 255.387249,142.066204 254.227854,148.960282 L254.227854,148.960282 L179.500273,148.960282 L232.346817,201.642324 C228.192318,207.460402 223.557281,212.919983 218.523066,217.954452 L218.523066,217.954452 L218.507811,217.954452 C213.460883,222.988921 208.002065,227.6115 202.182208,231.742607 L202.182208,231.742607 L149.335663,179.04709 L149.335663,253.5672 C142.435229,254.723036 135.323765,255.333244 128.092802,255.348499 L128.092802,255.348499 L127.907197,255.348499 C120.673691,255.333244 113.590195,254.723036 106.677048,253.5672 L106.677048,253.5672 L106.677048,179.04709 L53.8457596,231.742607 C42.1780766,223.466917 31.977435,213.278734 23.6658953,201.642324 L23.6658953,201.642324 L76.4997269,148.960282 L1.78485803,148.960282 C0.612750404,142.052729 0,134.946095 0,127.719963 L0,127.719963 L0,127.349037 C0.0121454869,125.473817 0.134939797,123.182933 0.311311815,120.812834 L0.36577283,120.099764 C0.887996182,113.428547 1.78485803,106.400063 1.78485803,106.400063 L1.78485803,106.400063 L76.4997269,106.400063 L23.6658953,53.7047992 C27.8076812,47.8867213 32.4300059,42.4403618 37.4769335,37.4193681 L37.4769335,37.4193681 L37.5023588,37.3926715 C42.5391163,32.3582023 48.0106469,27.7488446 53.8457596,23.6044907 L53.8457596,23.6044907 L106.677048,76.2997796 L106.677048,1.77979593 C113.590195,0.624138494 120.688946,0.0131003068 127.932622,-0.000183105 L127.932622,-0.000183105 L128.080089,-0.000183105 Z M128.067377,95.7600714 L127.945335,95.7600714 C118.436262,95.7600714 109.32891,97.5001809 100.910584,100.661566 C97.7553011,109.043534 96.0085811,118.129275 95.9958684,127.613685 L95.9958684,127.733184 C96.0085811,137.217594 97.7553011,146.303589 100.923296,154.685303 C109.32891,157.846943 118.436262,159.587052 127.945335,159.587052 L128.067377,159.587052 C137.576449,159.587052 146.683802,157.846943 155.089415,154.685303 C158.257411,146.290368 160.004131,137.217594 160.004131,127.733184 L160.004131,127.613685 C160.004131,118.129275 158.257411,109.043534 155.089415,100.661566 C146.683802,97.5001809 137.576449,95.7600714 128.067377,95.7600714 Z"\
          fill="currentColor"\
          fillRule="currentColor"\
        />\
      </g>\
    </svg>\
  \}\
  >\
    Automate emails using Zapier\
  </Card>\
\
  <Card\
    title="Pipedream"\
    href="https://pipedream.com/apps/resend"\
    icon=\{\
    <svg\
      className="h-6 w-6"\
      width="78"\
      height="78"\
      viewBox="0 0 78 78"\
      fill="none"\
      xmlns="http://www.w3.org/2000/svg"\
    >\
      <title>Pipedream</title>\
      <path\
        d="M47.7519 30.1241C48.0541 31.7495 48.2068 33.8016 48.2068 36.2869C48.2068 39.0588 48.0096 41.316 47.6119 43.0587C47.2142 44.8013 46.667 46.1661 45.9671 47.1433C45.2672 48.1237 44.4273 48.7914 43.4475 49.1497C42.3892 49.5211 41.2764 49.7029 40.1579 49.6872C38.4304 49.6872 36.9861 49.3289 35.8185 48.6123C34.6509 47.8957 33.741 47.013 33.0888 45.9609V27.3294C33.881 26.2317 34.8959 25.3685 36.1334 24.7497C37.4558 24.1088 38.9051 23.7899 40.3679 23.8181C41.5671 23.7939 42.7618 23.9756 43.9024 24.3555C44.9024 24.7112 45.7623 25.3903 46.3521 26.2903C46.982 27.2219 47.4497 28.4988 47.7519 30.1241Z"\
        fill="currentColor"\
      />\
      <path\
        fillRule="evenodd"\
        clipRule="evenodd"\
        d="M1.61933 8.11214C0 11.2903 0 15.4506 0 23.7714V54.2286C0 62.5493 0 66.7097 1.61933 69.8879C3.04374 72.6834 5.31659 74.9563 8.11214 76.3807C11.2903 78 15.4506 78 23.7714 78H54.2286C62.5493 78 66.7097 78 69.8879 76.3807C72.6834 74.9563 74.9563 72.6834 76.3807 69.8879C78 66.7097 78 62.5493 78 54.2286V23.7714C78 15.4506 78 11.2903 76.3807 8.11214C74.9563 5.31659 72.6834 3.04374 69.8879 1.61933C66.7097 0 62.5493 0 54.2286 0H23.7714C15.4506 0 11.2903 0 8.11214 1.61933C5.31659 3.04374 3.04374 5.31659 1.61933 8.11214ZM58.2855 46.3192C59.0776 43.5017 59.4753 40.1793 59.4753 36.3585C59.4753 32.2023 59.1254 28.6909 58.4255 25.8246C57.7256 22.9582 56.6884 20.652 55.3109 18.9094C53.9333 17.1635 52.2408 15.8997 50.2366 15.1115C48.2291 14.3232 45.9194 13.9291 43.3075 13.9291C41.1569 13.9128 39.0217 14.3014 37.0083 15.0756C35.0995 15.8082 33.3425 16.9021 31.829 18.3003L29.7293 14.5024L22.1003 15.004V69.1786H33.0888V61.2244L32.9489 55.4199L33.1588 55.3483C34.5109 56.7326 36.0189 57.6642 37.6732 58.143C39.4174 58.6327 41.2191 58.8738 43.0275 58.8596C45.4995 58.8596 47.7519 58.4068 49.7816 57.4981C51.8113 56.5893 53.5388 55.205 54.9609 53.3418C56.383 51.4787 57.4901 49.1367 58.2855 46.3192Z"\
        fill="currentColor"\
      />\
    </svg>\
  \}\
  >\
    Build workflows using Pipedream\
  </Card>\
\
  <Card\
    title="Activepieces"\
    href="https://www.activepieces.com/pieces/resend"\
    icon=\{\
    <svg\
      className="h-6 w-6"\
      width="56"\
      height="50"\
      viewBox="0 0 56 50"\
      fill="none"\
      xmlns="http://www.w3.org/2000/svg"\
    >\
      <title>Activepieces</title>\
      <path\
        d="M17.3113 15.3098C14.2791 10.8144 15.4653 4.7122 19.9607 1.68001C24.456 -1.35215 30.5583 -0.165992 33.5904 4.3294L54.0697 34.6911C57.1018 39.1864 55.9157 45.2887 51.4203 48.3209C46.9249 51.353 40.8227 50.1669 37.7905 45.6715L28.9117 32.5081C27.7703 31.0698 25.4468 31.2937 24.0517 32.6888C22.8948 33.8457 22.516 36.8053 22.1881 39.3679C22.14 39.7436 22.093 40.1108 22.0448 40.4625C21.8669 42.1398 21.2877 43.7992 20.2789 45.2948C16.9823 50.1823 10.346 51.4707 5.4586 48.1741C0.571158 44.8775 -0.720183 38.2418 2.57644 33.3544C4.28615 30.8197 6.89414 29.2529 9.69057 28.7918L9.68663 28.7878C17.7665 27.6159 19.2645 18.4973 17.7858 16.0133L17.3113 15.3098Z"\
        fill="currentColor"\
      />\
    </svg>\
  \}\
  >\
    Build workflows using Activepieces\
  </Card>\
\
  <Card\
    title="Monkedo"\
    href="https://monkedo.com/integrations/app/resend"\
    icon=\{\
<svg\
      className="h-6 w-6"\
      width="70"\
      height="70"\
      viewBox="0 0 300 300"\
      fill="none"\
      xmlns="http://www.w3.org/2000/svg"\
    >\
    <title>Monkedo</title>\
<path id="Selection"\
      fill="currentColor"\
      d="M 155.00,254.00\
         C 130.11,254.00 106.02,248.09 83.00,238.80\
           76.96,236.36 60.67,229.07 56.00,225.47\
           45.10,217.07 46.03,210.07 40.79,205.42\
           40.79,205.42 25.00,197.53 25.00,197.53\
           16.15,192.04 10.40,182.12 8.46,172.00\
           5.59,157.09 9.59,142.41 22.00,132.90\
           31.50,125.62 34.73,127.48 38.30,122.87\
           38.30,122.87 44.26,110.00 44.26,110.00\
           47.64,103.06 52.39,95.99 57.26,90.00\
           79.24,62.94 109.53,48.32 144.00,45.91\
           144.00,45.91 156.00,45.01 156.00,45.01\
           184.47,45.66 213.18,58.56 232.96,79.00\
           232.96,79.00 254.04,105.77 254.04,105.77\
           259.66,110.61 263.92,108.01 272.00,111.99\
           284.97,118.39 291.62,132.07 292.68,146.00\
           293.42,155.73 286.99,170.24 279.96,176.83\
           279.96,176.83 267.70,186.21 267.70,186.21\
           264.36,190.49 264.91,200.02 258.54,211.00\
           255.42,216.37 250.59,222.69 246.00,226.83\
           236.44,235.44 214.56,245.62 202.00,249.00\
           206.82,243.15 212.17,239.55 215.47,232.00\
           217.99,226.23 217.53,219.24 219.17,216.00\
           221.75,210.93 228.79,207.78 233.01,201.00\
           237.57,193.66 239.19,176.84 239.82,168.00\
           240.11,163.85 238.61,155.08 237.41,151.00\
           230.85,128.72 213.47,115.38 190.00,120.66\
           183.84,122.05 177.23,124.84 172.00,128.36\
           169.07,130.33 164.14,135.17 161.00,135.48\
           157.70,135.79 148.45,130.39 145.00,128.78\
           137.64,125.34 124.96,122.77 117.00,124.93\
           97.13,130.30 82.56,154.01 83.01,174.00\
           83.24,183.73 87.95,196.78 93.06,205.00\
           96.24,210.10 101.12,215.87 106.00,219.37\
           109.65,221.98 113.42,222.92 116.89,226.21\
           122.67,231.69 120.74,236.83 130.00,244.79\
           139.84,253.24 149.23,251.68 155.00,254.00 Z\
         M 259.00,161.00\
         C 256.67,161.61 254.41,162.04 253.02,164.27\
           251.15,167.28 252.14,172.90 256.11,173.58\
           260.96,174.41 267.84,168.49 270.61,165.00\
           279.10,154.30 278.11,134.86 265.99,127.14\
           258.29,122.24 243.87,123.88 245.98,132.00\
           248.00,139.80 252.88,136.77 258.00,138.74\
           263.60,140.89 269.57,149.89 268.43,156.00\
           267.64,160.19 260.70,171.33 259.00,161.00 Z\
         M 41.00,142.30\
         C 32.91,143.88 29.22,146.35 25.74,154.00\
           18.25,170.42 29.20,191.14 48.00,191.96\
           62.66,192.60 64.03,182.57 65.28,171.00\
           67.08,154.40 59.52,140.51 41.00,142.30 Z" />\
</svg>\
\}\
  >\
    Automate emails using Monkedo\
  </Card>\
\
  <Card\
    title="Make.com"\
    href="https://www.make.com/en/integrations/resend"\
    icon=\{\
    <svg className="h-6 w-6" width="46" height="46" viewBox="0 0 46 46" fill="none" xmlns="http://www.w3.org/2000/svg">\
      <title>Make.com</title>\
      <rect x="34" y="8" width="9" height="28" rx="0.75" fill="currentColor"/>\
      <rect x="24.8215" y="8" width="9" height="28" rx="0.75" transform="rotate(12 24.8215 8)" fill="currentColor"/>\
      <rect x="15.1452" y="8" width="9" height="28" rx="0.75" transform="rotate(28 15.1452 8)" fill="currentColor"/>\
    </svg>\
  \}\
  >\
    Build workflows using Make.com\
  </Card>\
\
  <Card\
    title="Lindy"\
    href="https://www.lindy.ai/integrations/resend"\
    icon=\{\
    <svg className="h-6 w-6" width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">\
      <title>Lindy</title>\
      <path d="M10.8029 1.11017L9.10941 2.81543C8.96353 2.96232 8.96353 3.20182 9.10941 3.35192L16.4382 10.7318C16.584 10.8787 16.584 11.1182 16.4382 11.2683L9.10941 18.6481C8.96353 18.795 8.96353 19.0345 9.10941 19.1846L10.8029 20.8899C10.9487 21.0367 11.1866 21.0367 11.3356 20.8899L20.8906 11.2683C21.0365 11.1214 21.0365 10.8819 20.8906 10.7318L11.3356 1.11017C11.1898 0.963276 10.9519 0.963276 10.8029 1.11017Z" fill="currentColor"/>\
      <path d="M5.78281 10.2325L9.88188 6.33183C10.0349 6.18619 10.0349 5.94874 9.88188 5.79993L8.10517 4.10923C7.95213 3.96359 7.70259 3.96359 7.54621 4.10923L1.11479 10.2325C0.961738 10.3781 0.961738 10.6156 1.11479 10.7644L7.54954 16.8907C7.70259 17.0364 7.95213 17.0364 8.1085 16.8907L9.88521 15.2001C10.0383 15.0544 10.0383 14.817 9.88521 14.6681L5.78281 10.7644C5.62976 10.6187 5.62976 10.3813 5.78281 10.2325Z" fill="currentColor"/>\
    </svg>\
  \}\
  >\
    Build workflows using Lindy\
  </Card>\
\
  <Card\
    title="BuildShip"\
    href="https://buildship.com/integrations/resend"\
    icon=\{\
    <svg className="h-6 w-6" width="106" height="149" viewBox="0 0 106 149" fill="none" xmlns="http://www.w3.org/2000/svg">\
      <path fillRule="evenodd" clipRule="evenodd" d="M31.9923 104.997C19.6877 104.938 15.5862 101.925 9.58646 95.9192C-2.90892 83.4342 -3.22369 63.4663 8.87108 51.3752C14.6037 45.6447 22.4156 42.4644 30.6282 42.4939H41.1301V29.9992H41.1492C41.6929 13.3396 55.8003 -0.00195312 73.1317 -0.00195312C90.7874 -0.00195312 105.133 13.891 105.133 31.0036C105.133 48.126 90.7874 62.462 73.1126 62.462L61.1322 62.4915V84.9998H72.1301C89.2516 84.9998 103.13 99.326 103.13 117C103.13 134.664 89.2421 149 72.1301 149C55.991 149 42.5513 136.259 41.0824 119.983L41.1301 104.997C41.1301 104.997 35.0446 105.086 31.9923 104.997ZM31.315 62.4915L31.3245 62.5407C28.2818 62.4915 25.3917 63.6533 23.2741 65.7703C18.8674 70.1715 18.9914 77.4282 23.5317 81.9771C25.6969 84.1432 28.5298 85.0589 31.5534 85.118L41.1301 84.9998V62.4915H31.315ZM61.1322 31.0036V42.4939L73.1412 42.4743C79.5702 42.4743 84.7686 37.2263 84.7686 31.0036C84.7686 24.7808 79.5511 19.7198 73.1317 19.7198C66.7028 19.7198 61.1322 24.771 61.1322 31.0036ZM72.2064 105.056L61.1322 104.997V119.57C62.2673 124.759 66.7599 128.638 72.1301 128.638C78.3587 128.638 83.4045 123.429 83.4045 117C83.4045 110.57 78.435 105.056 72.2064 105.056Z" fill="currentColor"/>\
  </svg>\
  \}\
  >\
    Build workflows using BuildShip\
  </Card>\
\
  <Card\
    title="viaSocket"\
    href="https://viasocket.com/integrations/resend"\
    icon=\{\
   <svg class="h-6 w-6" width="32" height="32" viewBox="128 128 300 300" fill="none" xmlns="http://www.w3.org/2000/svg"><path id="Selection"\
      fill="currentColor"\
      d="M 397.00,409.89\
         C 396.84,411.94 396.90,413.90 395.40,415.40\
           390.55,420.26 375.32,413.65 371.33,409.67\
           371.33,409.67 365.62,402.60 365.62,402.60\
           363.57,400.98 361.47,401.05 359.00,401.00\
           359.00,401.00 223.00,401.00 223.00,401.00\
           223.00,401.00 192.00,401.00 192.00,401.00\
           188.86,400.95 185.82,400.96 183.43,398.57\
           180.64,395.78 181.01,391.62 181.00,388.00\
           181.00,388.00 181.00,228.00 181.00,228.00\
           181.00,228.00 181.00,194.00 181.00,194.00\
           181.01,190.74 180.71,186.98 182.74,184.21\
           185.93,179.87 191.19,180.01 196.00,180.00\
           196.00,180.00 365.00,180.00 365.00,180.00\
           365.00,180.00 401.00,180.00 401.00,180.00\
           405.00,180.01 409.52,179.73 412.77,182.51\
           416.37,185.58 415.99,189.73 416.00,194.00\
           416.00,194.00 416.00,321.00 416.00,321.00\
           415.99,324.19 416.29,328.09 414.26,330.77\
           411.04,335.05 403.46,335.27 400.17,328.98\
           398.79,326.34 399.00,322.91 399.00,320.00\
           399.00,320.00 399.00,198.00 399.00,198.00\
           399.00,198.00 198.00,198.00 198.00,198.00\
           198.00,198.00 198.00,384.00 198.00,384.00\
           198.00,384.00 305.00,384.00 305.00,384.00\
           305.00,384.00 359.00,384.00 359.00,384.00\
           361.50,383.95 363.55,384.02 365.63,382.40\
           365.63,382.40 372.04,375.10 372.04,375.10\
           376.12,371.22 390.25,364.74 395.26,369.74\
           396.75,371.22 396.77,373.08 397.00,375.00\
           400.73,375.00 412.11,374.58 414.96,375.74\
           417.36,376.72 419.67,379.06 418.60,381.86\
           416.77,386.64 401.53,385.00 397.00,385.00\
           397.00,385.00 397.00,400.07 397.00,400.07\
           397.00,400.07 413.98,400.07 413.98,400.07\
           416.60,400.56 419.14,401.97 419.14,404.98\
           419.14,407.91 416.51,409.30 413.98,409.89\
           413.98,409.89 397.00,409.89 397.00,409.89 Z\
         M 257.00,236.56\
         C 278.40,236.00 275.68,266.44 257.00,264.15\
           242.05,262.32 238.93,240.39 257.00,236.56 Z\
         M 340.00,236.64\
         C 359.92,236.95 358.53,262.96 342.00,264.36\
           331.15,265.28 323.80,253.49 328.69,244.02\
           331.22,239.09 334.83,237.55 340.00,236.64 Z\
         M 270.04,311.74\
         C 276.05,310.26 295.44,313.01 304.00,313.00\
           304.00,313.00 329.00,311.43 329.00,311.43\
           337.08,313.66 338.57,325.00 329.00,328.86\
           324.67,330.60 318.61,330.71 314.00,331.17\
           302.01,332.37 285.79,331.96 274.00,329.54\
           263.08,327.29 262.18,316.32 270.04,311.74 Z\
         M 387.00,379.00\
         C 373.52,380.44 371.64,393.77 376.72,400.90\
           379.24,404.42 383.12,405.64 387.00,407.00\
           387.00,407.00 387.00,379.00 387.00,379.00 Z" />\
</svg>\
\
  \}\
  >\
    Build automations using viaSocket\
  </Card>\
</CardGroup>\
\
## Notifications\
\
<CardGroup>\
  <Card\
    title="Courier"\
    href="https://www.courier.com/docs/guides/providers/email/resend/"\
    icon=\{\
    <svg\
      className="h-6 w-6"\
      width="68"\
      height="68"\
      viewBox="0 0 68 68"\
      fill="none"\
      xmlns="http://www.w3.org/2000/svg"\
    >\
      <title>Courier</title>\
      <path\
        d="M63.5245 30.6744C63.6695 30.4568 63.7421 30.1668 63.7421 29.9492C61.1315 14.8658 47.9335 3.40823 32.125 3.40823C14.3585 3.40823 -0.0722441 17.9115 0.00027211 35.7505C0.145305 53.0819 14.7211 67.5851 31.9799 67.5851C46.7007 67.6576 59.101 57.7954 62.9444 44.3799C63.0894 43.9448 62.7993 43.4372 62.3642 43.2197L61.059 42.712C55.9103 40.8991 50.1815 41.5518 45.613 44.525C43.51 45.9028 41.9872 46.9905 41.9872 46.9905C39.3766 48.7309 36.1859 49.8186 32.8501 49.8186C23.7856 49.8186 17.4767 42.422 16.4615 33.43L15.7363 28.4989C15.5188 26.976 14.5035 25.7432 13.0532 25.1631L11.2403 24.4379C10.9502 24.2929 10.8052 23.9303 11.0228 23.6403C18.782 13.2705 28.2816 15.5185 28.2816 15.5185C29.9495 15.6635 31.3998 16.3161 32.5601 17.1138C34.2279 18.2741 35.5332 19.942 36.3309 21.8274C39.2316 28.4989 45.9031 33.2124 53.6623 33.2124C53.6623 33.2124 61.059 33.5025 63.5245 30.6744Z"\
        fill="currentColor"\
      />\
      <path\
        d="M19.7247 22.9151C20.766 22.9151 21.6101 22.071 21.6101 21.0297C21.6101 19.9884 20.766 19.1443 19.7247 19.1443C18.6834 19.1443 17.8393 19.9884 17.8393 21.0297C17.8393 22.071 18.6834 22.9151 19.7247 22.9151Z"\
        fill="currentColor"\
      />\
      <path\
        d="M20.0873 32.7048C20.5224 35.6054 22.8429 44.8875 33.1402 46.5554C33.2852 46.5554 33.3578 46.3379 33.2127 46.2653C30.8197 45.1776 24.5833 41.5518 20.3773 32.5598C20.3048 32.4872 20.0873 32.5598 20.0873 32.7048Z"\
        fill="currentColor"\
      />\
    </svg>\
  \}\
  >\
    Trigger messages using Courier\
  </Card>\
\
  <Card\
    title="Novu"\
    href="https://docs.novu.co/platform/integrations/email/resend"\
    icon=\{\
    <svg\
      viewBox="0 0 102 32"\
      fill="none"\
      xmlns="http://www.w3.org/2000/svg"\
      className="h-6"\
    >\
      <title>Novu</title>\
      <path\
        fillRule="evenodd"\
        clipRule="evenodd"\
        d="M24.64 12.826c0 .86-1.044 1.286-1.646.671L10.676.907A15.974 15.974 0 0 1 16 0c3.183 0 6.148.93 8.64 2.531v10.295Zm4.48-5.986v5.986c0 4.875-5.919 7.289-9.328 3.804L6.545 3.091C2.576 6.003 0 10.701 0 16c0 3.407 1.065 6.565 2.88 9.16v-5.954c0-4.875 5.919-7.289 9.328-3.804l13.229 13.52C29.416 26.012 32 21.308 32 16c0-3.407-1.065-6.565-2.88-9.16ZM9.006 18.535 21.301 31.1C19.642 31.683 17.858 32 16 32c-3.182 0-6.148-.93-8.64-2.531V19.206c0-.86 1.045-1.286 1.646-.671Z"\
        fill="currentColor"\
      ></path>\
      <path\
        fillRule="evenodd"\
        clipRule="evenodd"\
        d="M24.64 12.826c0 .86-1.044 1.286-1.646.671L10.676.907A15.974 15.974 0 0 1 16 0c3.183 0 6.148.93 8.64 2.531v10.295Zm4.48-5.986v5.986c0 4.875-5.919 7.289-9.328 3.804L6.545 3.091C2.576 6.003 0 10.701 0 16c0 3.407 1.065 6.565 2.88 9.16v-5.954c0-4.875 5.919-7.289 9.328-3.804l13.229 13.52C29.416 26.012 32 21.308 32 16c0-3.407-1.065-6.565-2.88-9.16ZM9.006 18.535 21.301 31.1C19.642 31.683 17.858 32 16 32c-3.182 0-6.148-.93-8.64-2.531V19.206c0-.86 1.045-1.286 1.646-.671Z"\
        fill="currentColor"\
      ></path>\
      <path\
        fillRule="evenodd"\
        clipRule="evenodd"\
        d="M24.64 12.826c0 .86-1.044 1.286-1.646.671L10.676.907A15.974 15.974 0 0 1 16 0c3.183 0 6.148.93 8.64 2.531v10.295Zm4.48-5.986v5.986c0 4.875-5.919 7.289-9.328 3.804L6.545 3.091C2.576 6.003 0 10.701 0 16c0 3.407 1.065 6.565 2.88 9.16v-5.954c0-4.875 5.919-7.289 9.328-3.804l13.229 13.52C29.416 26.012 32 21.308 32 16c0-3.407-1.065-6.565-2.88-9.16ZM9.006 18.535 21.301 31.1C19.642 31.683 17.858 32 16 32c-3.182 0-6.148-.93-8.64-2.531V19.206c0-.86 1.045-1.286 1.646-.671Z"\
        fill="currentColor"\
      ></path>\
    </svg>\
  \}\
  >\
    Send notifications using Novu\
  </Card>\
\
  <Card\
    title="Knock"\
    href="https://docs.knock.app/integrations/email/resend"\
    icon=\{\
    <svg\
      className="h-6 w-6"\
      width="14"\
      height="20"\
      viewBox="0 0 14 20"\
      fill="none"\
      xmlns="http://www.w3.org/2000/svg"\
    >\
      <title>Knock</title>\
      <path\
        d="M0 20V0.075058H4.19706V11.5013H4.31447L8.92243 5.90189H13.6184L8.51153 11.7003L14 20H9.33333L6.04612 14.5142L4.19706 16.5323V20H0Z"\
        fill="currentColor"\
      />\
      <path\
        d="M13.6748 2.45476C13.6748 3.81049 12.5399 4.90953 11.14 4.90953C9.74009 4.90953 8.60522 3.81049 8.60522 2.45476C8.60522 1.09904 9.74009 0 11.14 0C12.5399 0 13.6748 1.09904 13.6748 2.45476Z"\
        fill="currentColor"\
      />\
    </svg>\
  \}\
  >\
    Send notifications using Knock\
  </Card>\
\
  <Card\
    title="Engagespot"\
    href="https://docs.engagespot.co/docs/features/channels/email/resend/"\
    icon=\{\
    <svg className="h-6 w-6" fill="none" viewBox="0 0 38 35">\
      <title>Engagespot</title>\
      <g clipPath="url(#clip0_1_2)">\
        <mask\
          id="mask0_1_2"\
          style=\{\{ maskType: 'alpha' \}\}\
          maskUnits="userSpaceOnUse"\
          x="0"\
          y="0"\
          width="38"\
          height="35"\
        >\
          <path d="M38 0H0V35H38V0Z" fill="currentColor" />\
        </mask>\
        <g mask="url(#mask0_1_2)">\
          <mask\
            id="mask1_1_2"\
            style=\{\{ maskType: 'alpha' \}\}\
            maskUnits="userSpaceOnUse"\
            x="0"\
            y="0"\
            width="39"\
            height="35"\
          >\
            <path\
              d="M36.9851 6.29843L28.4354 0.606125C27.3381 -0.131766 25.9208 -0.131766 24.8235 0.606125L19.2456 4.29559L19.1541 4.24287H19.1084L13.5762 0.553417C12.4789 -0.184472 11.0616 -0.184472 9.96426 0.553417L1.4145 6.24571C0.68297 6.72008 0.271484 7.61608 0.271484 8.56481V19.3696C0.271484 21.2144 1.14018 22.901 2.51179 23.797L19.1541 34.8127L35.8423 23.797C37.2137 22.901 38.0826 21.1616 38.0826 19.3169V8.56481C38.1283 7.61608 37.7168 6.77278 36.9851 6.29843Z"\
              fill="currentColor"\
            />\
          </mask>\
          <g mask="url(#mask1_1_2)">\
            <path\
              d="M12.7274 34.8008L-1.21742 26.2624L-1.62891 7.9206L11.8587 -1.88281L25.8035 6.65565L26.215 24.9975L12.7274 34.8008Z"\
              fill="currentColor"\
            />\
            <path\
              d="M27.5262 35.5996L13.6271 27.114L13.1699 8.77214L26.7033 -1.03125L40.6481 7.50719L41.0596 25.7963L27.5262 35.5996Z"\
              fill="#B22977"\
            />\
            <path\
              d="M19.9286 40.9787L6.02947 32.493L5.57228 14.151L19.1056 4.34766L29.5877 11.8891V31.0365L19.9286 40.9787Z"\
              fill="currentColor"\
            />\
            <path\
              opacity="0.36"\
              d="M40.5925 21.2415L18.3265 37.2642L17.915 18.9751L41.0904 4.96094L40.5925 21.2415Z"\
              fill="currentColor"\
            />\
            <path\
              d="M-3.61505 22.8555L19.291 36.77L18.8795 18.4809L-4.07227 4.56641L-3.61505 22.8555Z"\
              fill="currentColor"\
            />\
          </g>\
          <mask\
            id="mask2_1_2"\
            style=\{\{ maskType: 'alpha' \}\}\
            maskUnits="userSpaceOnUse"\
            x="0"\
            y="0"\
            width="39"\
            height="35"\
          >\
            <path\
              d="M36.9851 6.29843L28.4354 0.606125C27.3381 -0.131766 25.9208 -0.131766 24.8235 0.606125L19.2456 4.29559L19.1541 4.24287H19.1084L13.5762 0.553417C12.4789 -0.184472 11.0616 -0.184472 9.96426 0.553417L1.4145 6.24571C0.68297 6.72008 0.271484 7.61608 0.271484 8.56481V19.3696C0.271484 21.2144 1.14018 22.901 2.51179 23.797L19.1541 34.8127L35.8423 23.797C37.2137 22.901 38.0826 21.1616 38.0826 19.3169V8.56481C38.1283 7.61608 37.7168 6.77278 36.9851 6.29843Z"\
              fill="currentColor"\
            />\
          </mask>\
          <g mask="url(#mask2_1_2)">\
            <path\
              d="M12.7274 34.8008L-1.21742 26.2624L-1.62891 7.9206L11.8587 -1.88281L25.8035 6.65565L26.215 24.9975L12.7274 34.8008Z"\
              fill="currentColor"\
            />\
            <path\
              d="M27.5262 35.5996L13.6271 27.114L13.1699 8.77214L26.7033 -1.03125L40.6481 7.50719L41.0596 25.7963L27.5262 35.5996Z"\
              fill="currentColor"\
            />\
            <path\
              d="M19.9286 40.9787L6.02947 32.493L5.57228 14.151L19.1056 4.34766L29.5877 11.8891V31.0365L19.9286 40.9787Z"\
              fill="currentColor"\
            />\
            <path\
              d="M40.5925 21.2415L18.3265 37.2642L17.915 18.9751L41.0904 4.96094L40.5925 21.2415Z"\
              fill="currentColor"\
            />\
            <path\
              d="M-3.61505 22.8555L19.291 36.77L18.8795 18.4809L-4.07227 4.56641L-3.61505 22.8555Z"\
              fill="currentColor"\
            />\
          </g>\
        </g>\
      </g>\
      <defs>\
        <clipPath id="clip0_1_2">\
          <rect width="38" height="35" fill="currentColor" />\
        </clipPath>\
      </defs>\
    </svg>\
  \}\
  >\
    Send notifications using Engagespot\
  </Card>\
\
  <Card\
    title="Dittofeed"\
    href="https://docs.dittofeed.com/integrations/channels/resend"\
    icon=\{\
    <svg className="h-6 w-6" viewBox="0 0 40 38" fill="none">\
      <title>Dittofeed</title>\
      <path\
        fillRule="evenodd"\
        clipRule="evenodd"\
        d="M25.5907 33.1617C27.229 27.0472 24.4917 21.0012 19.4767 19.6575C14.4617 18.3138 9.06812 22.1811 7.42981 28.2953C5.93843 33.8613 9.318 34.724 13.7192 35.8477C14.1529 35.9585 14.5965 36.0716 15.0463 36.1922C15.4961 36.3127 15.9369 36.4365 16.3678 36.5574C20.7411 37.785 24.0994 38.7274 25.5907 33.1617ZM21.5024 30.5195C22.3244 27.4521 20.9385 24.4156 18.4071 23.7373C15.8756 23.059 13.1571 24.9957 12.3352 28.0633C11.5627 30.946 13.3777 31.4228 15.7003 32.0329C15.8491 32.0718 15.9999 32.1114 16.1522 32.1522C16.3046 32.1931 16.455 32.2342 16.6034 32.2748C18.9198 32.9078 20.73 33.4025 21.5024 30.5195ZM13.8755 4.33377C12.2371 10.4481 14.9745 16.494 19.9895 17.8378C25.0046 19.1816 30.3982 15.3143 32.0365 9.19999C33.5278 3.63409 30.1482 2.77127 25.7471 1.64761C25.3133 1.53691 24.8699 1.42365 24.42 1.30314C23.9702 1.1826 23.5293 1.05888 23.0985 0.937938C18.7251 -0.289572 15.3669 -1.23214 13.8755 4.33377ZM17.9636 6.97574C17.1416 10.0433 18.5275 13.0798 21.059 13.7582C23.5905 14.4365 26.309 12.4996 27.1308 9.4321C27.9032 6.54919 26.0883 6.07253 23.7657 5.46254C23.617 5.42348 23.4662 5.38387 23.3137 5.34303C23.1614 5.30222 23.011 5.26111 22.8626 5.22057C20.5462 4.58752 18.7361 4.09283 17.9636 6.97574ZM2.51398 23.1191C6.37268 24.1531 10.5065 21.2378 11.7471 16.6078C12.9878 11.9777 10.8654 7.38613 7.00667 6.35219C3.49407 5.41099 2.68583 8.52804 1.63326 12.5874C1.52956 12.9874 1.42348 13.3965 1.31219 13.8118C1.20091 14.227 1.08823 14.6344 0.97806 15.0326C-0.140057 19.0744 -0.998623 22.1779 2.51398 23.1191ZM4.85546 18.5831C6.47756 19.0177 8.22079 17.7718 8.74908 15.8001C9.27738 13.8285 8.39069 11.8778 6.76859 11.4432C5.24412 11.0347 4.87063 12.4477 4.39264 14.2559C4.36203 14.3717 4.33099 14.4891 4.2992 14.6078C4.26742 14.7265 4.23559 14.8437 4.20419 14.9592C3.71403 16.7642 3.33099 18.1746 4.85546 18.5831ZM36.9296 14.3759C33.0707 13.3419 28.937 16.2572 27.6964 20.8872C26.4558 25.5174 28.5781 30.1088 32.4367 31.1428C35.9494 32.084 36.7576 28.967 37.8102 24.9078C37.9139 24.5078 38.02 24.0986 38.1313 23.6834C38.2425 23.268 38.3552 22.8607 38.4654 22.4624C39.5835 18.4206 40.4421 15.3171 36.9296 14.3759ZM34.5879 18.912C32.9659 18.4773 31.2226 19.7233 30.6945 21.6949C30.1661 23.6665 31.0528 25.6173 32.6748 26.0519C34.1993 26.4603 34.5728 25.0474 35.0508 23.2391C35.0814 23.1234 35.1124 23.0059 35.1443 22.8872C35.176 22.7685 35.2078 22.6515 35.2393 22.5358C35.7293 20.7309 36.1124 19.3204 34.5879 18.912Z"\
        fill="currentColor"\
      />\
    </svg>\
  \}\
  >\
    Send automated emails using Dittofeed\
  </Card>\
\
  <Card\
    title="Suprsend"\
    href="https://docs.suprsend.com/docs/resend"\
    icon=\{\
    <svg className="h-6 w-6"  width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">\
      <title>Suprsend</title>\
      <path d="M26.5777 4.65928L19.5223 8.79046L19.5364 0.585938L26.5777 4.65928Z" fill="currentColor"/>\
      <path d="M19.5222 8.79164L12.2794 12.6862L12.478 4.58008L19.5222 8.79164Z" fill="currentColor"/>\
      <path d="M12.3217 12.6661L5.19641 16.614L5.39497 8.50781L12.3217 12.6661Z" fill="currentColor"/>\
      <path d="M5.19037 16.6146L12.3024 20.8912L12.3149 12.6621L5.19037 16.6146Z" fill="currentColor"/>\
      <path d="M19.5233 8.79147L12.48 4.5799L19.538 0.587891L19.5233 8.79147Z" fill="currentColor"/>\
      <path d="M12.3187 12.668L5.39081 8.51372L12.4814 4.58008L12.3187 12.668Z" fill="currentColor"/>\
      <path d="M5.31079 27.7316L12.3206 23.5234L12.3962 31.7277L5.31079 27.7316Z" fill="currentColor"/>\
      <path d="M12.3195 23.5263L19.5191 19.5527L19.4092 27.6606L12.3195 23.5263Z" fill="currentColor"/>\
      <path d="M19.4817 19.5724L26.5634 15.5469L26.4535 23.6546L19.4817 19.5724Z" fill="currentColor"/>\
      <path d="M26.5614 15.5442L19.4031 11.3457L19.4805 19.5745L26.5614 15.5442Z" fill="currentColor"/>\
      <path d="M12.3188 23.5254L19.4077 27.6596L12.3939 31.7286L12.3188 23.5254Z" fill="currentColor"/>\
      <path d="M19.4808 19.5703L26.4537 23.6486L19.4067 27.6596L19.4808 19.5703Z" fill="currentColor"/>\
    </svg>\
  \}\
  >\
    Send notifications using Suprsend\
  </Card>\
</CardGroup>\
\
## Developer tools\
\
<CardGroup>\
  <Card\
    title="Convex"\
    href="https://www.convex.dev/components/resend"\
    icon=\{\
    <svg\
      className="h-6 w-6"\
      width="122"\
      height="125"\
      viewBox="0 0 122 125"\
      fill="none"\
      xmlns="http://www.w3.org/2000/svg"\
    >\
      <path\
        d="M75.9376 96.0309C92.8004 94.1524 108.699 85.1418 117.452 70.103C113.307 107.301 72.7453 130.811 39.6369 116.377C36.586 115.05 33.96 112.843 32.1579 110.006C24.7175 98.2901 22.2717 83.3825 25.7859 69.8535C35.8265 87.2306 56.2425 97.8824 75.9376 96.0309Z"\
        fill="currentColor"\
      />\
      <path\
        d="M25.1702 58.9393C18.3348 74.7791 18.0388 93.3254 26.4188 108.588C-3.0724 86.3385 -2.75057 38.7252 26.0584 16.6986C28.723 14.6627 31.8897 13.4543 35.2108 13.2705C48.8687 12.548 62.7455 17.8413 72.477 27.7054C52.7048 27.9023 33.4473 40.6035 25.1702 58.9393Z"\
        fill="currentColor"\
      />\
      <path\
        d="M82.013 32.5765C72.037 18.6276 56.4223 9.13129 39.3146 8.84235C72.3841 -6.20988 113.061 18.1941 117.49 54.2748C117.902 57.6241 117.361 61.0391 115.881 64.06C109.702 76.6428 98.2455 86.4018 84.8581 90.0135C94.6671 71.7697 93.4566 49.4806 82.013 32.5765Z"\
        fill="currentColor"\
      />\
    </svg>\
  \}\
  >\
    Send emails with Convex's Resend Component\
  </Card>\
\
  <Card\
    title="Inngest"\
    href="https://www.inngest.com/docs/guides/resend-webhook-events"\
    icon=\{\
    <svg className="h-6 w-6" fill="none" viewBox="0 0 270 270">\
      <title>Inngest</title>\
      <mask\
        id="mask0_680_113"\
        style=\{\{ maskType: 'alpha' \}\}\
        maskUnits="userSpaceOnUse"\
        x="21"\
        y="2"\
        width="228"\
        height="265"\
      >\
        <path\
          fillRule="evenodd"\
          clipRule="evenodd"\
          d="M145.841 5.0459L238.431 60.6531C244.777 64.506 248.73 71.3788 248.626 78.8764V189.987C248.626 197.484 244.777 204.357 238.327 208.21L145.737 263.817C141.783 266.421 133.669 269.44 123.89 263.817L31.2994 208.21C24.9533 204.357 21 197.484 21 189.987V78.8764C21 71.3788 24.8492 64.506 31.2994 60.6531L123.994 5.0459C130.756 0.9847 139.078 0.9847 145.841 5.0459ZM77.9258 134.5C67.446 134.5 58.9504 142.996 58.9504 153.475C58.9504 163.955 67.446 172.451 77.9258 172.451C82.9583 172.451 87.7848 170.452 91.3433 166.893C94.9019 163.334 96.9011 158.508 96.9011 153.475C96.9011 142.996 88.4055 134.5 77.9258 134.5ZM134.852 115.525C124.372 115.525 115.876 124.02 115.876 134.5C115.876 144.98 124.372 153.475 134.852 153.475C139.884 153.475 144.711 151.476 148.269 147.918C151.828 144.359 153.827 139.533 153.827 134.5C153.827 124.02 145.331 115.525 134.852 115.525ZM191.778 96.5494C181.298 96.5494 172.802 105.045 172.802 115.525C172.802 126.005 181.298 134.5 191.778 134.5C196.81 134.5 201.637 132.501 205.195 128.942C208.754 125.384 210.753 120.557 210.753 115.525C210.753 105.045 202.257 96.5494 191.778 96.5494Z"\
          fill="currentColor"\
        />\
      </mask>\
      <g mask="url(#mask0_680_113)">\
        <rect x="21" y="2" width="227.704" height="265" fill="currentColor" />\
      </g>\
    </svg>\
  \}\
  >\
    Send drip campaigns using Inngest\
  </Card>\
\
  <Card\
    title="Upstash"\
    href="https://upstash.com/docs/qstash/integrations/resend"\
    icon=\{\
    <svg\
      className="h-6 w-6"\
      width="354"\
      height="472"\
      viewBox="0 0 354 472"\
      fill="none"\
      xmlns="http://www.w3.org/2000/svg"\
    >\
      <title>Upstash</title>\
      <path\
        d="M0.421875 412.975C78.5269 491.079 205.16 491.079 283.265 412.975C361.369 334.87 361.369 208.237 283.265 130.132L247.909 165.487C306.488 224.066 306.488 319.041 247.909 377.619C189.331 436.198 94.3559 436.198 35.7769 377.619L0.421875 412.975Z"\
        fill="currentColor"\
      />\
      <path\
        d="M71.1328 342.264C110.185 381.316 173.501 381.316 212.554 342.264C251.606 303.212 251.606 239.895 212.554 200.843L177.199 236.198C196.725 255.724 196.725 287.382 177.199 306.909C157.672 326.435 126.014 326.435 106.488 306.909L71.1328 342.264Z"\
        fill="currentColor"\
      />\
      <path\
        d="M353.974 59.4209C275.869 -18.6836 149.236 -18.6836 71.1315 59.4209C-6.97352 137.526 -6.97352 264.159 71.1315 342.264L106.486 306.909C47.9085 248.33 47.9085 153.355 106.486 94.7769C165.065 36.1979 260.04 36.1979 318.618 94.7769L353.974 59.4209Z"\
        fill="currentColor"\
      />\
      <path\
        d="M283.264 130.132C244.212 91.08 180.894 91.08 141.842 130.132C102.789 169.185 102.789 232.501 141.842 271.553L177.197 236.198C157.671 216.672 157.671 185.014 177.197 165.487C196.723 145.961 228.381 145.961 247.908 165.487L283.264 130.132Z"\
        fill="currentColor"\
      />\
    </svg>\
  \}\
  >\
    Send emails using Upstash\
  </Card>\
\
  <Card\
    title="Trigger.dev"\
    href="https://trigger.dev/docs/guides/examples/resend-email-sequence"\
    icon=\{\
    <svg\
      className="h-6 w-6"\
      width="199"\
      height="174"\
      viewBox="0 0 199 174"\
      fill="none"\
      xmlns="http://www.w3.org/2000/svg"\
    >\
      <title>Trigger.dev</title>\
      <path\
        fillRule="evenodd"\
        clipRule="evenodd"\
        d="M59.3512 70.3883L99.5 0.849602L199 173.191H0L40.1488 103.65L68.5493 120.048L56.8032 140.394H142.197L99.5 66.4424L87.7539 86.7881L59.3512 70.3883Z"\
        fill="currentColor"\
      />\
    </svg>\
  \}\
  >\
    Send drip campaigns using Trigger.dev\
  </Card>\
\
  <Card\
    title="Infisical"\
    href="https://infisical.com/docs/self-hosting/configuration/envars#resend"\
    icon=\{\
    <svg\
      className="h-6 w-6"\
      width="91"\
      height="43"\
      viewBox="0 0 91 43"\
      fill="none"\
      xmlns="http://www.w3.org/2000/svg"\
    >\
      <title>Infisical</title>\
      <path\
        d="M21.9734 0C24.8526 0 27.4793 0.412021 29.8535 1.23606C32.2528 2.06011 34.4123 3.13386 36.3318 4.45732C38.2766 5.75581 39.9814 7.10424 41.4463 8.50261C42.2545 9.25174 42.987 9.98839 43.6436 10.7125C44.3003 11.4367 44.9317 12.1609 45.5379 12.885C46.0935 12.1609 46.6618 11.4617 47.2427 10.7875C47.8489 10.0883 48.6066 9.32665 49.5158 8.50261C51.7132 6.38008 54.4409 4.43235 57.699 2.65941C60.9824 0.886471 64.7835 0 69.1024 0C73.1435 0 76.8183 0.97387 80.127 2.92161C83.4609 4.84437 86.1002 7.42886 88.045 10.6751C90.015 13.9213 91 17.5171 91 21.4625C91 24.4591 90.4317 27.2683 89.2952 29.8902C88.1586 32.4872 86.5927 34.7721 84.5974 36.7448C82.6021 38.6925 80.2785 40.2282 77.6266 41.3519C74.9746 42.4506 72.1332 43 69.1024 43C66.2231 43 63.5712 42.6005 61.1465 41.8014C58.7472 40.9774 56.5751 39.9286 54.6303 38.6551C52.7108 37.3815 51.0186 36.0706 49.5537 34.7221C48.7202 33.8981 47.9752 33.124 47.3185 32.3998C46.6871 31.6507 46.0935 30.9141 45.5379 30.1899C44.9065 30.9141 44.2624 31.6507 43.6057 32.3998C42.9491 33.149 42.2166 33.9231 41.4084 34.7221C39.9688 36.0706 38.2766 37.3815 36.3318 38.6551C34.4123 39.9036 32.2528 40.9399 29.8535 41.7639C27.4793 42.588 24.8526 43 21.9734 43C17.8818 43 14.1817 42.0386 10.873 40.1159C7.56439 38.1931 4.92506 35.6086 2.95504 32.3624C0.985013 29.0912 0 25.4579 0 21.4625C0 18.491 0.555648 15.7192 1.66694 13.1472C2.8035 10.5502 4.36941 8.26539 6.3647 6.29269C8.38523 4.31998 10.7215 2.78427 13.3734 1.68554C16.0507 0.561848 18.9173 0 21.9734 0ZM10.4563 21.4625C10.4563 23.5351 10.974 25.4204 12.0096 27.1185C13.0451 28.8165 14.4342 30.1649 16.1769 31.1638C17.9197 32.1626 19.8518 32.662 21.9734 32.662C24.3475 32.662 26.5322 32.1376 28.5275 31.0889C30.5228 30.0401 32.3791 28.7166 34.0966 27.1185C35.1826 26.0947 36.1171 25.1083 36.9001 24.1594C37.683 23.2105 38.365 22.3116 38.9459 21.4625C38.3397 20.6635 37.6199 19.777 36.7864 18.8031C35.9782 17.8043 35.0816 16.8554 34.0966 15.9564C32.4802 14.3833 30.649 13.0598 28.6032 11.9861C26.5575 10.8873 24.3475 10.338 21.9734 10.338C19.8518 10.338 17.9197 10.8499 16.1769 11.8737C14.4342 12.8725 13.0451 14.221 12.0096 15.919C10.974 17.592 10.4563 19.4399 10.4563 21.4625ZM80.4679 21.4625C80.4679 19.4399 79.9502 17.592 78.9146 15.919C77.9044 14.221 76.5405 12.8725 74.8231 11.8737C73.1056 10.8499 71.1987 10.338 69.1024 10.338C67.486 10.338 65.9453 10.5877 64.4804 11.0871C63.0155 11.5865 61.639 12.2607 60.351 13.1098C59.0881 13.9588 57.9263 14.9077 56.8655 15.9564C55.729 17.0052 54.7313 18.079 53.8726 19.1777C53.0139 20.2515 52.3951 21.0131 52.0162 21.4625C52.6477 22.3365 53.3549 23.248 54.1378 24.1969C54.9208 25.1208 55.83 26.0947 56.8655 27.1185C58.5577 28.7166 60.4015 30.0401 62.3968 31.0889C64.4173 32.1376 66.6525 32.662 69.1024 32.662C71.1987 32.662 73.1056 32.1626 74.8231 31.1638C76.5405 30.1649 77.9044 28.8165 78.9146 27.1185C79.9502 25.4204 80.4679 23.5351 80.4679 21.4625Z"\
        fill="currentColor"\
      />\
    </svg>\
  \}\
  >\
    Send email when self-hosting Infisical\
  </Card>\
\
  <Card\
    title="Fastgen"\
    href="https://docs.fastgen.com/actions/integrations/resend"\
    icon=\{\
    <svg\
      className="h-6 w-6"\
      width="341"\
      height="639"\
      viewBox="0 0 341 639"\
      fill="none"\
      xmlns="http://www.w3.org/2000/svg"\
    >\
      <title>Fastgen</title>\
      <path\
        d="M124.055 281.936C85.4199 323.452 41.1491 402.46 167.61 525.124C169.054 525.852 169.226 525.647 167.799 522.085C162.896 509.841 148.76 473.417 147.658 441.383C146.236 400.028 165.156 370.923 174.248 360.761C198.862 333.247 276.425 258.605 309.11 226.217C341.795 193.829 342.822 131.017 339.915 95.628C337.589 67.3167 334.499 72.6184 331.23 75.8291C286.8 120.721 167.035 239.46 124.055 281.936Z"\
        fill="currentColor"\
      />\
      <path\
        d="M191.752 543.303C190.004 541.192 166.79 490.436 166.415 451.524C165.007 427.954 168.397 412.593 170.652 401.957C171.473 400.141 172.512 399.788 173.489 400.748C198.436 425.247 260.074 494.383 264.655 499.052C270.399 504.904 276.598 517.658 276.598 517.658C286.61 536.3 298.531 570.561 295.876 608.76C293.891 637.323 292.119 639.736 289.687 638.817C288.292 638.29 272.502 622.982 258.003 608.925C247.209 598.461 237.131 588.69 234.238 586.226C227.46 580.451 208.67 562.084 194.368 546.421C193.493 545.462 193.501 545.413 191.752 543.303Z"\
        fill="currentColor"\
      />\
      <path\
        d="M40.6974 208.722C2.06224 250.238 -43.3264 322.115 83.1343 444.78C84.5784 445.508 84.7501 445.302 83.3235 441.74C78.4202 429.497 65.4019 400.203 64.3002 368.169C62.8779 326.814 81.7983 297.709 90.8898 287.547C115.504 260.033 193.067 185.392 225.752 153.003C258.437 120.615 259.464 57.8032 256.557 22.4142C254.232 -5.89712 251.142 -0.59542 247.872 2.61528C203.442 47.507 83.6775 166.246 40.6974 208.722Z"\
        fill="currentColor"\
      />\
    </svg>\
  \}\
  >\
    Build workflows using Fastgen\
  </Card>\
\
  <Card\
    title="Medusa"\
    href="https://docs.medusajs.com/resources/integrations/guides/resend"\
    icon=\{\
    <svg\
      className="h-6 w-6"\
      width="488"\
      height="488"\
      viewBox="0 0 488 488"\
      fill="none"\
      xmlns="http://www.w3.org/2000/svg"\
    >\
      <title>Medusa</title>\
      <path\
        d="M394.468 97.5239L296.258 41.013C264.125 22.4774 224.751 22.4774 192.618 41.013L93.9554 97.5239C62.2748 116.06 42.3613 150.418 42.3613 187.037V300.511C42.3613 337.582 62.2748 371.489 93.9554 390.024L192.165 446.987C224.298 465.523 263.673 465.523 295.806 446.987L394.015 390.024C426.149 371.489 445.61 337.582 445.61 300.511V187.037C446.515 150.418 426.601 116.06 394.468 97.5239ZM244.212 344.816C188.544 344.816 143.287 299.607 143.287 244C143.287 188.393 188.544 143.185 244.212 143.185C299.879 143.185 345.589 188.393 345.589 244C345.589 299.607 300.332 344.816 244.212 344.816Z"\
        fill="currentColor"\
      />\
    </svg>\
  \}\
  >\
    Send e-commerce emails using Medusa\
  </Card>\
\
  <Card\
    title="OpenMeter"\
    href="https://openmeter.io/docs/reporting/email"\
    icon=\{\
    <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24">\
      <title>OpenMeter</title>\
      <path\
        d="M10.238 8.44 7.28 6.519l-4.909 9.565.06.04h3.863l3.944-7.684ZM15.786 8.44 12.83 6.519l-4.91 9.565.061.04h3.863l3.943-7.684ZM21.335 8.44l-2.957-1.921-4.91 9.565.06.04h3.864l3.943-7.684Z"\
        fill="currentColor"\
        clipRule="evenodd"\
      />\
    </svg>\
  \}\
  >\
    Send usage emails using OpenMeter\
  </Card>\
\
  <Card\
    title="Invopop"\
    href="https://docs.invopop.com/guides/features/email"\
    icon=\{\
    <svg className="h-6 w-6" fill="none" viewBox="0 0 40 41">\
      <title>Invopop</title>\
      <path\
        d="M38.7166 38.5342L37.8332 37.7778H10.2562C10.0628 37.7782 9.87562 37.7081 9.72878 37.5802L2.17692 31.1328H1.82092C1.65297 31.1324 1.48897 31.1845 1.35122 31.2821C1.21347 31.3797 1.10866 31.518 1.05103 31.6782C0.993406 31.8384 0.985766 32.0127 1.02915 32.1775C1.07253 32.3422 1.16484 32.4895 1.29351 32.5991L9.72878 39.8231C9.87668 39.9487 10.0634 40.0175 10.2562 40.0172H38.1859C38.3582 40.0228 38.5277 39.9731 38.6703 39.875C38.813 39.777 38.9216 39.6355 38.9804 39.4711C39.0393 39.3067 39.0454 39.1275 38.998 38.9592C38.9507 38.7911 38.8522 38.6422 38.7166 38.5342Z"\
        fill="currentColor"\
      />\
      <path\
        d="M38.7166 34.0882L37.8332 33.3316H10.2562C10.0628 33.3321 9.87562 33.2619 9.72878 33.1341L2.17692 26.6699H1.82092C1.65297 26.6696 1.48897 26.7216 1.35122 26.8192C1.21347 26.9168 1.10866 27.0551 1.05103 27.2154C0.993406 27.3755 0.985766 27.5499 1.02915 27.7146C1.07253 27.8794 1.16484 28.0266 1.29351 28.1362L9.72878 35.3569C9.87562 35.4848 10.0628 35.5549 10.2562 35.5545H38.1859C38.3542 35.5555 38.5186 35.5039 38.6569 35.4066C38.7952 35.3094 38.9004 35.1711 38.9586 35.0106C39.0166 34.8504 39.0244 34.6756 38.9812 34.5106C38.9379 34.3455 38.8454 34.1979 38.7166 34.0882Z"\
        fill="currentColor"\
      />\
      <path\
        d="M38.7164 16.3087L37.833 15.5522H10.256C10.0629 15.5538 9.8757 15.4849 9.72854 15.3581L2.17668 8.89387H1.82068C1.64876 8.88903 1.47971 8.93936 1.33758 9.03772C1.19546 9.13609 1.0875 9.27746 1.02908 9.44175C0.970657 9.60602 0.96474 9.78482 1.01217 9.95272C1.0596 10.1206 1.15797 10.269 1.29327 10.3768L9.95598 17.7749L20.1087 26.4787C20.2574 26.6049 20.4454 26.6738 20.6394 26.6728H27.4529L28.3363 27.4294C28.4643 27.5395 28.5561 27.6869 28.5991 27.8517C28.6421 28.0164 28.6344 28.1907 28.5769 28.3508C28.5194 28.5109 28.415 28.6494 28.2777 28.7474C28.1403 28.8454 27.9767 28.8982 27.8089 28.8989H20.6394C20.4477 28.8945 20.2634 28.8222 20.1186 28.6947L12.537 22.2238H1.82068C1.65273 22.2234 1.48873 22.2755 1.35098 22.3731C1.21323 22.4707 1.10842 22.6089 1.05079 22.7692C0.993168 22.9294 0.985528 23.1038 1.02891 23.2685C1.0723 23.4332 1.1646 23.5805 1.29327 23.6901L9.72854 30.9108C9.87539 31.0387 10.0625 31.1087 10.256 31.1082H38.1857C38.3539 31.1084 38.5179 31.0559 38.6557 30.9582C38.7936 30.8604 38.8986 30.7221 38.9564 30.5618C39.0143 30.4015 39.0224 30.2269 38.9794 30.0618C38.9364 29.8968 38.8447 29.7491 38.7164 29.6387L27.4529 19.9978H20.6394C20.449 19.9949 20.2654 19.9265 20.1186 19.8035L17.7451 17.7749H38.1824C38.3509 17.7768 38.5159 17.7257 38.6546 17.6287C38.7934 17.5315 38.8993 17.3934 38.9577 17.2328C39.0163 17.0722 39.0244 16.8974 38.9811 16.7319C38.938 16.5665 38.8454 16.4187 38.7164 16.3087ZM20.1186 22.0264C20.2673 22.1527 20.4553 22.2215 20.6493 22.2205H27.4561L28.3363 22.9737C28.4637 23.0837 28.5549 23.2307 28.5974 23.3948C28.64 23.5589 28.6321 23.7324 28.5746 23.8918C28.5171 24.0512 28.4129 24.1889 28.276 24.2864C28.139 24.3838 27.976 24.4362 27.8089 24.4367H20.6394C20.4496 24.4371 20.2656 24.3709 20.1186 24.2491L12.537 17.7749H15.1345L20.1186 22.0264Z"\
        fill="currentColor"\
      />\
      <path\
        d="M38.7165 11.8635L37.8331 11.107H10.2561C10.0633 11.1072 9.87657 11.0384 9.72869 10.9128L2.17681 4.44531H1.82081C1.65296 4.44594 1.48934 4.49884 1.352 4.59684C1.21466 4.69484 1.11021 4.83326 1.05273 4.99341C0.995257 5.15357 0.987512 5.32777 1.03054 5.49254C1.07358 5.65731 1.16532 5.80471 1.2934 5.91488L9.72869 13.1356C9.87585 13.2625 10.063 13.3314 10.2561 13.3297H38.1858C38.354 13.3308 38.5185 13.2792 38.6568 13.1819C38.7951 13.0846 38.9004 12.9463 38.9584 12.786C39.0165 12.6256 39.0244 12.451 38.9811 12.2859C38.9378 12.1208 38.8454 11.9733 38.7165 11.8635Z"\
        fill="currentColor"\
      />\
      <path\
        d="M1.29387 1.46623L9.72916 8.70366C9.87704 8.82927 10.0638 8.89801 10.2566 8.89781H38.1863C38.3545 8.89893 38.519 8.84731 38.6573 8.75C38.7955 8.65269 38.9009 8.51443 38.9589 8.35407C39.0169 8.19371 39.0249 8.01907 38.9816 7.85399C38.9383 7.68889 38.8459 7.54139 38.717 7.43159L30.2817 0.194161C30.1332 0.069775 29.9469 0.00120419 29.7543 2.55058e-06H1.82128C1.65334 -0.000420119 1.48934 0.0516987 1.35159 0.149271C1.21384 0.246844 1.10902 0.385136 1.0514 0.545339C0.993773 0.705541 0.986132 0.879881 1.02952 1.04465C1.0729 1.20942 1.1652 1.35662 1.29387 1.46623Z"\
        fill="currentColor"\
      />\
      <path\
        d="M38.7166 38.5342L37.8332 37.7778H10.2562C10.0628 37.7782 9.87562 37.7081 9.72878 37.5802L2.17692 31.1328H1.82092C1.65297 31.1324 1.48897 31.1845 1.35122 31.2821C1.21347 31.3797 1.10866 31.518 1.05103 31.6782C0.993406 31.8384 0.985766 32.0127 1.02915 32.1775C1.07253 32.3422 1.16484 32.4895 1.29351 32.5991L9.72878 39.8231C9.87668 39.9487 10.0634 40.0175 10.2562 40.0172H38.1859C38.3582 40.0228 38.5277 39.9731 38.6703 39.875C38.813 39.777 38.9216 39.6355 38.9804 39.4711C39.0393 39.3067 39.0454 39.1275 38.998 38.9592C38.9507 38.7911 38.8522 38.6422 38.7166 38.5342Z"\
        fill="currentColor"\
      />\
      <path\
        d="M38.7166 34.0882L37.8332 33.3316H10.2562C10.0628 33.3321 9.87562 33.2619 9.72878 33.1341L2.17692 26.6699H1.82092C1.65297 26.6696 1.48897 26.7216 1.35122 26.8192C1.21347 26.9168 1.10866 27.0551 1.05103 27.2154C0.993406 27.3755 0.985766 27.5499 1.02915 27.7146C1.07253 27.8794 1.16484 28.0266 1.29351 28.1362L9.72878 35.3569C9.87562 35.4848 10.0628 35.5549 10.2562 35.5545H38.1859C38.3542 35.5555 38.5186 35.5039 38.6569 35.4066C38.7952 35.3094 38.9004 35.1711 38.9586 35.0106C39.0166 34.8504 39.0244 34.6756 38.9812 34.5106C38.9379 34.3455 38.8454 34.1979 38.7166 34.0882Z"\
        fill="currentColor"\
      />\
      <path\
        d="M38.7164 16.3087L37.833 15.5522H10.256C10.0629 15.5538 9.8757 15.4849 9.72854 15.3581L2.17668 8.89387H1.82068C1.64876 8.88903 1.47971 8.93936 1.33758 9.03772C1.19546 9.13609 1.0875 9.27746 1.02908 9.44175C0.970657 9.60602 0.96474 9.78482 1.01217 9.95272C1.0596 10.1206 1.15797 10.269 1.29327 10.3768L9.95598 17.7749L20.1087 26.4787C20.2574 26.6049 20.4454 26.6738 20.6394 26.6728H27.4529L28.3363 27.4294C28.4643 27.5395 28.5561 27.6869 28.5991 27.8517C28.6421 28.0164 28.6344 28.1907 28.5769 28.3508C28.5194 28.5109 28.415 28.6494 28.2777 28.7474C28.1403 28.8454 27.9767 28.8982 27.8089 28.8989H20.6394C20.4477 28.8945 20.2634 28.8222 20.1186 28.6947L12.537 22.2238H1.82068C1.65273 22.2234 1.48873 22.2755 1.35098 22.3731C1.21323 22.4707 1.10842 22.6089 1.05079 22.7692C0.993168 22.9294 0.985528 23.1038 1.02891 23.2685C1.0723 23.4332 1.1646 23.5805 1.29327 23.6901L9.72854 30.9108C9.87539 31.0387 10.0625 31.1087 10.256 31.1082H38.1857C38.3539 31.1084 38.5179 31.0559 38.6557 30.9582C38.7936 30.8604 38.8986 30.7221 38.9564 30.5618C39.0143 30.4015 39.0224 30.2269 38.9794 30.0618C38.9364 29.8968 38.8447 29.7491 38.7164 29.6387L27.4529 19.9978H20.6394C20.449 19.9949 20.2654 19.9265 20.1186 19.8035L17.7451 17.7749H38.1824C38.3509 17.7768 38.5159 17.7257 38.6546 17.6287C38.7934 17.5315 38.8993 17.3934 38.9577 17.2328C39.0163 17.0722 39.0244 16.8974 38.9811 16.7319C38.938 16.5665 38.8454 16.4187 38.7164 16.3087ZM20.1186 22.0264C20.2673 22.1527 20.4553 22.2215 20.6493 22.2205H27.4561L28.3363 22.9737C28.4637 23.0837 28.5549 23.2307 28.5974 23.3948C28.64 23.5589 28.6321 23.7324 28.5746 23.8918C28.5171 24.0512 28.4129 24.1889 28.276 24.2864C28.139 24.3838 27.976 24.4362 27.8089 24.4367H20.6394C20.4496 24.4371 20.2656 24.3709 20.1186 24.2491L12.537 17.7749H15.1345L20.1186 22.0264Z"\
        fill="currentColor"\
      />\
      <path\
        d="M38.7165 11.8635L37.8331 11.107H10.2561C10.0633 11.1072 9.87657 11.0384 9.72869 10.9128L2.17681 4.44531H1.82081C1.65296 4.44594 1.48934 4.49884 1.352 4.59684C1.21466 4.69484 1.11021 4.83326 1.05273 4.99341C0.995257 5.15357 0.987512 5.32777 1.03054 5.49254C1.07358 5.65731 1.16532 5.80471 1.2934 5.91488L9.72869 13.1356C9.87585 13.2625 10.063 13.3314 10.2561 13.3297H38.1858C38.354 13.3308 38.5185 13.2792 38.6568 13.1819C38.7951 13.0846 38.9004 12.9463 38.9584 12.786C39.0165 12.6256 39.0244 12.451 38.9811 12.2859C38.9378 12.1208 38.8454 11.9733 38.7165 11.8635Z"\
        fill="currentColor"\
      />\
      <path\
        d="M1.29387 1.46623L9.72916 8.70366C9.87704 8.82927 10.0638 8.89801 10.2566 8.89781H38.1863C38.3545 8.89893 38.519 8.84731 38.6573 8.75C38.7955 8.65269 38.9009 8.51443 38.9589 8.35407C39.0169 8.19371 39.0249 8.01907 38.9816 7.85399C38.9383 7.68889 38.8459 7.54139 38.717 7.43159L30.2817 0.194161C30.1332 0.069775 29.9469 0.00120419 29.7543 2.55058e-06H1.82128C1.65334 -0.000420119 1.48934 0.0516987 1.35159 0.149271C1.21384 0.246844 1.10902 0.385136 1.0514 0.545339C0.993773 0.705541 0.986132 0.879881 1.02952 1.04465C1.0729 1.20942 1.1652 1.35662 1.29387 1.46623Z"\
        fill="currentColor"\
      />\
    </svg>\
  \}\
  >\
    Send invoice emails using Invopop\
  </Card>\
\
  <Card\
    title="Payload CMS"\
    href="https://payloadcms.com/docs/email/overview#resend-configuration"\
    icon=\{\
    <svg className="h-6 w-6" viewBox="0 0 40 40" fill="none">\
      <title>Payload CMS</title>\
      <path\
        d="M18.4469 0L36.8 11.0415V31.9965L22.9773 40V19.0451L4.61523 8.01243L18.4469 0Z"\
        fill="currentColor"\
      />\
      <path\
        d="M17.0495 38.8363V22.4829L3.20001 30.5042L17.0495 38.8363Z"\
        fill="currentColor"\
      />\
    </svg>\
  \}\
  >\
    Send emails using Payload CMS\
  </Card>\
\
  <Card\
    title="Tinybird"\
    href="https://www.tinybird.co/docs/get-data-in/guides/ingest-from-resend"\
    icon=\{\
    <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24">\
      <path\
        d="M9.971 18.125 0 14.556l13.967-4.88L16.507 4 24 6.055l-4.407 1.669-2.735 12.754.097.039L5.946 28l4.025-9.875Z"\
        fill="currentColor"\
        transform="translate(0 -4)"\
      />\
    </svg>\
  \}\
  >\
    Analyze your email data in real time\
  </Card>\
\
  <Card\
    title="Coolify"\
    href="https://coolify.io/docs/knowledge-base/notifications#resend-configuration"\
    icon=\{\
    <svg\
      className="h-6 w-6"\
      width="66"\
      height="66"\
      viewBox="0 0 66 66"\
      fill="none"\
      xmlns="http://www.w3.org/2000/svg"\
    >\
      <title>Coolify</title>\
      <path\
        d="M18.8298 18.8316H7.28729V53.4593H18.8298V18.8316ZM18.8298 65.0018H65V53.4593H18.8298V65.0018ZM18.8298 18.8316H65V7.28906H18.8298V18.8316Z"\
        fill="currentColor"\
        fill-opacity="0.51"\
      />\
      <path\
        d="M15.1862 15.1871H3.64368V49.8147H15.1862V15.1871ZM15.1862 61.3573H61.3564V49.8147H15.1862V61.3573ZM15.1862 15.1871H61.3564V3.64453H15.1862V15.1871Z"\
        fill="#CCCCCC"\
      />\
      <path\
        d="M11.5426 11.5426H0V46.1702H11.5426V11.5426ZM11.5426 57.7128H57.7128V46.1702H11.5426V57.7128ZM11.5426 11.5426H57.7128V0H11.5426V11.5426Z"\
        fill="currentColor"\
      />\
    </svg>\
  \}\
  >\
    Send email notifications using Coolify\
  </Card>\
\
  <Card\
    title="Courrier"\
    href="https://railsdesigner.com/courrier/"\
    icon=\{\
    <svg\
      xmlns="http://www.w3.org/2000/svg"\
      width="256"\
      height="256"\
      viewBox="0 0 256 256"\
      className="h-6 w-6"\
      fill="none"\
    >\
      <path\
        fill="currentColor"\
        d="M128 3c69.036 0 125 55.964 125 125s-55.964 125-125 125S3 197.036 3 128 58.964 3 128 3m.49 51q-16.204 0-29.679 5.485-13.379 5.485-23.271 15.51-9.799 10.024-15.17 23.736Q55 112.444 55 128.898q0 21.752 9.233 38.206t25.627 25.723Q106.255 202 127.831 202q12.343 0 22.989-3.404 10.741-3.406 21.67-10.876l7.537 12.294H187v-51.918h-8.386q-1.224 6.903-3.674 12.861-2.356 5.863-5.653 10.497-6.218 9.173-15.546 14.186-9.233 5.011-20.728 5.011-20.823 0-31.846-16.265-10.93-16.36-10.93-47.379 0-30.83 10.93-46.339 11.024-15.604 32.6-15.604 11.682 0 20.633 4.824 8.951 4.727 15.453 14.846 2.355 3.5 4.334 7.755 2.072 4.255 3.957 9.268H187v-45.77h-5.653l-8.103 9.55h-.754q-9.139-5.58-20.727-8.51Q140.173 54 128.49 54"\
      ></path>\
    </svg>\
  \}\
  >\
    API-powered email delivery for Ruby apps\
  </Card>\
\
  <Card\
    title="Kinde"\
    href="https://docs.kinde.com/integrate/third-party-tools/kinde-resend-custom-smtp/"\
    icon=\{\
    <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24">\
      <path\
        d="M 12.93 24 L 3.77 12.29 L 3.77 24 L 0 24 L 0 0 L 3.77 0 L 3.77 11.37 L 12.58 0 L 17.01 0 L 7.82 11.66 L 17.66 24 L 12.93 24 Z"\
        fill="currentColor"\
      />\
    </svg>\
  \}\
  >\
    Send auth and billing emails using Kinde\
  </Card>\
</CardGroup>\
\
## Build your own integration\
\
Here's how to build your own integration with Resend:\
\
1. Read the documentation on [how to send emails](/api-reference/emails/send-email).\
2. Integrate with your product offering.\
3. [Reach out to us](https://resend.com/contact) to feature your product on this page.\
\
\
# Introduction\
Source: https://resend.com/docs/introduction\
\
Resend is the email API for developers.\
\
## Quickstart\
\
Learn how to get Resend set up in your project.\
\
<CardGroup cols=\{2\}>\
  <Card\
    title="Node.js Quickstart"\
    icon=\{\
  <svg\
    className="h-6 w-6"\
    fill="currentcolor"\
    height="40"\
    viewBox="0 0 16 16"\
    width="40"\
    xmlns="http://www.w3.org/2000/svg"\
  >\
    <path d="M 8 1.0234375 C 7.736875 1.0234375 7.4742344 1.0924687 7.2402344 1.2304688 L 2.7402344 3.8789062 C 2.2832344 4.1469063 2 4.642875 2 5.171875 L 2 11.005859 C 2 11.554859 2.29925 12.059266 2.78125 12.322266 L 4.2558594 13.126953 C 4.4828594 13.250953 4.7286094 13.310547 4.9746094 13.310547 C 5.2386094 13.310547 5.4992812 13.239609 5.7382812 13.099609 C 6.1982812 12.826609 6.4726562 12.344594 6.4726562 11.808594 L 6.4726562 5.4648438 L 5.4726562 5.4648438 L 5.4726562 11.808594 C 5.4726562 12.065594 5.3025156 12.195281 5.2285156 12.238281 C 5.1555156 12.281281 4.959375 12.371047 4.734375 12.248047 L 3.2617188 11.445312 C 3.1007187 11.357312 3 11.188859 3 11.005859 L 3 5.171875 C 3 4.995875 3.0940938 4.8302344 3.2460938 4.7402344 L 7.7460938 2.0917969 C 7.9020937 1.9997969 8.0979062 2.0007969 8.2539062 2.0917969 L 12.753906 4.7402344 C 12.904906 4.8302344 13 4.995875 13 5.171875 L 13 11.009766 C 13 11.189766 12.900234 11.359219 12.740234 11.449219 L 8.2402344 13.900391 C 8.0902344 13.980391 7.9097656 13.980391 7.7597656 13.900391 L 6.8808594 13.419922 C 6.7108594 13.629922 6.5 13.810937 6.25 13.960938 C 6.17 14.010938 6.0897656 14.050078 6.0097656 14.080078 L 7.2792969 14.779297 C 7.5092969 14.899297 7.75 14.960938 8 14.960938 C 8.25 14.960938 8.4907031 14.899297 8.7207031 14.779297 L 13.220703 12.320312 C 13.700703 12.060313 14 11.559766 14 11.009766 L 14 5.171875 C 14 4.642875 13.717719 4.1469062 13.261719 3.8789062 L 8.7617188 1.2304688 C 8.5272187 1.0924688 8.263125 1.0234375 8 1.0234375 z M 9.4511719 5.3183594 C 7.8711719 5.3183594 7.0703125 5.8690781 7.0703125 6.9550781 C 7.0703125 8.1850781 8.4869687 8.3680781 9.1679688 8.4550781 C 9.2659688 8.4680781 9.352875 8.4791875 9.421875 8.4921875 L 9.7207031 8.5449219 C 10.760703 8.7189219 11 8.836875 11 9.171875 C 11 9.333875 10.999172 9.8242188 9.4511719 9.8242188 C 8.1381719 9.8242188 7.8691406 9.4346094 7.8691406 8.8496094 L 6.8691406 8.8496094 C 6.8691406 9.7516094 7.3171719 10.824219 9.4511719 10.824219 C 11.557172 10.824219 12 9.925875 12 9.171875 C 12 7.913875 10.777719 7.7076406 9.8867188 7.5566406 L 9.5996094 7.5078125 C 9.5166094 7.4928125 9.4119219 7.4788438 9.2949219 7.4648438 C 8.6589219 7.3828438 8.0703125 7.2650312 8.0703125 6.9570312 C 8.0703125 6.7340313 8.0691719 6.3193594 9.4511719 6.3183594 C 10.370172 6.3183594 10.837891 6.6207969 10.837891 7.2167969 L 11.837891 7.2167969 C 11.837891 6.2997969 11.209172 5.3183594 9.4511719 5.3183594 z" />\
  </svg>\
\}\
    href="/send-with-nodejs"\
  />\
\
  <Card\
    title="Next.js Quickstart"\
    icon=\{\
  <svg\
    className="h-6 w-6"\
    height="1024pt"\
    viewBox=".5 -.2 1023 1024.1"\
    width="1024pt"\
    xmlns="http://www.w3.org/2000/svg"\
  >\
    <path d="m478.5.6c-2.2.2-9.2.9-15.5 1.4-145.3 13.1-281.4 91.5-367.6 212-48 67-78.7 143-90.3 223.5-4.1 28.1-4.6 36.4-4.6 74.5s.5 46.4 4.6 74.5c27.8 192.1 164.5 353.5 349.9 413.3 33.2 10.7 68.2 18 108 22.4 15.5 1.7 82.5 1.7 98 0 68.7-7.6 126.9-24.6 184.3-53.9 8.8-4.5 10.5-5.7 9.3-6.7-.8-.6-38.3-50.9-83.3-111.7l-81.8-110.5-102.5-151.7c-56.4-83.4-102.8-151.6-103.2-151.6-.4-.1-.8 67.3-1 149.6-.3 144.1-.4 149.9-2.2 153.3-2.6 4.9-4.6 6.9-8.8 9.1-3.2 1.6-6 1.9-21.1 1.9h-17.3l-4.6-2.9c-3-1.9-5.2-4.4-6.7-7.3l-2.1-4.5.2-200.5.3-200.6 3.1-3.9c1.6-2.1 5-4.8 7.4-6.1 4.1-2 5.7-2.2 23-2.2 20.4 0 23.8.8 29.1 6.6 1.5 1.6 57 85.2 123.4 185.9s157.2 238.2 201.8 305.7l81 122.7 4.1-2.7c36.3-23.6 74.7-57.2 105.1-92.2 64.7-74.3 106.4-164.9 120.4-261.5 4.1-28.1 4.6-36.4 4.6-74.5s-.5-46.4-4.6-74.5c-27.8-192.1-164.5-353.5-349.9-413.3-32.7-10.6-67.5-17.9-106.5-22.3-9.6-1-75.7-2.1-84-1.3zm209.4 309.4c4.8 2.4 8.7 7 10.1 11.8.8 2.6 1 58.2.8 183.5l-.3 179.8-31.7-48.6-31.8-48.6v-130.7c0-84.5.4-132 1-134.3 1.6-5.6 5.1-10 9.9-12.6 4.1-2.1 5.6-2.3 21.3-2.3 14.8 0 17.4.2 20.7 2z" />\
    <path d="m784.3 945.1c-3.5 2.2-4.6 3.7-1.5 2 2.2-1.3 5.8-4 5.2-4.1-.3 0-2 1-3.7 2.1zm-6.9 4.5c-1.8 1.4-1.8 1.5.4.4 1.2-.6 2.2-1.3 2.2-1.5 0-.8-.5-.6-2.6 1.1zm-5 3c-1.8 1.4-1.8 1.5.4.4 1.2-.6 2.2-1.3 2.2-1.5 0-.8-.5-.6-2.6 1.1zm-5 3c-1.8 1.4-1.8 1.5.4.4 1.2-.6 2.2-1.3 2.2-1.5 0-.8-.5-.6-2.6 1.1zm-7.6 4c-3.8 2-3.6 2.8.2.9 1.7-.9 3-1.8 3-2 0-.7-.1-.6-3.2 1.1z" />\
  </svg>\
\}\
    href="/send-with-nextjs"\
  />\
\
  <Card\
    title="Express Quickstart"\
    icon=\{\
  <svg\
    className="h-6 w-6"\
    xmlns="http://www.w3.org/2000/svg"\
    viewBox="0 0 32 32"\
    width="64"\
    height="64"\
  >\
    <path d="M32 24.795c-1.164.296-1.884.013-2.53-.957l-4.594-6.356-.664-.88-5.365 7.257c-.613.873-1.256 1.253-2.4.944l6.87-9.222-6.396-8.33c1.1-.214 1.86-.105 2.535.88l4.765 6.435 4.8-6.4c.615-.873 1.276-1.205 2.38-.883l-2.48 3.288-3.36 4.375c-.4.5-.345.842.023 1.325L32 24.795zM.008 15.427l.562-2.764C2.1 7.193 8.37 4.92 12.694 8.3c2.527 1.988 3.155 4.8 3.03 7.95H1.48c-.214 5.67 3.867 9.092 9.07 7.346 1.825-.613 2.9-2.042 3.438-3.83.273-.896.725-1.036 1.567-.78-.43 2.236-1.4 4.104-3.45 5.273-3.063 1.75-7.435 1.184-9.735-1.248C1 21.6.434 19.812.18 17.9c-.04-.316-.12-.617-.18-.92q.008-.776.008-1.552zm1.498-.38h12.872c-.084-4.1-2.637-7.012-6.126-7.037-3.83-.03-6.58 2.813-6.746 7.037z" />\
  </svg>\
\}\
    href="send-with-express/"\
  />\
\
  <Card\
    title="PHP Quickstart"\
    icon=\{\
  <svg\
    className="h-6 w-6 overflow-visible ml-1"\
    fill="currentcolor"\
    viewBox="0 0 16 16"\
    xmlns="http://www.w3.org/2000/svg"\
  >\
    <path\
      clipRule="evenodd"\
      d="M7.9999 13.6496C10.5698 13.6496 12.9461 13.1038 14.7162 12.1728C16.44 11.2661 17.8399 9.84028 17.8399 8.00001C17.8399 6.15974 16.44 4.73389 14.7162 3.82722C12.9461 2.89617 10.5698 2.35043 7.9999 2.35043C5.42997 2.35043 3.05373 2.89617 1.28358 3.82722C-0.440229 4.73389 -1.84009 6.15974 -1.84009 8.00001C-1.84009 9.84028 -0.440229 11.2661 1.28358 12.1728C3.05373 13.1038 5.42997 13.6496 7.9999 13.6496ZM16.8399 8.00001C16.8399 10.5679 12.8821 12.6496 7.9999 12.6496C3.11771 12.6496 -0.840088 10.5679 -0.840088 8.00001C-0.840088 5.43212 3.11771 3.35043 7.9999 3.35043C12.8821 3.35043 16.8399 5.43212 16.8399 8.00001ZM6.87738 4.72751C6.88194 4.70401 6.90252 4.68703 6.92646 4.68703H7.9244C7.93933 4.68703 7.95347 4.6937 7.96297 4.70522C7.97247 4.71674 7.97633 4.7319 7.97348 4.74655L7.7477 5.91034C7.84026 5.91005 7.9323 5.90915 8.02328 5.90826C8.33164 5.90523 8.62788 5.90233 8.89109 5.9236C9.24813 5.95245 9.55863 6.02638 9.76423 6.216C9.87161 6.31473 9.94117 6.42259 9.97569 6.5654C10.0097 6.70601 10.0089 6.87748 9.98244 7.10232C9.94727 7.40106 9.8651 7.80454 9.74965 8.37142L9.74964 8.37145L9.74963 8.3715C9.69183 8.65534 9.62568 8.98014 9.55291 9.35328C9.54833 9.37676 9.52775 9.39371 9.50383 9.39371H8.49295C8.47802 9.39371 8.46387 9.38704 8.45437 9.37552C8.44488 9.364 8.44102 9.34884 8.44386 9.33419C8.52282 8.92716 8.58966 8.5905 8.64516 8.31095L8.6452 8.31076C8.73782 7.8442 8.79885 7.53677 8.83193 7.32694C8.85847 7.15866 8.86601 7.05871 8.85915 6.99197C8.85276 6.92984 8.83413 6.8978 8.80269 6.8641L8.80265 6.86405C8.74366 6.80064 8.64179 6.76909 8.43806 6.75735C8.30039 6.74942 8.12483 6.75064 7.89766 6.75222H7.89756C7.80294 6.75288 7.69936 6.7536 7.58584 6.75374L7.07911 9.35328C7.07453 9.37676 7.05396 9.39371 7.03003 9.39371H6.03318C6.01825 9.39371 6.0041 9.38704 5.9946 9.37552C5.9851 9.36401 5.98125 9.34885 5.98409 9.33419L6.87738 4.72751ZM2.69684 5.95416C2.7014 5.93065 2.72198 5.91368 2.74593 5.91368H4.67706C5.26358 5.91368 5.70732 6.06602 5.98566 6.3872L5.94796 6.42002L5.98574 6.38729L5.98566 6.3872C6.25284 6.69412 6.33382 7.1487 6.26023 7.60473C6.18652 8.06151 5.95682 8.52755 5.59142 8.86359C5.00271 9.41486 4.36602 9.40924 3.44999 9.40117C3.34805 9.40027 3.24265 9.39934 3.13347 9.39914L2.90398 10.5831C2.89942 10.6066 2.87884 10.6236 2.85489 10.6236H1.85156C1.83663 10.6236 1.82249 10.6169 1.81299 10.6054C1.80349 10.5939 1.79963 10.5787 1.80248 10.5641L2.69684 5.95416ZM10.5358 5.95415C10.5403 5.93065 10.5609 5.91368 10.5848 5.91368H12.5171C13.1036 5.91368 13.5473 6.06602 13.8256 6.3872L13.788 6.42003L13.8257 6.38729L13.8256 6.3872C14.0928 6.69412 14.1738 7.1487 14.1002 7.60473C14.0265 8.06152 13.7968 8.52756 13.4314 8.86361C12.8466 9.41043 12.238 9.4066 11.2662 9.40048H11.2662H11.2662H11.2662H11.2661C11.1721 9.39988 11.0746 9.39927 10.9735 9.39913L10.744 10.5831C10.7394 10.6066 10.7188 10.6236 10.6949 10.6236H9.68939C9.67446 10.6236 9.66031 10.6169 9.65081 10.6054C9.64131 10.5939 9.63746 10.5787 9.64031 10.5641L10.5358 5.95415ZM3.65348 6.74077L3.29849 8.56995C3.36057 8.57023 3.42151 8.5709 3.48133 8.57155H3.48135H3.48137H3.48138H3.4814C3.6276 8.57314 3.76717 8.57465 3.90059 8.57041C4.10547 8.56389 4.28973 8.54381 4.4503 8.49113C4.60986 8.43878 4.7459 8.35429 4.85535 8.21803C4.96524 8.08121 5.05079 7.88912 5.10374 7.61781C5.17864 7.22899 5.12314 7.02269 4.9944 6.90717C4.92839 6.84793 4.83845 6.80787 4.72385 6.78174C4.60919 6.7556 4.47305 6.74411 4.31748 6.73973C4.1854 6.736 4.04245 6.73745 3.88872 6.739H3.88871H3.88869H3.88868H3.88866L3.88856 6.739C3.81282 6.73977 3.73445 6.74056 3.65348 6.74077ZM11.4902 6.74077L11.1352 8.56998C11.2034 8.57036 11.2702 8.57129 11.3358 8.57221C11.471 8.57409 11.601 8.57591 11.7268 8.57265C11.9303 8.56738 12.1151 8.54876 12.2771 8.49702C12.438 8.4456 12.5762 8.36154 12.6876 8.22455C12.7995 8.08703 12.8869 7.89302 12.9405 7.61781C13.0154 7.22882 12.9608 7.02253 12.8329 6.90707C12.7674 6.8479 12.6779 6.80786 12.5636 6.78174C12.4493 6.7556 12.3132 6.74411 12.1575 6.73973C12.0252 6.736 11.8816 6.73745 11.727 6.739L11.7268 6.739H11.7268H11.7268H11.7268C11.6506 6.73977 11.5717 6.74056 11.4902 6.74077Z"\
      fillRule="evenodd"\
    ></path>\
  </svg>\
\}\
    href="send-with-php/"\
  />\
\
  <Card\
    title="Laravel Quickstart"\
    icon=\{\
  <svg\
    className="h-6 w-6"\
    fill="none"\
    height="40"\
    viewBox="0 0 16 16"\
    width="40"\
    xmlns="http://www.w3.org/2000/svg"\
  >\
    <path\
      d="M6.69141 2.76562L4.07422 4.27344M6.69141 2.76562L4.07422 1.25781L1.46094 2.76562M6.69141 2.76562V8.74242M4.07422 4.27344L1.46094 2.76562M4.07422 4.27344V10.2397M1.46094 2.76562V11.7266L6.69141 14.7422M6.69141 14.7422V11.7266M6.69141 14.7422L11.9201 11.7266V8.74242M6.69141 11.7266L4.07422 10.2397M6.69141 11.7266L11.9201 8.74242M4.07422 10.2397L6.69141 8.74242M9.31189 4.27344L11.9201 2.76562L14.5365 4.27344M9.31189 4.27344L11.9201 5.77934M9.31189 4.27344V7.24025M11.9201 5.77934L14.5365 4.27344M11.9201 5.77934V8.74242M14.5365 4.27344V7.24025L11.9201 8.74242M11.9201 8.74242L9.31189 7.24025M9.31189 7.24025L6.69141 8.74242"\
      stroke="currentcolor"\
      strokeLinecap="round"\
      strokeLinejoin="round"\
      strokeWidth="0.9"\
    ></path>\
  </svg>\
\}\
    href="send-with-laravel/"\
  />\
\
  <Card\
    title="Python Quickstart"\
    icon=\{\
  <svg\
    className="h-6 w-6"\
    fill="currentcolor"\
    height="40"\
    viewBox="0 0 16 16"\
    width="40"\
    xmlns="http://www.w3.org/2000/svg"\
  >\
    <path\
      clipRule="evenodd"\
      d="M5.00008 2.48333C5.00008 2.28791 5.17329 1.97181 5.75348 1.67407C6.30368 1.39174 7.09756 1.2 8.00008 1.2C8.9026 1.2 9.69648 1.39174 10.2467 1.67407C10.8269 1.97181 11.0001 2.28791 11.0001 2.48333L11 4.49999V4.66666C11 5.4877 10.9478 6.0615 10.8418 6.46743C10.7387 6.86203 10.595 7.06047 10.4316 7.18155C10.2553 7.31215 9.98982 7.40251 9.54728 7.45087C9.10384 7.49934 8.5515 7.5 7.83337 7.5H7.80801C7.20363 7.49999 6.65752 7.49998 6.19769 7.55571C5.72755 7.6127 5.28198 7.73413 4.91686 8.02623C4.54439 8.32421 4.31834 8.74858 4.18424 9.28498C4.06996 9.74209 4.01556 10.3077 4.00296 11H2.48341C2.28799 11 1.97188 10.8268 1.67415 10.2466C1.39181 9.6964 1.20007 8.90252 1.20007 8C1.20007 7.09748 1.39181 6.3036 1.67415 5.7534C1.97188 5.17321 2.28799 5 2.48341 5H4.50008H8.00007V4H5.00008V2.48333ZM2.48341 12H4.00005L4.00008 13.5167C4.00008 14.2877 4.61037 14.8633 5.29693 15.2156C6.01348 15.5833 6.9696 15.8 8.00008 15.8C9.03056 15.8 9.98668 15.5833 10.7032 15.2156C11.3898 14.8633 12.0001 14.2877 12.0001 13.5167V12H13.5167C14.2878 12 14.8634 11.3897 15.2157 10.7031C15.5834 9.9866 15.8001 9.03048 15.8001 8C15.8001 6.96952 15.5834 6.0134 15.2157 5.29685C14.8634 4.61029 14.2878 4 13.5167 4H12.0001L12.0001 2.48334C12.0001 1.71225 11.3898 1.13669 10.7032 0.784379C9.98668 0.416675 9.03056 0.199997 8.00008 0.199997C6.9696 0.199997 6.01348 0.416675 5.29693 0.784379C4.61037 1.13669 4.00008 1.71225 4.00008 2.48333V4H2.48341C1.71232 4 1.13677 4.61029 0.784455 5.29685C0.416751 6.0134 0.200073 6.96952 0.200073 8C0.200073 9.03048 0.416751 9.9866 0.784455 10.7031C1.13677 11.3897 1.71232 12 2.48341 12ZM8.00007 12H11.0001V13.5167C11.0001 13.7121 10.8269 14.0282 10.2467 14.3259C9.69648 14.6083 8.9026 14.8 8.00008 14.8C7.09756 14.8 6.30368 14.6083 5.75348 14.3259C5.17329 14.0282 5.00008 13.7121 5.00008 13.5167L5.00004 11.5L5.00004 11.5L5.00004 11.3333C5.00004 10.5132 5.05211 9.93659 5.15438 9.52752C5.25466 9.12641 5.39319 8.92579 5.54155 8.8071C5.69727 8.68253 5.92878 8.59563 6.31802 8.54845C6.71114 8.5008 7.19784 8.5 7.83337 8.5H7.85761C8.54613 8.50001 9.15215 8.50001 9.65592 8.44495C10.1665 8.38915 10.6406 8.27118 11.0268 7.98511C11.4259 7.68952 11.6676 7.26296 11.8093 6.72007C11.9294 6.26027 11.9844 5.69226 11.9971 5H13.5167C13.7122 5 14.0283 5.17321 14.326 5.7534C14.6083 6.3036 14.8001 7.09748 14.8001 8C14.8001 8.90252 14.6083 9.6964 14.326 10.2466C14.0283 10.8268 13.7122 11 13.5167 11H11.5001H8.00007V12ZM6.2262 3.45245C6.57205 3.45245 6.85242 3.17208 6.85242 2.82622C6.85242 2.48037 6.57205 2.2 6.2262 2.2C5.88035 2.2 5.59998 2.48037 5.59998 2.82622C5.59998 3.17208 5.88035 3.45245 6.2262 3.45245ZM9.77725 13.8045C10.1237 13.8045 10.4045 13.5237 10.4045 13.1773C10.4045 12.8308 10.1237 12.55 9.77725 12.55C9.43083 12.55 9.15 12.8308 9.15 13.1773C9.15 13.5237 9.43083 13.8045 9.77725 13.8045Z"\
      fillRule="evenodd"\
    ></path>\
  </svg>\
\}\
    href="/send-with-python"\
  />\
\
  <Card\
    title="Ruby Quickstart"\
    icon=\{\
  <svg\
    className="h-6 w-6"\
    fill="currentcolor"\
    height="40"\
    viewBox="0 0 16 16"\
    width="40"\
    xmlns="http://www.w3.org/2000/svg"\
  >\
    <path d="M 7.992188 1 C 7.917969 1 7.84375 1.019531 7.777344 1.054688 L 4.777344 2.554688 C 4.730469 2.578125 4.683594 2.609375 4.648438 2.648438 L 2.648438 4.648438 C 2.617188 4.675781 2.589844 4.707031 2.570313 4.742188 L 1.070313 7.242188 C 1.023438 7.320313 1 7.410156 1 7.5 C 1 7.507813 1 7.519531 1 7.53125 L 1 11.5 C 1 11.628906 1.050781 11.757813 1.140625 11.847656 C 1.238281 12.371094 1.375 12.890625 1.742188 13.257813 C 2.3125 13.828125 3.109375 14.027344 4 13.976563 L 4 14 L 14 14 L 14 5.539063 C 14 5.511719 14 5.484375 14 5.460938 L 14 3.5 L 13.992188 3.5 C 13.949219 2.8125 13.722656 2.207031 13.257813 1.742188 C 12.890625 1.375 12.371094 1.238281 11.847656 1.140625 C 11.753906 1.050781 11.628906 1 11.5 1 L 8 1 C 8 1 7.996094 1 7.992188 1 Z M 9.652344 2 L 11.40625 2 C 11.425781 2.003906 11.445313 2.007813 11.464844 2.007813 C 11.941406 2.042969 12.296875 2.195313 12.550781 2.449219 C 12.949219 2.84375 13.089844 3.539063 12.929688 4.445313 L 9.820313 2.117188 L 9.800781 2.101563 C 9.792969 2.09375 9.785156 2.089844 9.777344 2.085938 Z M 7.964844 2.078125 L 8.90625 2.703125 L 8.0625 5.230469 L 5.257813 8.03125 L 2.734375 8.453125 L 2.09375 7.484375 L 3.398438 5.3125 L 5.296875 3.410156 Z M 9.757813 3.316406 L 12 5 L 9.195313 5 Z M 9.238281 6 L 12.410156 6 C 11.980469 6.960938 11.3125 7.988281 10.4375 8.992188 Z M 8.316406 6.390625 L 9.601563 9.601563 L 6.390625 8.316406 Z M 13 7.078125 L 13 12.292969 L 10.925781 10.21875 L 10.847656 10.023438 C 11.742188 9.0625 12.472656 8.0625 13 7.078125 Z M 4.9375 9.101563 L 4.660156 11.859375 L 3.28125 9.375 Z M 2 9.152344 L 2.070313 9.257813 L 4.125 12.957031 C 3.382813 13.03125 2.796875 12.898438 2.449219 12.550781 C 2.449219 12.550781 2.449219 12.550781 2.445313 12.550781 C 2.191406 12.296875 2.042969 11.945313 2.007813 11.464844 C 2.007813 11.441406 2.003906 11.421875 2 11.40625 Z M 5.929688 9.210938 L 8.992188 10.4375 C 7.847656 11.433594 6.660156 12.171875 5.59375 12.585938 Z M 10.023438 10.847656 L 10.21875 10.925781 L 12.292969 13 L 7.078125 13 C 8.0625 12.472656 9.0625 11.742188 10.023438 10.847656 Z" />\
  </svg>\
\}\
    href="/send-with-ruby"\
  />\
\
  <Card\
    title="Rails Quickstart"\
    icon=\{\
  <svg\
    className="h-6 w-6"\
    fill="currentcolor"\
    width="14"\
    height="10"\
    viewBox="0 0 14 10"\
    xmlns="http://www.w3.org/2000/svg"\
  >\
    <path\
      fillRule="evenodd"\
      clipRule="evenodd"\
      d="M9.26954 1.31918C8.74765 1.18951 8.22291 1.12537 7.70403 1.12123L7.70802 0.621251C8.26552 0.625698 8.8294 0.694622 9.3901 0.833934L9.26954 1.31918ZM6.1341 1.29217C5.61738 1.40973 5.1165 1.5859 4.64137 1.81461L4.42451 1.36409C4.9329 1.11936 5.46929 0.930647 6.02318 0.804633L6.1341 1.29217ZM11.4358 2.2739C11.2094 2.12558 10.98 1.99259 10.7486 1.87436L10.976 1.42909C11.2236 1.55556 11.4685 1.69759 11.7098 1.85567L12.0666 2.08946L11.7926 2.50769L11.4358 2.2739ZM3.30044 2.65449C2.88728 2.98213 2.51016 3.35589 2.17885 3.76948L1.78862 3.45688C2.14375 3.01354 2.54767 2.61332 2.98975 2.26273L3.30044 2.65449ZM12.8631 3.20907L12.5063 2.97527L12.7803 2.55704L13.1371 2.79084L12.8631 3.20907ZM1.33981 5.10736C1.11705 5.57601 0.945725 6.07612 0.834598 6.60227L0.34539 6.49894C0.464781 5.93367 0.648893 5.39625 0.888228 4.89272L1.33981 5.10736ZM0.688533 8.1753C0.693883 8.43516 0.713433 8.69954 0.748067 8.96796L0.252178 9.03194C0.215265 8.74586 0.194362 8.46356 0.188639 8.18559L0.688533 8.1753ZM13.0001 4.99995L11.8648 4.46569C8.7923 3.0198 5.37433 5.6624 6.00012 8.99995H1.50012C0.752281 3.39114 7.11327 -0.36068 11.6602 3.00738L13.0001 3.99995V4.99995ZM9.39343 5.36218C9.65957 5.28953 9.9379 5.25342 10.2218 5.25912L10.2319 4.75922C9.89885 4.75254 9.57282 4.79491 9.26176 4.87982L9.39343 5.36218ZM11.0465 5.39477C11.1775 5.43577 11.3086 5.48648 11.4394 5.54749L11.8031 5.71725L12.0146 5.26415L11.6508 5.0944C11.5001 5.02407 11.3482 4.9653 11.1959 4.91761L11.0465 5.39477ZM7.97238 6.22066C8.16447 6.01612 8.38421 5.83825 8.62428 5.69298L8.36542 5.2652C8.08642 5.43403 7.83115 5.64067 7.60791 5.87838L7.97238 6.22066ZM12.5307 6.05675L12.8944 6.2265L13.1058 5.77341L12.7421 5.60365L12.5307 6.05675ZM7.21528 7.69283C7.26885 7.41392 7.36213 7.14921 7.48862 6.90405L7.04428 6.67479C6.89644 6.96135 6.78708 7.27139 6.72425 7.59851L7.21528 7.69283ZM7.24372 8.94374C7.21128 8.80315 7.189 8.6643 7.17618 8.52767L6.67837 8.57438C6.69328 8.73332 6.71913 8.89411 6.75653 9.05617L7.24372 8.94374Z"\
      fill="currentcolor"\
    />\
  </svg>\
\}\
    href="/send-with-rails"\
  />\
\
  <Card\
    title="Go Quickstart"\
    icon=\{\
  <svg\
    className="h-6 w-6"\
    fill="currentcolor"\
    height="40"\
    style=\{\{ overflow: 'visible' \}\}\
    viewBox="0 0 16 16"\
    width="40"\
    xmlns="http://www.w3.org/2000/svg"\
  >\
    <path\
      clipRule="evenodd"\
      d="M8.58088 6.38879C8.24298 6.47352 7.96479 6.54646 7.6815 6.62074L7.68145 6.62075C7.45577 6.67992 7.22686 6.73994 6.96195 6.80744L6.94603 6.81166C6.8165 6.84601 6.80299 6.84959 6.68249 6.71229C6.53794 6.55054 6.43194 6.44588 6.22957 6.35073C5.62247 6.05577 5.03464 6.1414 4.48536 6.49345C3.83008 6.9121 3.4928 7.53056 3.50244 8.30126C3.51208 9.06244 4.04208 9.69042 4.80337 9.79508C5.45865 9.88072 6.00793 9.65236 6.44157 9.1671C6.50586 9.08953 6.56485 9.00671 6.63032 8.91481L6.63033 8.91479L6.63041 8.91468C6.65324 8.88263 6.67685 8.84948 6.70176 8.81506H4.84191C4.63955 8.81506 4.59136 8.69136 4.65882 8.52961C4.7841 8.23466 5.01537 7.73989 5.15028 7.4925C5.17919 7.43541 5.24665 7.34027 5.39119 7.34027H8.49247C8.63176 6.90459 8.85774 6.49291 9.15917 6.10338C9.86263 5.18996 10.7106 4.71423 11.8574 4.51441C12.8403 4.34315 13.7654 4.4383 14.6038 4.99967C15.365 5.51347 15.8372 6.20805 15.9625 7.12147C16.1263 8.40596 15.7505 9.45259 14.8543 10.3469C14.2183 10.9844 13.4377 11.384 12.5415 11.5648C12.3708 11.5961 12.1999 11.6109 12.0318 11.6255C11.9439 11.6331 11.8567 11.6407 11.7706 11.6505C10.8937 11.6314 10.0939 11.384 9.41935 10.8132C8.94488 10.4082 8.61806 9.91052 8.45568 9.33109C8.34297 9.55585 8.2082 9.7711 8.05087 9.97586C7.35704 10.8798 6.45121 11.4411 5.30447 11.5934C4.36009 11.7171 3.48317 11.5363 2.71225 10.9654C1.99914 10.4326 1.59441 9.72849 1.48841 8.85312C1.36314 7.816 1.6715 6.88356 2.30751 6.06528C2.9917 5.18041 3.89754 4.61904 5.00573 4.41923C5.91157 4.25748 6.77885 4.36214 7.55941 4.88545C8.07014 5.21847 8.43633 5.67518 8.67724 6.22704C8.73506 6.31267 8.69652 6.36024 8.58088 6.38879ZM-2.29935 6.56005C-2.33789 6.56005 -2.34753 6.54102 -2.32826 6.51248L-2.12589 6.25558C-2.10662 6.22704 -2.05844 6.20801 -2.01989 6.20801H1.42034C1.45889 6.20801 1.46853 6.23655 1.44925 6.2651L1.28543 6.51248C1.26616 6.54102 1.21798 6.56957 1.18907 6.56957L-2.29935 6.56005ZM-3.75442 7.43554C-3.79297 7.43554 -3.8026 7.41651 -3.78333 7.38797L-3.58096 7.13107C-3.56169 7.10253 -3.51351 7.0835 -3.47496 7.0835H0.919281C0.957828 7.0835 0.977101 7.11204 0.967464 7.14059L0.890373 7.36894C0.880736 7.407 0.84219 7.42603 0.803644 7.42603L-3.75442 7.43554ZM-1.4513 8.2537C-1.47057 8.28224 -1.46093 8.31078 -1.42239 8.31078L0.678369 8.3203C0.707278 8.3203 0.745825 8.29175 0.745825 8.2537L0.765097 8.02534C0.765097 7.98728 0.745825 7.95874 0.707279 7.95874H-1.22002C-1.25856 7.95874 -1.29711 7.98728 -1.31638 8.01583L-1.4513 8.2537ZM14.0575 7.70514C14.0594 7.73699 14.0613 7.77055 14.0641 7.80653C14.0159 8.6248 13.6016 9.23375 12.8403 9.62385C12.3295 9.88075 11.7995 9.9093 11.2695 9.68094C10.5757 9.37647 10.2095 8.6248 10.383 7.88265C10.595 6.98826 11.1732 6.42689 12.0694 6.22708C12.9848 6.01775 13.8617 6.55058 14.0352 7.49254C14.0489 7.56001 14.0529 7.62749 14.0575 7.70514Z"\
      fillRule="evenodd"\
    ></path>\
  </svg>\
\}\
    href="/send-with-go"\
  />\
\
  <Card\
    title="Rust Quickstart"\
    icon=\{\
  <svg\
    fill="currentcolor"\
    xmlns="http://www.w3.org/2000/svg"\
    viewBox="4 4 16 16"\
  >\
    <path\
      d="m19.89 11.804-.671-.416a9.793 9.793 0 0 0-.019-.195l.577-.539a.23.23 0 0 0-.077-.386l-.738-.276a8.96 8.96 0 0 0-.057-.19l.46-.64a.231.231 0 0 0-.15-.363l-.779-.126a5.871 5.871 0 0 0-.093-.175l.327-.718a.23.23 0 0 0-.105-.302.23.23 0 0 0-.114-.025l-.789.028a6.455 6.455 0 0 0-.125-.151l.181-.77a.23.23 0 0 0-.277-.278l-.77.181-.151-.125.027-.789a.231.231 0 0 0-.212-.24.23.23 0 0 0-.114.022l-.718.327a8.455 8.455 0 0 0-.175-.094l-.127-.778a.23.23 0 0 0-.363-.15l-.64.459a7.18 7.18 0 0 0-.19-.057l-.275-.738a.23.23 0 0 0-.386-.077l-.538.578a6.308 6.308 0 0 0-.196-.02l-.416-.671a.23.23 0 0 0-.393 0l-.416.672a6.46 6.46 0 0 0-.195.019l-.539-.578a.232.232 0 0 0-.386.077l-.275.738a7.035 7.035 0 0 0-.19.058l-.64-.461a.23.23 0 0 0-.364.15l-.127.779c-.058.03-.116.062-.175.094L7.78 5.33a.23.23 0 0 0-.327.218l.028.79a7.17 7.17 0 0 0-.152.125l-.769-.182a.232.232 0 0 0-.278.278l.181.77-.125.15-.79-.027a.231.231 0 0 0-.218.327l.327.718a7.192 7.192 0 0 0-.093.175l-.778.126a.231.231 0 0 0-.15.364l.459.639c-.02.063-.039.127-.057.19l-.738.276a.231.231 0 0 0-.077.386l.578.539c-.008.065-.014.13-.02.195l-.671.416a.23.23 0 0 0 0 .393l.671.416c.006.065.012.13.02.196l-.578.538a.23.23 0 0 0 .077.386l.738.275c.018.065.038.128.058.19l-.461.64a.231.231 0 0 0 .15.363l.779.127c.03.059.061.117.094.175l-.328.717a.231.231 0 0 0 .219.327l.789-.027.125.151-.181.77a.23.23 0 0 0 .278.277l.769-.18c.05.042.1.083.152.124l-.028.79a.23.23 0 0 0 .327.218l.718-.327c.057.032.116.063.175.094l.126.777a.23.23 0 0 0 .364.151l.639-.46c.063.02.127.04.19.057l.276.738a.23.23 0 0 0 .385.077l.54-.578c.065.008.13.014.195.02l.416.672a.231.231 0 0 0 .393 0l.416-.672a6.34 6.34 0 0 0 .196-.02l.538.578a.23.23 0 0 0 .385-.077l.277-.738a6.39 6.39 0 0 0 .19-.058l.64.461a.23.23 0 0 0 .316-.044.233.233 0 0 0 .046-.107l.127-.778c.059-.03.117-.062.175-.093l.718.327a.23.23 0 0 0 .326-.219l-.027-.79c.051-.04.102-.081.152-.124l.768.181a.229.229 0 0 0 .276-.16.23.23 0 0 0 .002-.117l-.18-.77.124-.151.79.027a.23.23 0 0 0 .218-.327l-.327-.717c.032-.058.063-.116.093-.175l.779-.127a.229.229 0 0 0 .193-.254.23.23 0 0 0-.043-.109l-.46-.64c.02-.063.039-.126.057-.19l.738-.275a.23.23 0 0 0 .077-.386l-.578-.538.02-.196.671-.416a.231.231 0 0 0 0-.393Zm-4.495 5.572a.476.476 0 0 1 .2-.93.476.476 0 0 1-.2.93Zm-.229-1.544a.433.433 0 0 0-.514.333l-.238 1.113a5.824 5.824 0 0 1-2.414.52 5.83 5.83 0 0 1-2.464-.543l-.239-1.113a.433.433 0 0 0-.514-.333l-.982.21a5.829 5.829 0 0 1-.508-.598h4.78c.054 0 .09-.01.09-.059v-1.69c0-.05-.036-.06-.09-.06h-1.398V12.54h1.512c.138 0 .738.04.93.807.06.235.192 1.002.282 1.248.09.275.456.826.846.826h2.382a.484.484 0 0 0 .087-.009 5.808 5.808 0 0 1-.542.635l-1.006-.215Zm-6.611 1.52a.476.476 0 0 1-.2-.93.478.478 0 0 1 .568.552.476.476 0 0 1-.368.378ZM6.742 10a.475.475 0 1 1-.869.385.475.475 0 0 1 .869-.385Zm-.558 1.321 1.024-.454a.434.434 0 0 0 .22-.573l-.211-.476h.829v3.736H6.374a5.857 5.857 0 0 1-.19-2.233Zm4.491-.363V9.857h1.974c.103 0 .72.118.72.58 0 .383-.473.521-.864.521h-1.83Zm7.175.992c0 .146-.006.29-.017.434h-.6c-.06 0-.084.04-.084.099v.275c0 .649-.366.79-.686.826-.305.034-.644-.128-.686-.315-.18-1.013-.48-1.229-.954-1.603.588-.373 1.2-.924 1.2-1.661 0-.797-.546-1.298-.918-1.544a2.605 2.605 0 0 0-1.255-.413H7.643A5.842 5.842 0 0 1 10.915 6.2l.732.767c.165.173.44.18.612.014l.819-.783a5.856 5.856 0 0 1 4.005 2.852l-.561 1.266a.434.434 0 0 0 .22.572l1.08.48c.018.191.028.384.028.581Zm-6.203-6.402a.475.475 0 1 1 .656.686.475.475 0 0 1-.656-.686Zm5.562 4.475a.475.475 0 1 1 .868.386.475.475 0 0 1-.869-.386Z"\
      fill="currentColor"\
    />\
  </svg>\
\}\
    href="/send-with-rust"\
  />\
\
  <Card\
    title="Elixir Quickstart"\
    icon=\{\
  <svg\
    className="h-6 w-6"\
    fill="currentcolor"\
    height="40"\
    viewBox="0 0 16 16"\
    width="40"\
    xmlns="http://www.w3.org/2000/svg"\
  >\
    <path\
      clipRule="evenodd"\
      d="M8.95169 0.940326L8.97457 0.208954L8.28489 0.45342C7.07051 0.883867 5.99667 2.09398 5.02015 3.89315C4.30013 5.21975 3.4379 6.88892 3.09609 8.62234C2.75009 10.377 2.93069 12.2387 4.34004 13.8814C4.98953 14.6384 5.86559 15.2573 6.9497 15.5007C8.03868 15.7451 9.28923 15.5995 10.6621 14.9092C11.8527 14.3106 12.5834 13.1706 12.9194 12.0293C13.2515 10.9011 13.2298 9.66104 12.7781 8.8081C12.0293 7.39378 11.2718 6.47993 10.6584 5.73986L10.6584 5.73985L10.5548 5.61473C9.92016 4.84726 9.50366 4.30289 9.32552 3.53488C9.05065 2.34986 8.93437 1.49391 8.95169 0.940326ZM5.89904 4.37018C6.61644 3.04841 7.31909 2.19545 7.9882 1.72834C8.04627 2.2973 8.16963 2.97725 8.35138 3.76083C8.58889 4.78478 9.15631 5.49275 9.78417 6.252L9.88372 6.37222C10.4932 7.10777 11.1945 7.95414 11.8944 9.27603C12.1844 9.82388 12.2463 10.7747 11.9601 11.7469C11.6777 12.7059 11.0882 13.5757 10.2129 14.0158C9.01413 14.6185 7.99909 14.7113 7.16869 14.5249C6.33341 14.3375 5.6363 13.8565 5.09899 13.2303C3.943 11.8829 3.77243 10.3613 4.07719 8.81581C4.38614 7.24906 5.17662 5.70118 5.89904 4.37018ZM4.675 10.5227C4.81738 11.1996 5.12501 11.8571 5.64824 12.467C6.32801 13.2593 7.33535 13.8556 8.61589 13.7953L8.56887 12.7964C7.65729 12.8393 6.92974 12.4249 6.40719 11.8159C5.99411 11.3344 5.76156 10.8302 5.65359 10.3169L4.675 10.5227Z"\
      fillRule="evenodd"\
    ></path>\
  </svg>\
\}\
    href="/send-with-elixir"\
  />\
\
  <Card\
    title="Java Quickstart"\
    icon=\{\
  <svg\
    className="h-6 w-6"\
    width="40"\
    height="40"\
    viewBox="0 0 40 40"\
    fill="currentcolor"\
    stroke="currentcolor"\
    xmlns="http://www.w3.org/2000/svg"\
  >\
    <g clipPath="url(#clip0_1059_8989)">\
      <path\
        d="M13.9627 29.3125C13.9627 29.3125 12.0795 30.5902 15.3029 31.0226C19.208 31.5424 21.2038 31.4679 25.5072 30.5176C25.5072 30.5176 26.6387 31.3453 28.2188 32.0622C18.5716 36.8862 6.38534 31.7828 13.9627 29.3125Z"\
        strokeWidth="0.2"\
        strokeLinejoin="round"\
      />\
      <path\
        d="M13.9194 24.5625C13.9194 24.5625 12.0673 25.9582 14.8958 26.2561C18.5535 26.6403 21.442 26.6717 26.4403 25.6918C26.4403 25.6918 27.1317 26.4054 28.2187 26.7956C17.9915 29.8403 6.60026 27.0357 13.9194 24.5625Z"\
        strokeWidth="0.2"\
        strokeLinejoin="round"\
      />\
      <path\
        d="M21.3193 16.5103C22.86 18.2484 20.9146 19.8125 20.9146 19.8125C20.9146 19.8125 24.8265 17.8336 23.0299 15.3555C21.352 13.0446 20.0652 11.8964 27.0312 7.9375C27.0312 7.9375 16.0969 10.6135 21.3193 16.5103Z"\
        strokeWidth="0.2"\
        strokeLinejoin="round"\
      />\
      <path\
        d="M34.4522 33.2528C34.4522 33.2528 35.7597 34.2935 33.0122 35.0986C27.7878 36.6275 11.2676 37.0892 6.67835 35.1596C5.02864 34.4663 8.12232 33.5041 9.09547 33.3022C10.1104 33.0896 10.6904 33.1293 10.6904 33.1293C8.8557 31.8807 -1.16807 35.5808 5.59877 36.6404C24.0529 39.5315 39.239 35.3386 34.4522 33.2528Z"\
        strokeWidth="0.2"\
        strokeLinejoin="round"\
      />\
      <path\
        d="M15.145 19.8191C15.145 19.8191 6.55287 21.5665 12.1023 22.201C14.4455 22.4697 19.1165 22.4089 23.4674 22.0967C27.0233 21.8399 30.5938 21.2938 30.5938 21.2938C30.5938 21.2938 29.3399 21.7536 28.4328 22.284C19.7076 24.2488 2.85216 23.3347 7.70463 21.3249C11.8084 19.6264 15.145 19.8191 15.145 19.8191Z"\
        strokeWidth="0.2"\
        strokeLinejoin="round"\
      />\
      <path\
        d="M30.7628 27.9175C39.1741 23.7999 35.285 19.8429 32.5705 20.376C31.9052 20.5065 31.6085 20.6195 31.6085 20.6195C31.6085 20.6195 31.8555 20.255 32.3273 20.0973C37.6974 18.3187 41.8274 25.3429 30.5938 28.125C30.5938 28.125 30.7239 28.0155 30.7628 27.9175Z"\
        strokeWidth="0.2"\
        strokeLinejoin="round"\
      />\
      <path\
        d="M22.6092 2C22.6092 2 25.9593 5.1498 19.4318 9.9933C14.1975 13.8786 18.2382 16.0939 19.4297 18.625C16.3743 16.034 14.132 13.7531 15.6363 11.6302C17.8442 8.51409 23.9609 7.00326 22.6092 2Z"\
        strokeWidth="0.2"\
        strokeLinejoin="round"\
      />\
      <path\
        d="M15.8835 39.8818C24.3732 40.3152 37.41 39.6413 37.7187 36.4375C37.7187 36.4375 37.1252 37.652 30.7025 38.6166C23.4564 39.7042 14.5194 39.5772 9.21875 38.8802C9.21875 38.8802 10.3039 39.5964 15.8835 39.8818Z"\
        strokeWidth="0.2"\
        strokeLinejoin="round"\
      />\
    </g>\
  </svg>\
\}\
    href="/send-with-java"\
  />\
\
  <Card\
    title=".NET Quickstart"\
    icon=\{\
  <svg\
    fill="none"\
    height=\{24\}\
    width=\{32\}\
    xmlns="http://www.w3.org/2000/svg"\
    viewBox="69.65 171 323.05 120.35"\
  >\
    <path\
      d="M81.274 291.333c-3.224 0-5.965-1.074-8.222-3.223-2.257-2.204-3.386-4.821-3.386-7.851 0-3.086 1.129-5.73 3.386-7.934 2.257-2.204 4.998-3.306 8.222-3.306 3.278 0 6.045 1.102 8.302 3.306 2.311 2.204 3.466 4.848 3.466 7.934 0 3.03-1.155 5.647-3.466 7.851-2.257 2.149-5.024 3.223-8.302 3.223ZM210.167 289.515h-20.958l-55.215-87.109a38.977 38.977 0 0 1-3.466-6.86h-.484c.43 2.535.645 7.962.645 16.281v77.688h-18.54V171h22.328l53.362 85.043c2.257 3.527 3.708 5.951 4.353 7.273h.322c-.537-3.14-.806-8.457-.806-15.951V171h18.459v118.515ZM300.449 289.515h-64.888V171h62.309v16.695h-43.124v33.554h39.739v16.612h-39.739v35.042h45.703v16.612ZM392.667 187.695h-33.21v101.82h-19.185v-101.82h-33.129V171h85.524v16.695Z"\
      fill="currentColor"\
    />\
  </svg>\
\}\
    href="/send-with-dotnet"\
  />\
</CardGroup>\
\
## Explore\
\
Discover the full range of features and capabilities.\
\
<CardGroup cols=\{3\}>\
  <Card title="Emails" href="dashboard/emails">\
    Visualize all the activity in your account.\
  </Card>\
\
  <Card title="Domains" href="dashboard/domains/introduction">\
    Ensure deliverability of your emails.\
  </Card>\
\
  <Card title="Webhooks" href="/dashboard/webhooks">\
    Notify your application about email events.\
  </Card>\
</CardGroup>\
\
\
# How to add the Resend integration to your Anything project\
Source: https://resend.com/docs/knowledge-base/anything-integration\
\
Learn how to add the Resend integration to your Anything project.\
\
[Anything](https://createanything.com) is a platform for building web sites, tools, apps, and projects via chat. With their [Resend integration](https://www.createanything.com/docs/integrations/resend), you can send emails from your Anything project.\
If you prefer to watch a video, check out our video walkthrough below.\
\
<iframe width="100%" class="aspect-video" src="https://www.youtube.com/embed/Avp1OOMH2Z0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen />\
\
## 1. Call the Resend integration in Anything\
\
Type `/Resend` in the chat and select the integration, and ask Anything to add email functionality to your project.\
\
<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/create-xyz-integration.png?maxW=3360&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4808463ed0289861be7c4d945fbe7fb2" alt="adding the Resend integration to a Anything chat" width="3360" height="2100" data-path="images/create-xyz-integration.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/create-xyz-integration.png?w=280&maxW=3360&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e9d93c4005335af4670c0b5358b27a56 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/create-xyz-integration.png?w=560&maxW=3360&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5bcc803e679aa288f40af88ce98ecb8f 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/create-xyz-integration.png?w=840&maxW=3360&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5be146df622f4459e861c1dfcbfc6394 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/create-xyz-integration.png?w=1100&maxW=3360&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=38a12a407b2303cf6b01b841f3be796f 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/create-xyz-integration.png?w=1650&maxW=3360&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=bcd0c302db917b622c3e2303f7e1824d 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/create-xyz-integration.png?w=2500&maxW=3360&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=481bb798f3ed2ab06ff7a4dd02032d17 2500w" data-optimize="true" data-opv="2" />\
\
## 2. Add your Resend API key\
\
Anything usually prompts you for a Resend API key, which you can add in the [Resend Dashboard](https://resend.com/api-keys). If Anything doesn't prompt you for a Resend API key, click the **More options** <Icon icon="ellipsis-vertical" iconType="solid" /> button and select **Secrets**.\
\
Click the <Icon icon="plus" iconType="solid" /> **Add new secret** button.\
\
* **Name:** `RESEND_API_KEY`\
* **Value:** Your Resend API key (e.g., `re_xxxxxxxxx0`)\
\
Learn more about [Secrets in Create](https://www.createanything.com/docs/essentials#project-settings).\
\
## 3. Add a custom domain to your Resend account\
\
By default, you can only send emails to your own email address.\
\
To send emails to other email addresses:\
\
1. Add a [custom domain to your Resend account](https://resend.com/domains).\
2. Add the custom domain to the `from` field in the `resend` function in Create.\
\
Learn more about [Functions in Create](https://www.createanything.com/docs/builder/functions).\
\
\
# Audience Hygiene: How to keep your Audiences in good shape?\
Source: https://resend.com/docs/knowledge-base/audience-hygiene\
\
Learn strategies for maintaining good audience hygiene and maximizing email deliverability.\
\
Audience hygiene (*also known as list hygiene*) refers to the practice of keeping your email list clean, valid, and engaged.\
\
Maintaining proper audience hygiene is crucial for ensuring that your emails reach their intended recipients, maximizing your deliverability, and improving your sender reputation.\
\
By removing invalid, outdated, or disengaged contacts, you can improve the effectiveness of your email campaigns and avoid issues like high bounce rates, low engagement, and even being marked as spam.\
\
***\
\
# How to ensure emails are valid?\
\
To keep your list healthy, it's essential to ensure that the email addresses you collect are valid, accurate, and belong to recipients who are truly interested in hearing from you. Here are a few strategies to help you achieve this:\
\
### Prevent undesired or bot signups with CAPTCHA\
\
Bots can easily sign up for your emails, inflating your list with fake or low-quality contacts. To prevent this, implement CAPTCHA systems during your sign-up process. CAPTCHA challenges help ensure that sign-ups are coming from human users and not automated scripts.\
\
Some popular CAPTCHA services include:\
\
* **[Google reCAPTCHA](https://developers.google.com/recaptcha)**: One of the most widely used CAPTCHA services, offering both simple and advanced protection options.\
* **[hCaptcha](https://www.hcaptcha.com/)**: An alternative to Google reCAPTCHA, providing similar protection but with a different user experience.\
* **[Friendly Captcha](https://friendlycaptcha.com/)**: A privacy-focused CAPTCHA solution that doesn\'92t require users to click on anything, reducing friction in the sign-up process.\
\
Using these tools will help reduce bot sign-ups and ensure your email list consists of real users.\
\
### Ensure the recipient is consenting with Double Opt-In\
\
Double opt-in is the process of confirming a user's subscription after they\'92ve signed up for your emails.\
\
When a user submits their email address, you send them a confirmation email with a link they must click to complete the subscription process.\
\
This step ensures that the person who entered the email address is the one who actually wants to receive your communications.\
\
This is important to ensure:\
\
* **Compliance with local regulations**: Double opt-in helps ensure that you comply with email marketing regulations such as the **CAN-SPAM Act** (U.S.) and **CASL** (Canada). Both of these laws require clear consent from subscribers before you can send them marketing emails.\
* **Improved deliverability**: Double opt-in helps you maintain a clean list of genuinely interested users. This reduces bounce rates and prevents spam complaints, which in turn helps maintain your sender reputation with ISPs and inbox providers.\
* **Verification of accuracy**: Double opt-in ensures the email addresses you collect are valid, accurate, and up to date, reducing the risk of sending to invalid addresses and impacting your deliverability.\
\
### Use a third-party service to verify an address' deliverability\
\
While you can verify that an email address follows the correct syntax (e.g., [user@example.com](mailto:user@example.com)) (also known as RFC 5322), you also need to ensure that the address is deliverable\'97that is, it\'92s an active inbox that can receive emails.\
\
Third-party email verification services can help you identify whether an email address is valid, reachable, or likely to result in a bounce.\
\
This reduces the risk of sending to addresses that won\'92t receive your emails and improves your overall deliverability.\
\
Some email verification services include:\
\
* **[Emailable](https://emailable.com/partners/resend)**\
* **ZeroBounce**\
* **Kickbox**\
\
By using these services, you can clean up your existing email lists or prevent undeliverable emails to be added to them. This helps prevent unnecessary deliverability issues.\
\
***\
\
# How to proactively remove emails from your Audiences\
\
Over time, certain recipients may become disengaged with your content. It's important to manage your audience by removing inactive or unengaged users.\
\
Regularly filtering your audiences ensures that you're sending to only those who are actively interested, which in turn boosts engagement and deliverability.\
\
A healthy email list is one that is continuously nurtured with relevant and timely content. Instead of sporadic communication, maintain consistent engagement with your audience to keep them interested.\
\
### Filter on engagement\
\
To keep your email list in top shape, focus on sending to engaged users. Major inbox providers like Gmail and Microsoft expect you to send emails to recipients who have recently opened or clicked on your emails.\
\
As a best practice, you should limit non-transactional email sends to recipients who have opened or clicked an email in the past 6 months.\
\
<Info>\
  The exact timeframe may vary depending on your industry, sending frequency,\
  and audience behavior, but 6 months is a generally accepted standard.\
</Info>\
\
Regularly cleaning your list of disengaged recipients helps maintain a positive sender reputation and boosts your chances of landing in the inbox instead of the spam folder.\
\
### Automatically remove bounced recipients\
\
Using our [Webhooks](/dashboard/webhooks/introduction), you can be notified when a delivery bounces or gets marked as spam by the recipient.\
\
This is an opportunity to proactively unsubscribe the recipient and prevent further sending. Indeed, while Resend will automatically suppress further deliveries to that email address, we don't automatically unsubscribe it.\
\
### Sunset unengaged recipients\
\
If certain recipients have not engaged with your emails over an extended period (e.g., 6+ months), consider removing them from your Marketing sends.\
\
Continuing to send to these unengaged users can harm your deliverability by increasing bounce rates and decreasing your open rates.\
\
To re-engage these users, you may want to send a re-engagement campaign or offer an incentive for them to stay on your list. If they don't respond, it's often best to remove them to keep your list healthy and avoid wasting resources on inactive contacts.\
\
***\
\
By maintaining strong audience hygiene practices\'97including validating email addresses, ensuring consent, verifying deliverability, and removing unengaged recipients\'97you'll improve your email deliverability and foster better relationships with your subscribers.\
\
This will help you achieve better engagement rates and a healthier sender reputation with inbox providers.\
\
\
# Send emails with Base44 and Resend\
Source: https://resend.com/docs/knowledge-base/base44-integration\
\
Learn how to add the Resend integration to your Base44 project.\
\
[Base44](https://base44.com/) is a platform for building apps with AI. You can add Resend in a Base44 project by asking the chat to add email sending with Resend.\
\
<Info>\
  This integration requires backend functions, a feature available only on\
  Builder tier and above. Learn more about [Base44\
  pricing](https://base44.com/pricing).\
</Info>\
\
## 1. Add the Resend integration in Base44\
\
**If starting a new app:**\
\
1. Click **Integration** in the top nav.\
2. Search for **Resend**, select it, and choose **Use This Integration**.\
\
<img alt="Resend Integration page" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration.png?maxW=1024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=3f9d52ade23b57008728f2ae943d21ee" width="1024" height="475" data-path="images/base44-integration.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration.png?w=280&maxW=1024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=58f56f8ea383675b5f230a4f4fc9167a 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration.png?w=560&maxW=1024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c0b477d08a36c5eec70703de65a15cb2 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration.png?w=840&maxW=1024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a7a1394bfe9e526c098df662d18a64a3 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration.png?w=1100&maxW=1024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=117436ce25a57b8f75468a2f29de09e2 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration.png?w=1650&maxW=1024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=286acaae6d46641e05393e1fe23bc2bd 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration.png?w=2500&maxW=1024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b48b4f58dde6e566dd5257e17275583b 2500w" data-optimize="true" data-opv="2" />\
\
**If adding Resend to an existing app:**\
\
1. Enable backend functions.\
2. Ask the chat: "Add the Resend email integration to my app. Prompt me to provide the API key and send a welcome email to new users."\
\
<Note>\
  See the [Base44\
  documenation](https://app--base44-resend-integration-20-b5e74b23.base44.app/)\
  for more information.\
</Note>\
\
## 2. Add your Resend API key\
\
However you add Resend to your project, you'll need to add a Resend API key, which you can create in the [Resend Dashboard](https://resend.com/api-keys). Do not share your API key with others or expose it in the browser or other client-side code.\
\
Copy the API key and paste it into the **RESEND\\_API\\_KEY** field in Base44.\
\
<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration-1.png?maxW=1024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=2127ebcd59122647998bdefb162a8fd1" alt="Adding your Resend API key to Base44" width="1024" height="476" data-path="images/base44-integration-1.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration-1.png?w=280&maxW=1024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=3d1f2d62ae51e2e972ffc50e299a6a43 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration-1.png?w=560&maxW=1024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=cd2784d60421e097d67bb64c3bb0d00c 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration-1.png?w=840&maxW=1024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=58067f9ed75c6d948d13e545f25cec71 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration-1.png?w=1100&maxW=1024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b2f641825a7f11c2c68d64d58d116c99 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration-1.png?w=1650&maxW=1024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=adee4b8d49c9cf55ad1c8c2b4f30ecf6 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration-1.png?w=2500&maxW=1024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=153cbd14ec5b11a9de3f3eb00d7e3b5e 2500w" data-optimize="true" data-opv="2" />\
\
## 3. Add a custom domain to your Resend account\
\
By default, you can only send emails to your own email address.\
\
To send emails to other email addresses:\
\
1. Add a [custom domain to your Resend account](https://resend.com/domains).\
2. Add the custom domain to the `from` field in the `resend` function in the Base44 backend function (or ask the chat to update these fields).\
\
Get more help adding a custom domain in [Resend's documentation](/dashboard/domains/introduction).\
\
\
# Send emails with Bolt.new and Resend\
Source: https://resend.com/docs/knowledge-base/bolt-new-integration\
\
Learn how to add the Resend integration to your Bolt.new project.\
\
[Bolt.new](https://bolt.new) is a platform for building full-stack web and mobile apps via chat. You can add Resend in a Bolt.new project by asking the chat to add email sending with Resend.\
\
<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bolt-new-integration.png?maxW=3360&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b5280bc169976ee75676bab0b9650d2a" alt="adding the Resend integration to a Bolt.new chat" width="3360" height="2100" data-path="images/bolt-new-integration.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bolt-new-integration.png?w=280&maxW=3360&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=be488a123b7adcf98c7a6a270d32259b 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bolt-new-integration.png?w=560&maxW=3360&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=14647aede6df31a1c75205620e8ca330 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bolt-new-integration.png?w=840&maxW=3360&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=68b0f923ff198c841f7f13ccab534c1a 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bolt-new-integration.png?w=1100&maxW=3360&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=6c5b109345b546f45292554f557d415f 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bolt-new-integration.png?w=1650&maxW=3360&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=66af2aa3311577bf537787f36e9b210c 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bolt-new-integration.png?w=2500&maxW=3360&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b3f79a0d40014337a94dfd6d5c8e83dc 2500w" data-optimize="true" data-opv="2" />\
\
## 1. Add your Resend API key\
\
To use Resend with Bolt.new, you'll need to add a Resend API key, which you can create in the [Resend Dashboard](https://resend.com/api-keys). Do not share your API key with others or expose it in the browser or other client-side code.\
\
<Note>\
  To safely store your Resend API key, use a `.env` file. You may need to\
  include this instruction in your prompt to bolt.new. Learn more about\
  [handling API keys](/knowledge-base/how-to-handle-api-keys).\
</Note>\
\
## 2. Add a custom domain to your Resend account\
\
By default, you can only send emails to your own email address.\
\
To send emails to other email addresses:\
\
1. Add a [custom domain to your Resend account](https://resend.com/domains).\
2. Add the custom domain to the `from` field in the `resend` function in Bolt.new (or ask the chat to update these fields).\
\
Get more help adding a custom domain in [Resend's documentation](/dashboard/domains/introduction).\
\
\
# Cloudflare\
Source: https://resend.com/docs/knowledge-base/cloudflare\
\
Verify your domain on Cloudflare with Resend.\
\
<Snippet file="domain-guide-add-domain.mdx" />\
\
## Login to Cloudflare\
\
Login to your [Cloudflare account](https://cloudflare.com) and go to the DNS Records of your domain.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-main.png?maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a9b76aac6d2630baabc93e16f1758acc" width="3024" height="1888" data-path="images/dashboard-domains-cloudflare-main.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-main.png?w=280&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c4c554524cc9fafc3206830db285d8d8 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-main.png?w=560&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=6ab6bddac9c7db972b3e3c316c9ca500 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-main.png?w=840&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d770d18d0fed154c455e21429f2da429 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-main.png?w=1100&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=da2ff41608fd54bb6f89f4b9f7b91385 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-main.png?w=1650&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c1e8289341296db81440089ffa91fa15 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-main.png?w=2500&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=f03b17cdf3a08c5f929bef52631093f6 2500w" data-optimize="true" data-opv="2" />\
\
## Add MX SPF Record\
\
Click "Add Record" on Cloudflare:\
\
1. Set the Type to `MX`.\
2. Type `send` for the `Name` of the record.\
3. Copy the MX Value from Resend into the `Mail Server` field.\
4. Use the default `Auto` for `TTL`.\
5. Add `10` for the `Priority`.\
6. Select `Save`.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=acacffca22bae16101670444382c652a" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a2664c22179353b27efaee19ecda4001 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=77bb16631d89ad4503bad8e9e6370090 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=419f41c59437cdebbdb1422305d1ae1e 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3a547e3cc820b5d99260cc365f574fe5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=87787650757a99bff16ec7476f8c60f8 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3c3300b899e4ff5dd8d6de3144b98386 2500w" data-optimize="true" data-opv="2" />\
\
<br />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-mx.png?maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=9d5d5cd55a744f418b57dcd797b59c9c" width="3024" height="1888" data-path="images/dashboard-domains-cloudflare-spf-mx.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-mx.png?w=280&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=afd414a9ba77b0b0f3435a53103766f4 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-mx.png?w=560&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ddc86509da9f778636a22013e2cfb6e2 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-mx.png?w=840&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a785f45a88531678ac9dff8bbd01045d 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-mx.png?w=1100&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=2c85fe6aec6bbf210aee56ed4b49f11d 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-mx.png?w=1650&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8137dc67b0381a93e781f90c69bae2ff 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-mx.png?w=2500&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=78d90cbd509b13042eb2fb643dad2799 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Cloudflare:\
\
| Cloudflare  | Resend   | Example Value                           |\
| ----------- | -------- | --------------------------------------- |\
| Type        | Type     | `MX`                                    |\
| Name        | Name     | `send`                                  |\
| Mail Server | Value    | `feedback-smtp.us-east-1.amazonses.com` |\
| Priority    | Priority | `10`                                    |\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a\
  subdomain).\
</Info>\
\
<Info>\
  Do not use the same priority for multiple records. If Priority `10` is already\
  in use, try a number slightly higher like `11` or `12`.\
</Info>\
\
## Add TXT SPF Record\
\
Click "Add Record" on Cloudflare:\
\
1. Set the Type to `TXT`.\
2. Type `send` for the `Name` of the record.\
3. Copy the TXT Value Resend into `Content` field.\
4. Use the default `Auto` for `TTL`.\
5. Select `Save`.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cb9073c5e7cb71d2aa844592cf44678f" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a6abe0e9c26365d9e361ab1950614b2 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e901d2d73db3f5863caf88f5eb17072c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a723ecf3902095de4fda741d9af4670c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d666407aab9c83c70ae4498b5ca3f919 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd4153e8857db380db68b0243a191ba2 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=321ba5f3c09c53a611f7790aa773a3bc 2500w" data-optimize="true" data-opv="2" />\
\
<br />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-txt.png?maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5650133b0fc59bf160fa592941453c7f" width="3024" height="1888" data-path="images/dashboard-domains-cloudflare-spf-txt.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-txt.png?w=280&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=30fd02533c55e4df7664762203be2112 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-txt.png?w=560&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=3295b1d0e9e2acdd3eab6af29b1c93ba 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-txt.png?w=840&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=76bf4839aa2629ea3e7eab2e92e51489 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-txt.png?w=1100&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=34b00dd748e2bcbef13182c9556a7ddd 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-txt.png?w=1650&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8b1b282edec03c5569fcfe3eeffd7954 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-txt.png?w=2500&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=136641dfd8183b52ae80f83c49823e30 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Cloudflare:\
\
| Cloudflare | Resend | Example Value                         |\
| ---------- | ------ | ------------------------------------- |\
| Type       | Type   | `TXT`                                 |\
| Name       | Name   | `send`                                |\
| Content    | Value  | `"v=spf1 include:amazonses.com ~all"` |\
| TTL        | -      | `Auto`                                |\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a\
  subdomain).\
</Info>\
\
## Add TXT DKIM Records\
\
Click "Add Record" on Cloudflare:\
\
1. Set the Type to `TXT`.\
2. Type `resend._domainkey` for the `Name` of the record.\
3. Copy the TXT Value Resend into `Content` field.\
4. Use the default `Auto` for `TTL`.\
5. Select `Save`.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=664211d386b509e71a2a1ed05cefee73" width="2992" height="1868" data-path="images/dashboard-domains-resend-dkim.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e67460142f3afb173aaf6e0b7de5c91e 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=967d173c52b6d8f4f4cb084c018baef4 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a3a6c52abfac2a1e868371804da1a2dc 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8a62a7acf499f5ec75a70f87fa3a274a 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a9eadede29682ebd7cfaab3bf5300d64 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2fb4c83336c19d0dbe91569a022386e9 2500w" data-optimize="true" data-opv="2" />\
\
<br />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-dkim-txt.png?maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=2b1ad50e2ba4458fa503e349d76c07ef" width="3024" height="1888" data-path="images/dashboard-domains-cloudflare-dkim-txt.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-dkim-txt.png?w=280&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ba0f1d33c67b629dc35ecd6f9a941219 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-dkim-txt.png?w=560&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4a63dd6cc8a4f1c907ca1e4935808188 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-dkim-txt.png?w=840&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4fa6b76fc76d4ef7b18771321c470807 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-dkim-txt.png?w=1100&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=45eb01a337abb42f653300fa95570d27 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-dkim-txt.png?w=1650&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=70a253f790fa495781b008fd3cb9d5f3 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-dkim-txt.png?w=2500&maxW=3024&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=0fe2609e5c4ab89116e82cd326fd5720 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Cloudflare:\
\
| Cloudflare   | Resend | Example Value                                      |\
| ------------ | ------ | -------------------------------------------------- |\
| Type         | Type   | `TXT`                                              |\
| Name         | Name   | `resend._domainkey`                                |\
| Target       | Value  | `p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB` |\
| Proxy Status | -      | `DNS Only (disabled)`                              |\
| TTL          | -      | `Auto`                                             |\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or\
  `resend._domainkey.subdomain` if you're using a subdomain).\
</Info>\
\
## Complete Verification\
\
Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take up to 72 hours to complete the verification process (often much faster).\
\
## Troubleshooting\
\
If your domain is not successfully verified, these are some common troubleshooting methods.\
\
<AccordionGroup>\
  <Accordion title="Cloudflare returns 'Code: 1004' when adding CNAME Records.">\
    Confirm your proxy settings are set to `DNS Only` on the record you are adding.\
  </Accordion>\
\
  <Accordion title="Resend shows my domain verification failed.">\
    Review the records you added to Cloudflare to rule out copy and paste errors.\
  </Accordion>\
\
  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">\
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).\
  </Accordion>\
</AccordionGroup>\
\
\
# How to set up E2E testing with Playwright\
Source: https://resend.com/docs/knowledge-base/end-to-end-testing-with-playwright\
\
End to end testing ensures your entire app flow is fully functioning.\
\
Below is a basic guide on setting up E2E testing with NextJS, Resend, and Playwright.\
\
Prefer watching a video? Check out our video walkthrough below.\
\
<div className="aspect-video">\
  <iframe width="100%" height="100%" src="https://www.youtube.com/embed/lzozXSMKl6E" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen />\
</div>\
\
## 1. Create an endpoint.\
\
For simplicity, we'll create a GET endpoint that sends an email to the testing account, `delivered@resend.dev` on fetch.\
\
```ts app/api/send/route.ts\
import \{ Resend \} from 'resend';\
const resend = new Resend(process.env.RESEND_API_KEY);\
\
export async function GET() \{\
  try \{\
    const \{ data, error \} = await resend.emails.send(\{\
      from: 'Acme <onboarding@resend.dev>',\
      to: ['delivered@resend.dev'],\
      subject: 'Hello world',\
      html: '<h1>Hello world</h1>',\
    \});\
\
    if (error) \{\
      return Response.json(\{ error \}, \{ status: 500 \});\
    \}\
\
    return Response.json(\{ data \});\
  \} catch (error) \{\
    return Response.json(\{ error \}, \{ status: 500 \});\
  \}\
\}\
```\
\
## 2. Write the test spec file\
\
Create a test spec file at `e2e/app.spec.ts`. You can test in two ways:\
\
### Option 1: Call the Resend API\
\
Calling the Resend API tests the entire API flow, including Resend's API responses, but counts towards your account's sending quota.\
\
```ts e2e/app.spec.ts\
import \{ test, expect \} from '@playwright/test';\
\
test('does not mock the response and calls the Resend API', async (\{\
  page,\
\}) => \{\
  // Go to the page\
  await page.goto('http://localhost:3000/api/send');\
\
  // Assert that the response is visible\
  await expect(page.getByText('id')).toBeVisible();\
\});\
```\
\
### Option 2: Mock a response\
\
Mocking the response lets you test *your* app's flow without calling the Resend API and impacting your account's sending quota.\
\
```ts e2e/app.spec.ts\
import \{ test, expect \} from '@playwright/test';\
\
test("mocks the response and doesn't call the Resend API", async (\{ page \}) => \{\
  // Sample response from Resend\
  const body = JSON.stringify(\{\
    data: \{\
      id: '621f3ecf-f4d2-453a-9f82-21332409b4d2',\
    \},\
  \});\
\
  // Mock the api call before navigating\
  await page.route('*/**/api/send', async (route) => \{\
    await route.fulfill(\{\
      body,\
      contentType: 'application/json',\
      status: 200,\
    \});\
  \});\
\});\
```\
\
<Note>\
  However you test, it's important to test using a test email address (e.g.,\
  [delivered@resend.dev](mailto:delivered@resend.dev)) so your tests don't impact your deliverability. Resend's\
  [test accounts](/dashboard/emails/send-test-emails) run through the entire API\
  flow without harming your reputation.\
</Note>\
\
## 3. Create a Playwright config file\
\
Write your config file, paying special attention to a few properties:\
\
* `testDir`: the directory containing your test files\
* `outputDir`: the directory to store test results\
* `webServer`: provide instructions for Playwright to run your app before starting the tests\
* `projects`: an array of the browsers you want to test\
\
```ts playwright.config.ts\
import \{ defineConfig, devices \} from '@playwright/test';\
import path from 'path';\
\
const baseURL = 'http://localhost:3000';\
\
export default defineConfig(\{\
  timeout: 30 * 1000,\
  testDir: path.join(__dirname, 'e2e'),\
  retries: 2,\
  outputDir: 'test-results/',\
  webServer: \{\
    command: 'npm run dev',\
    url: baseURL,\
    timeout: 120 * 1000,\
    reuseExistingServer: !process.env.CI,\
  \},\
\
  use: \{\
    baseURL,\
    // Retry a test if its failing with enabled tracing. This allows you to analyze the DOM, console logs, network traffic etc.\
    trace: 'retry-with-trace',\
  \},\
\
  projects: [\
    // Test against desktop browsers.\
    \{\
      name: 'Desktop Chrome',\
      use: \{\
        ...devices['Desktop Chrome'],\
      \},\
    \},\
    \{\
      name: 'Desktop Firefox',\
      use: \{\
        ...devices['Desktop Firefox'],\
      \},\
    \},\
    \{\
      name: 'Desktop Safari',\
      use: \{\
        ...devices['Desktop Safari'],\
      \},\
    \},\
    // Test against mobile viewports.\
    \{\
      name: 'Mobile Chrome',\
      use: \{\
        ...devices['Pixel 5'],\
      \},\
    \},\
    \{\
      name: 'Mobile Safari',\
      use: devices['iPhone 12'],\
    \},\
  ],\
\});\
```\
\
[See the Playwright docs](https://playwright.dev/docs/intro) for more help.\
\
## 4. Run the test\
\
You can run the test by installing Playwright and running the tests.\
\
```bash\
npx playwright install\
npx playwright test\
```\
\
Playwright will run the tests in the browsers of your choice and show you the results.\
\
<Card title="Example repo" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-nextjs-playwright-example">\
  See the full source code.\
</Card>\
\
\
# Gandi\
Source: https://resend.com/docs/knowledge-base/gandi\
\
Verify your domain on Gandi with Resend.\
\
<Snippet file="domain-guide-add-domain.mdx" />\
\
## Login to Gandi\
\
Login to your [Gandi account](https://admin.gandi.net/domain/):\
\
1. Choose your Domain from the `Domain` list.\
2. Select the `DNS Records` tab to get to the page to manage DNS records.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-domains.png?maxW=2963&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7c6848b77db00807ff5e7b240f32f6ca" width="2963" height="1847" data-path="images/dashboard-domains-gandi-domains.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-domains.png?w=280&maxW=2963&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8557b5376f2cc44632a8c528bbbbf18e 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-domains.png?w=560&maxW=2963&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b6c29cea4a09159ebaa9415989ff45f1 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-domains.png?w=840&maxW=2963&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5ad032c5ffe261833dbc2d66b1b00690 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-domains.png?w=1100&maxW=2963&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=18d904dbea203e7e5b23018e432063a7 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-domains.png?w=1650&maxW=2963&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=cdd7de2b035a4de6174cd51ba9eec6f9 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-domains.png?w=2500&maxW=2963&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a0b3869d3cbb3f66c0aa97ca137edf3f 2500w" data-optimize="true" data-opv="2" />\
\
## Add MX SPF Record\
\
Select \'93Add record\'94 on Gandi to copy and paste the values MX from Resend.\
\
1. On the `Type` page, choose `MX`.\
2. Use the default TTL of `10800`.\
3. Type `send` for the `Name` of the record.\
4. Use the default `Priority` of `10`.\
5. Copy the MX Value from Resend into the `Hostname` field.\
6. Select `Create`.\
\
<Info>\
  Gandi requires your MX record to have a trailing period when adding. Resend\
  will include the trailing period when copying. Removing the period will cause\
  the verification to fail.\
</Info>\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=acacffca22bae16101670444382c652a" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a2664c22179353b27efaee19ecda4001 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=77bb16631d89ad4503bad8e9e6370090 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=419f41c59437cdebbdb1422305d1ae1e 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3a547e3cc820b5d99260cc365f574fe5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=87787650757a99bff16ec7476f8c60f8 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3c3300b899e4ff5dd8d6de3144b98386 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-mx.png?maxW=2974&auto=format&n=JHWt09hsc7E33HK2&q=85&s=853a62a00306023766f2036103e7f1b0" width="2974" height="1848" data-path="images/dashboard-domains-gandi-spf-mx.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-mx.png?w=280&maxW=2974&auto=format&n=JHWt09hsc7E33HK2&q=85&s=1ecc77833c1012f3b03df33ffa70292b 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-mx.png?w=560&maxW=2974&auto=format&n=JHWt09hsc7E33HK2&q=85&s=391f3fe699b593b712bdea5e02b7b3e9 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-mx.png?w=840&maxW=2974&auto=format&n=JHWt09hsc7E33HK2&q=85&s=0b0c1fe223fc76b10d5a69fe37499ff7 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-mx.png?w=1100&maxW=2974&auto=format&n=JHWt09hsc7E33HK2&q=85&s=88d79d6f1700eaa86f78c31902e179a1 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-mx.png?w=1650&maxW=2974&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5bdab2296028eb576a612e0cc7551782 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-mx.png?w=2500&maxW=2974&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a0e8d1fd32e7e6da94c8ade6291f25ac 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Gandi:\
\
| Gandi    | Resend   | Example Value                            |\
| -------- | -------- | ---------------------------------------- |\
| Type     | Type     | `MX Record`                              |\
| Name     | Name     | `send`                                   |\
| Hostname | Value    | `feedback-smtp.us-east-1.amazonses.com.` |\
| TTL      | -        | `10800`                                  |\
| Priority | Priority | `10`                                     |\
\
<Info>\
  Do not use the same priority for multiple records. If Priority `10` is already\
  in use on another record, try a number slightly higher like `11` or `12`.\
</Info>\
\
## Add TXT SPF Record\
\
In the same section, select \'93Add record\'94 again.\
\
1. On the `Type` page, choose `TXT`.\
2. Use the default TTL of `10800`.\
3. Type `send` for the `Name` of the record.\
4. Copy the TXT Value Resend into the `Text value` field.\
5. Select `Create`.\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a\
  subdomain).\
</Info>\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cb9073c5e7cb71d2aa844592cf44678f" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a6abe0e9c26365d9e361ab1950614b2 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e901d2d73db3f5863caf88f5eb17072c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a723ecf3902095de4fda741d9af4670c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d666407aab9c83c70ae4498b5ca3f919 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd4153e8857db380db68b0243a191ba2 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=321ba5f3c09c53a611f7790aa773a3bc 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-txt.png?maxW=2954&auto=format&n=JHWt09hsc7E33HK2&q=85&s=35c6dc952c1106195558f6945bf286d8" width="2954" height="1849" data-path="images/dashboard-domains-gandi-spf-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-txt.png?w=280&maxW=2954&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8d8e5d518e487949d187f4a4d1c78b87 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-txt.png?w=560&maxW=2954&auto=format&n=JHWt09hsc7E33HK2&q=85&s=755c767e8f24b2de85b19f4a500af64a 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-txt.png?w=840&maxW=2954&auto=format&n=JHWt09hsc7E33HK2&q=85&s=72ac488756fc7ee3ebd7effd7b2c808f 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-txt.png?w=1100&maxW=2954&auto=format&n=JHWt09hsc7E33HK2&q=85&s=0232acd58b79f0ecb25030bd96daca93 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-txt.png?w=1650&maxW=2954&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d5249414593dd0da9c9039489b5a7d50 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-txt.png?w=2500&maxW=2954&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a4f815bb071a1425be423a0589006ef7 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Gandi:\
\
| Gandi      | Resend | Example Value                         |\
| ---------- | ------ | ------------------------------------- |\
| Type       | Type   | `TXT Record`                          |\
| Name       | Name   | `send`                                |\
| Text value | Value  | `"v=spf1 include:amazonses.com ~all"` |\
| TTL        | -      | `10800`                               |\
\
## Add TXT DKIM Records\
\
In the same section, select \'93Add record\'94 again.\
\
1. On the `Type` page, choose `TXT`.\
2. Use the default TTL of `10800`.\
3. Type `resend._domainkey` for the `Host name` of the record.\
4. Copy the record value from Resend into the `TXT value` field.\
5. Select `Create`.\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or\
  `resend._domainkey.subdomain` if you're using a subdomain).\
</Info>\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=664211d386b509e71a2a1ed05cefee73" width="2992" height="1868" data-path="images/dashboard-domains-resend-dkim.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e67460142f3afb173aaf6e0b7de5c91e 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=967d173c52b6d8f4f4cb084c018baef4 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a3a6c52abfac2a1e868371804da1a2dc 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8a62a7acf499f5ec75a70f87fa3a274a 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a9eadede29682ebd7cfaab3bf5300d64 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2fb4c83336c19d0dbe91569a022386e9 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-dkim-txt.png?maxW=2954&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=6264bc35ff62c098b284f63e19096340" width="2954" height="1848" data-path="images/dashboard-domains-gandi-dkim-txt.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-dkim-txt.png?w=280&maxW=2954&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c564d4994814f1860cad25c4ef263d65 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-dkim-txt.png?w=560&maxW=2954&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=9cb185be52b42d452580f3fbebc686f9 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-dkim-txt.png?w=840&maxW=2954&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=3438efc88d0fa389f8d7f12c183565b2 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-dkim-txt.png?w=1100&maxW=2954&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1ec8b9c0cc51c99d406edc9d20dc6605 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-dkim-txt.png?w=1650&maxW=2954&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=94f508eb37c1e9464923432714278085 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-dkim-txt.png?w=2500&maxW=2954&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=2d84acc7fd8ab9850bd4acfec3def86f 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Gandi:\
\
| Gandi      | Resend | Example Value                                      |\
| ---------- | ------ | -------------------------------------------------- |\
| Type       | Type   | `TXT Record`                                       |\
| Name       | Name   | `send`                                             |\
| Text value | Value  | `p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB` |\
| TTL        | -      | `1 hour`                                           |\
\
## Complete Verification\
\
Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take a few hours to complete the verification process (often much faster).\
\
## Troubleshooting\
\
If your domain is not successfully verified, these are some common troubleshooting methods.\
\
<AccordionGroup>\
  <Accordion title="Resend shows my domain verification failed.">\
    Review the records you added to Gandi to rule out copy and paste errors.\
  </Accordion>\
\
  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">\
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).\
  </Accordion>\
</AccordionGroup>\
\
\
# Hetzner\
Source: https://resend.com/docs/knowledge-base/hetzner\
\
Verify your domain on Hetzner with Resend.\
\
<Snippet file="domain-guide-add-domain.mdx" />\
\
## Login to Hetzner\
\
Login to your [Hetzner account](https://dns.hetzner.com):\
\
1. Choose your Domain from the `Your Zones` list.\
2. Select the `Records` tab to get to the page to manage DNS records.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-domains.png?maxW=2984&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1459e0484e3e84df4888c0f6c93d0366" width="2984" height="1849" data-path="images/dashboard-domains-Hetzner-domains.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-domains.png?w=280&maxW=2984&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e7ea871e3e934e57ffd7c09a3c2d9490 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-domains.png?w=560&maxW=2984&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=133ff681e0f4d2863020dc516e0852ad 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-domains.png?w=840&maxW=2984&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d4f1de5cbb01f73e8e901e9637296b70 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-domains.png?w=1100&maxW=2984&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=9fdb600d50c7a38b5965733a2b455773 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-domains.png?w=1650&maxW=2984&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=cc08db1e3cbec619534b97732cc00e3c 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-domains.png?w=2500&maxW=2984&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c4d5bb70efb6fd1c8e75eccff9724ce3 2500w" data-optimize="true" data-opv="2" />\
\
## Add MX SPF Record\
\
In the `Create Record` section on Hetzner copy and paste the values MX from Resend:\
\
1. On the `Type` page, choose `MX`.\
2. Type `send` for the `Name` of the record.\
3. Select the `Value` field.\
4. Use the default `Priority` of `10`.\
5. Copy the MX Value from Resend into the `Mail server` field.\
6. Select the TTL of `1800`.\
7. Select `Add Record`.\
\
<Info>\
  Hetzner requires your MX record to have a trailing period when adding. Resend\
  will include the trailing period when copying. Removing the period will cause\
  the verification to fail.\
</Info>\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=acacffca22bae16101670444382c652a" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a2664c22179353b27efaee19ecda4001 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=77bb16631d89ad4503bad8e9e6370090 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=419f41c59437cdebbdb1422305d1ae1e 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3a547e3cc820b5d99260cc365f574fe5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=87787650757a99bff16ec7476f8c60f8 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3c3300b899e4ff5dd8d6de3144b98386 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-mx.png?maxW=2984&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=53febf10069e3b12144014cb6643e90b" width="2984" height="1848" data-path="images/dashboard-domains-Hetzner-spf-mx.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-mx.png?w=280&maxW=2984&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4d3764db1de8fc7ad6600cb6c62517e5 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-mx.png?w=560&maxW=2984&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=0a157095f4fd55c533477bee93252885 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-mx.png?w=840&maxW=2984&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=2429fa1e711d20ed2318adc098e46539 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-mx.png?w=1100&maxW=2984&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=efcd6584f096615efa034c7554769b03 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-mx.png?w=1650&maxW=2984&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b28638772296a2e87a4910d6cd4868e9 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-mx.png?w=2500&maxW=2984&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a5d6f19015c4ac3378733a0e6a792e0b 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Hetzner:\
\
| Hetzner     | Resend   | Example Value                            |\
| ----------- | -------- | ---------------------------------------- |\
| Type        | Type     | `MX Record`                              |\
| Name        | Name     | `send`                                   |\
| Mail server | Value    | `feedback-smtp.us-east-1.amazonses.com.` |\
| TTL         | -        | `1800`                                   |\
| Priority    | Priority | `10`                                     |\
\
<Info>\
  Do not use the same priority for multiple records. If Priority `10` is already\
  in use on another record, try a number slightly higher like `11` or `12`.\
</Info>\
\
## Add TXT SPF Record\
\
On the same `Create Record` section:\
\
1. On the `Type` page, choose `TXT`.\
2. Type `send` for the `Name` of the record.\
3. Copy the TXT Value Resend into the `Value` field.\
4. Select the TTL of `1800`.\
5. Select `Add Record`.\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a\
  subdomain).\
</Info>\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cb9073c5e7cb71d2aa844592cf44678f" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a6abe0e9c26365d9e361ab1950614b2 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e901d2d73db3f5863caf88f5eb17072c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a723ecf3902095de4fda741d9af4670c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d666407aab9c83c70ae4498b5ca3f919 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd4153e8857db380db68b0243a191ba2 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=321ba5f3c09c53a611f7790aa773a3bc 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-txt.png?maxW=2986&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4b452b53084c0f5b08424f8ac15dcc75" width="2986" height="1848" data-path="images/dashboard-domains-Hetzner-spf-txt.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-txt.png?w=280&maxW=2986&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5f82baf9e062b461edbdb001d55c0732 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-txt.png?w=560&maxW=2986&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=3dab412b5815e4ac4a342ff1c00dfa34 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-txt.png?w=840&maxW=2986&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=36b0f362608ee645f17d162383b9be13 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-txt.png?w=1100&maxW=2986&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=241e8bd16ab933f2b11be623359d8d3e 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-txt.png?w=1650&maxW=2986&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=adb4e9d3ec2e8ad2089b4c5bd07502e9 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-txt.png?w=2500&maxW=2986&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1abe364a2dc814b04c3e52dadda40aab 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Hetzner:\
\
| Hetzner | Resend | Example Value                         |\
| ------- | ------ | ------------------------------------- |\
| Type    | Type   | `TXT Record`                          |\
| Name    | Name   | `send`                                |\
| Value   | Value  | `"v=spf1 include:amazonses.com ~all"` |\
| TTL     | -      | `10800`                               |\
\
## Add TXT DKIM Records\
\
On the same `Create Record` section:\
\
1. On the `Type` page, choose `TXT`.\
2. Type `resend._domainkey` for the `Name` of the record.\
3. Copy the TXT Value Resend into the `Value` field.\
4. Select the TTL of `1800`.\
5. Select `Add Record`.\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or\
  `resend._domainkey.subdomain` if you're using a subdomain).\
</Info>\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=664211d386b509e71a2a1ed05cefee73" width="2992" height="1868" data-path="images/dashboard-domains-resend-dkim.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e67460142f3afb173aaf6e0b7de5c91e 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=967d173c52b6d8f4f4cb084c018baef4 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a3a6c52abfac2a1e868371804da1a2dc 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8a62a7acf499f5ec75a70f87fa3a274a 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a9eadede29682ebd7cfaab3bf5300d64 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2fb4c83336c19d0dbe91569a022386e9 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-dkim-txt.png?maxW=2984&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=06e62c010dfefa6c9d0ccd25d88dcb99" width="2984" height="1848" data-path="images/dashboard-domains-Hetzner-dkim-txt.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-dkim-txt.png?w=280&maxW=2984&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4a419bde15d79f131e44d06ffc0ed242 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-dkim-txt.png?w=560&maxW=2984&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7c2e1dbeafabb6b723fcfb0ab3c713b0 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-dkim-txt.png?w=840&maxW=2984&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c400b14736df694e48496bb94f3fdc5b 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-dkim-txt.png?w=1100&maxW=2984&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=0af607f62df3938e8c5f80ef23d9665e 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-dkim-txt.png?w=1650&maxW=2984&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5e547be48bfe2d13d7e35ab03e4615cd 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-dkim-txt.png?w=2500&maxW=2984&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=abf4ea628820a69003137670afb92d2c 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Hetzner:\
\
| Hetzner | Resend | Example Value                                      |\
| ------- | ------ | -------------------------------------------------- |\
| Type    | Type   | `TXT Record`                                       |\
| Name    | Name   | `send`                                             |\
| Value   | Value  | `p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB` |\
| TTL     | -      | `1 hour`                                           |\
\
## Complete Verification\
\
Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take a few hours to complete the verification process (often much faster).\
\
## Troubleshooting\
\
If your domain is not successfully verified, these are some common troubleshooting methods.\
\
<AccordionGroup>\
  <Accordion title="Resend shows my domain verification failed.">\
    Review the records you added to Hetzner to rule out copy and paste errors.\
  </Accordion>\
\
  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">\
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).\
  </Accordion>\
</AccordionGroup>\
\
\
# Hostinger\
Source: https://resend.com/docs/knowledge-base/hostinger\
\
Verify your domain on Hostinger with Resend.\
\
<Snippet file="domain-guide-add-domain.mdx" />\
\
## Login to Hostinger\
\
Login to your [Hostinger account](https://auth.hostinger.com/login):\
\
1. Select the `Domains` tab\
2. Choose your Domain from the `Domain portfolio` list.\
3. Select the `DNS / Nameservers` to get to the page to manage DNS records.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-domains.png?maxW=2983&auto=format&n=JHWt09hsc7E33HK2&q=85&s=de46231adf86a1cabe4272f81c903769" width="2983" height="1848" data-path="images/dashboard-domains-hostinger-domains.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-domains.png?w=280&maxW=2983&auto=format&n=JHWt09hsc7E33HK2&q=85&s=49fca07842966cf6879e4ab466a81ec6 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-domains.png?w=560&maxW=2983&auto=format&n=JHWt09hsc7E33HK2&q=85&s=b3aec6c8344c624fedcece9476cd4316 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-domains.png?w=840&maxW=2983&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3ca060acd7243085cd62c5cbb5f618b9 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-domains.png?w=1100&maxW=2983&auto=format&n=JHWt09hsc7E33HK2&q=85&s=b91ab3614cbd1a394f0f2342516b1cf1 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-domains.png?w=1650&maxW=2983&auto=format&n=JHWt09hsc7E33HK2&q=85&s=136e4520a76ceebb24a54c27b5bdc18a 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-domains.png?w=2500&maxW=2983&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8912e9bc58aac7aa2a985d4eb44fea2f 2500w" data-optimize="true" data-opv="2" />\
\
## Add MX SPF Record\
\
Copy and paste the values MX in Resend to Hostinger.\
\
1. Set the Type to `MX`.\
2. Type `send` for the `Name` of the record.\
3. Copy the MX Value from Resend into the `Mail Server` field.\
4. Add `10` for the `Priority`.\
5. Set the TTL to `3600`.\
6. Select `Add Record`.\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a\
  subdomain).\
</Info>\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=acacffca22bae16101670444382c652a" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a2664c22179353b27efaee19ecda4001 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=77bb16631d89ad4503bad8e9e6370090 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=419f41c59437cdebbdb1422305d1ae1e 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3a547e3cc820b5d99260cc365f574fe5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=87787650757a99bff16ec7476f8c60f8 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3c3300b899e4ff5dd8d6de3144b98386 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-mx.png?maxW=2984&auto=format&n=JHWt09hsc7E33HK2&q=85&s=7268cf4411bd34efd5890a71be69e8a5" width="2984" height="1849" data-path="images/dashboard-domains-hostinger-spf-mx.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-mx.png?w=280&maxW=2984&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f82f9333eb5bef51ca951eb80b18a491 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-mx.png?w=560&maxW=2984&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cb9cfab197a90e6c6954d0e8f81be77e 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-mx.png?w=840&maxW=2984&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e091879f4f80dcf5520b8e3df75c010b 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-mx.png?w=1100&maxW=2984&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a2990c8f1f9797be7133e56850b54e5f 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-mx.png?w=1650&maxW=2984&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3b991bd04b228aa737445ea976c4ff19 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-mx.png?w=2500&maxW=2984&auto=format&n=JHWt09hsc7E33HK2&q=85&s=b81ec851ed53a2aabb555c88cb64eaf3 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Hostinger:\
\
| Hostinger   | Resend   | Example Value                           |\
| ----------- | -------- | --------------------------------------- |\
| Type        | Type     | `MX Record`                             |\
| Name        | Name     | `send`                                  |\
| Mail Server | Value    | `feedback-smtp.us-east-1.amazonses.com` |\
| TTL         | -        | `Set to 3660`                           |\
| Priority    | Priority | `10`                                    |\
\
<Info>\
  Do not use the same priority for multiple records. If Priority `10` is already\
  in use on another record, try a number slightly higher like `11` or `12`.\
</Info>\
\
## Add TXT SPF Record\
\
In the same section, add another record in Hostinger.\
\
1. Set the Type to `TXT`.\
2. Type `send` for the `Name` of the record.\
3. Copy the TXT Value Resend into the `TXT value` field.\
4. Set the TTL to `3600`.\
5. Select `Add Record`.\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a\
  subdomain).\
</Info>\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cb9073c5e7cb71d2aa844592cf44678f" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a6abe0e9c26365d9e361ab1950614b2 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e901d2d73db3f5863caf88f5eb17072c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a723ecf3902095de4fda741d9af4670c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d666407aab9c83c70ae4498b5ca3f919 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd4153e8857db380db68b0243a191ba2 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=321ba5f3c09c53a611f7790aa773a3bc 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-txt.png?maxW=2985&auto=format&n=JHWt09hsc7E33HK2&q=85&s=38f2421182154588c3300ae6edc4dcee" width="2985" height="1848" data-path="images/dashboard-domains-hostinger-spf-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-txt.png?w=280&maxW=2985&auto=format&n=JHWt09hsc7E33HK2&q=85&s=0d708d6b2c89ee8e4cc92c1e4b17c6fc 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-txt.png?w=560&maxW=2985&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e979c1d8645fb66b9f67ec439aa72d7b 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-txt.png?w=840&maxW=2985&auto=format&n=JHWt09hsc7E33HK2&q=85&s=53ef5d68ec42d54b93117c08eea8fe60 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-txt.png?w=1100&maxW=2985&auto=format&n=JHWt09hsc7E33HK2&q=85&s=b8cd54ab368b8ca732f227092061f6c0 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-txt.png?w=1650&maxW=2985&auto=format&n=JHWt09hsc7E33HK2&q=85&s=02146a8042e669618f6e05f2cf8ed817 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-txt.png?w=2500&maxW=2985&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5dda831fb06c35b046fe05dad9c30355 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Hostinger:\
\
| Hostinger | Resend | Example Value                         |\
| --------- | ------ | ------------------------------------- |\
| Type      | Type   | `TXT Record`                          |\
| Name      | Name   | `send`                                |\
| TXT value | Value  | `"v=spf1 include:amazonses.com ~all"` |\
| TTL       | -      | `Set to 3600`                         |\
\
## Add TXT DKIM Records\
\
In the same section, add another record in Hostinger.\
\
1. Set the Type to `TXT`.\
2. Type `resend._domainkey` for the `Name` of the record.\
3. Copy the record value from Resend into the `TXT value` field.\
4. Set the TTL to `3600`.\
5. Select `Add Record`.\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or\
  `resend._domainkey.subdomain` if you're using a subdomain).\
</Info>\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=664211d386b509e71a2a1ed05cefee73" width="2992" height="1868" data-path="images/dashboard-domains-resend-dkim.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e67460142f3afb173aaf6e0b7de5c91e 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=967d173c52b6d8f4f4cb084c018baef4 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a3a6c52abfac2a1e868371804da1a2dc 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8a62a7acf499f5ec75a70f87fa3a274a 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a9eadede29682ebd7cfaab3bf5300d64 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2fb4c83336c19d0dbe91569a022386e9 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-dkim-txt.png?maxW=2984&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e1dfafb1426ef663b4823418354a2efb" width="2984" height="1848" data-path="images/dashboard-domains-hostinger-dkim-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-dkim-txt.png?w=280&maxW=2984&auto=format&n=JHWt09hsc7E33HK2&q=85&s=ca804969fda82acd402ea75e119464f3 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-dkim-txt.png?w=560&maxW=2984&auto=format&n=JHWt09hsc7E33HK2&q=85&s=b7cfe301833dbc6e121ef5ea1dc3b914 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-dkim-txt.png?w=840&maxW=2984&auto=format&n=JHWt09hsc7E33HK2&q=85&s=78066161a6bcd9f619dbe44749111e0e 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-dkim-txt.png?w=1100&maxW=2984&auto=format&n=JHWt09hsc7E33HK2&q=85&s=74ff670685f9acd52c51ef1e0c71920a 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-dkim-txt.png?w=1650&maxW=2984&auto=format&n=JHWt09hsc7E33HK2&q=85&s=931625936616347bf6628a733e52e7ee 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-dkim-txt.png?w=2500&maxW=2984&auto=format&n=JHWt09hsc7E33HK2&q=85&s=7a744d37ce24b60f1b753a6030ce068d 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Hostinger:\
\
| Hostinger | Resend | Example Value                                      |\
| --------- | ------ | -------------------------------------------------- |\
| Type      | Type   | `TXT Record`                                       |\
| Name      | Name   | `send`                                             |\
| TXT value | Value  | `p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB` |\
| TTL       | -      | `Set to 3600`                                      |\
\
## Complete Verification\
\
Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take a few hours to complete the verification process (often much faster).\
\
## Troubleshooting\
\
If your domain is not successfully verified, these are some common troubleshooting methods.\
\
<AccordionGroup>\
  <Accordion title="Resend shows my domain verification failed.">\
    Review the records you added to Hostinger to rule out copy and paste errors.\
  </Accordion>\
\
  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">\
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).\
  </Accordion>\
</AccordionGroup>\
\
\
# How can I delete my Resend account?\
Source: https://resend.com/docs/knowledge-base/how-can-i-delete-my-resend-account\
\
How to request your Resend account and data to be deleted.\
\
To delete your Resend account:\
\
1. [Leave the team](/dashboard/settings/team#leave-your-resend-team) associated with your Resend account.\
2. Select the **Delete account** button.\
\
Upon confirmation, Resend will delete your account and all account data.\
\
<Warning>\
  Please note that this action is not reversible, so please proceed with\
  caution.\
</Warning>\
\
\
# How can I delete my Resend team?\
Source: https://resend.com/docs/knowledge-base/how-can-i-delete-my-team\
\
How to request your Resend team and team data to be deleted.\
\
To request your Resend team and team data to be deleted:\
\
1. Navigate to your [**Team Settings**](https://resend.com/settings/team).\
2. Select the **Delete Team** button.\
\
Upon confirmation, Resend will delete your team and all your team data.\
\
<Warning>\
  Please note that this action is not reversible, so please proceed with\
  caution.\
</Warning>\
\
\
# Can I receive emails with Resend?\
Source: https://resend.com/docs/knowledge-base/how-can-i-receive-emails-with-resend\
\
Resend does not offer the functionality to receive email but there are a few workarounds that could help.\
\
You can't receive emails within Resend (yet), but you can [set a Reply To Address](api-reference/emails/send-email) (`reply_to`) on your email to direct any responses to a different location like an existing inbox, slack channel, etc.\
\
Until we add email receiving within Resend, here are a few workarounds that could help:\
\
* **Sending to existing inbox**: You could set the `reply_to` as your personal email address. If any recipient replies to your email, it will be sent to the `reply_to` address. This could be a different address on the same domain, or a different domain entirely.\
* **Sending to Slack**: You could set the `reply_to` as a [channel email address in Slack](https://slack.com/help/articles/206819278-Send-emails-to-Slack). This will create a new message in slack with the contents of the reply.\
\
\
# How do Dedicated IPs work?\
Source: https://resend.com/docs/knowledge-base/how-do-dedicated-ips-work\
\
When are Dedicated IPs helpful, and how can they be requested.\
\
## What is a Dedicated IP?\
\
In email delivery, the sending IP address serves as a key identifier. Inbox Providers like Gmail track the reputation of these IPs based on the quality and quantity of emails sent from them, factoring this information into filtering and inbox placement decisions.\
\
By default, all Resend users utilize our shared IPs, which are a collection of IPs shared across many senders. Optionally, you can purchase a dedicated IP pool so a range of IPs are exclusively assigned to your sending.\
\
Resend goes one step further and exclusively provisions "Managed Dedicated IP Pools". These managed pools handle multiple delicate and time consuming aspects of dedicated IPs:\
\
* **Automatic warmup**: New IPs have no reputation and are therefore under scrutiny by inbox providers. We carefully migrate your sending over from the shared pool to your dedicated pool.\
* **Automatic scaling**: IPs can only send at a certain rate based on the specifications of each inbox provider. We scale your pool dynamically based on the inbox provider feedback, without you lifting a finger.\
* **Continuous monitoring**: Resend continuously monitors the reputation and performance of your dedicated IPs.\
* **Fully dedicated**: You can segregate your emails from sending on shared pools to reduce risk of "noisy neighbors".\
\
<Note>\
  Resend only provisions Managed Dedicated IP Pools, but we will refer to them\
  as **Dedicated IPs** in this article to be succinct.\
</Note>\
\
## When are Dedicated IPs helpful?\
\
Historically, Dedicated IPs were seen as the primary ingredient to great deliverability. This is not true anymore as Inbox Providers have incorporated dozens of other factors like sending history, domain reputation, and sending feedback (bounces and complaints) more predominantly than IP reputation.\
\
Though Dedicated IPs are not a deliverability silver bullet, they maintain a very helpful benefit: **removing risk of noisy neighbors**.\
\
There is power in numbers, and for many senders it can be very helpful to leverage the positive reputation of other senders in an IP pool. For some senders though, they want to maintain their own IP reputation without any chance of being impacted, positively or negatively, by other senders. For them, Dedicated IPs are a helpful solution.\
\
## When are Dedicated IPs not helpful?\
\
Dedicated IPs can be very helpful, but there are some situations where they can actually hinder your ability to reach the inbox. If any of these situations match your use case, Dedicated IPs may hinder more than help:\
\
* **Low email volume**: Sending less than 30k emails a month may not be enough to keep the IPs warm.\
* **Inconsistent sending**: Sudden changes in email volume can hurt your IP reputation.\
* **Poor email practices**: A Dedicated IP simply exposes your sending behavior even more.\
* **New sender**: If you're just starting out and have no sending history.\
* **IP Allowlisting**: Resend does not expose the IPs included in your dedicated pool.\
\
## How does IP warmup work?\
\
With Resend's Managed Dedicated IP Pools, the warmup process is handled automatically:\
\
1. **Automatic scaling**: Add or remove IP addresses based on your sending volume.\
2. **Gradual increase**: Gradually increase the volume of emails sent through new IPs over time.\
3. **Traffic distribution**: During warmup, traffic is distributed across shared and dedicated IPs.\
4. **Reputation monitoring**: Continuously monitor the reputation of your dedicated IPs.\
5. **Adaptive warmup**: Adapt the warmup process to your sending patterns.\
\
Often IP warmup is a highly manual process and requires great care if you don't want a deliverability degradation in the process. With this automatic warmup process, we handle that for you so you can simply focus on sending.\
\
<Note>\
  Because Managed Dedicated IP Pools are dynamically scaled, **we do not expose\
  the list of IPs** in your dedicated pool.\
</Note>\
\
## Requirements for a Dedicated IP\
\
Before we can provision a Dedicated IP, **we require** that:\
\
* Your domains are in the same region (Dedicated IPs are provisioned per region).\
* Your sending volume exceeds 500 emails sent per day.\
* You already have an active Transactional Scale or Marketing Pro subscription.\
* All domains you want added to the Dedicated IP are already verified on Resend.\
\
## How to request a Dedicated IP\
\
You can request a Dedicated IP by [chatting with support](https://resend.com/help).\
\
**We will request the following information**:\
\
* What types of emails are you sending?\
* How many emails are you sending per day and month on average?\
* Is your sending consistent every day, or do you send in bursts?\
* Which domains do you want included in your Dedicated IP?\
\
\
# How do I avoid conflicts with my MX records?\
Source: https://resend.com/docs/knowledge-base/how-do-i-avoid-conflicting-with-my-mx-records\
\
Learn how to avoid conflicts with your existing MX records when setting up a Resend domain.\
\
## What is an MX record?\
\
MX (Mail Exchanger) records specify where incoming mail should be delivered on behalf of a domain. Every MX value has a unique priority (also known as preference) value. The lower the number, the higher the priority.\
\
Resend requires that you setup an MX record on send.yourdomain.com to establish a return-path for bounce/complaint reports from Inbox Providers. We set this return path in the email headers of every email you send through Resend.\
\
## Won't this conflict with my existing Inbox Provider?\
\
Let's look at an example. Say you're using G Suite for your email. You'll have an MX record that looks something like this:\
\
```\
resend.com     MX    1 alt3.aspmx.l.google.com.\
```\
\
The records specifies that incoming mail to any address on the `@resend.com` domain should be delivered to the google servers.\
\
Now, let's say you want to use Resend to send emails from `@yourdomain.com`. You'll need to add an MX record for `send.yourdomain.com` that looks something like this:\
\
```\
send.yourdomain.com     MX    10 feedback-smtp.us-east-1.amazonses.com\
```\
\
Two things to note here:\
\
* **The MX record is for `send.yourdomain.com`, not `yourdomain.com`**. MX records only impact the subdomain they are associated to, so the Resend MX record will not affect your existing records on the root domain.\
* **The priority value is 10**. Though we suggest a priority of 10, this can be changed to lower or higher as needed to avoid conflicts.\
\
## Solving common conflicts\
\
<AccordionGroup>\
  <Accordion title="Conflicts with existing records">\
    If you already have a MX record set for `send.yourdomain.com`, you will need to remove it before adding the Resend MX record.\
\
    If you need to keep the existing record, you can add a subdomain to your domain (e.g. `sub.yourdomain.com`) which will move the Resend MX location to `send.sub.yourdomain.com`.\
  </Accordion>\
\
  <Accordion title="Conflicts with existing priority">\
    Each MX should have a unique priority value. We suggest using 10 for your MX record on `send.yourdomain.com`, but you can use a higher number if 10 is already in use.\
  </Accordion>\
</AccordionGroup>\
\
\
# How do I avoid Gmail's spam folder?\
Source: https://resend.com/docs/knowledge-base/how-do-i-avoid-gmails-spam-folder\
\
Learn how to improve inbox placement in Gmail.\
\
<Note>\
  This guide is adapted from Google's article to [Prevent mail from being\
  blocked or sent to\
  spam](https://support.google.com/mail/answer/81126?hl=en\\&vid=1-635789122382665739-3305764358\\&sjid=4594872399309427672-NA#thirdparty)\
</Note>\
\
## Authenticate Your Email\
\
All communication is built on trust, and email is no different. When you send an email, you want to be sure that the recipient (and Gmail) knows who you are and that you are a legitimate sender. Email authentication is a way to prove that an email is really from you. It also helps to prevent your email from being spoofed or forged.\
\
| Authentication                    | Requires Setup | Purpose                                                      |\
| --------------------------------- | -------------- | ------------------------------------------------------------ |\
| **SPF**                           | No             | Proves you are allowed to send from this domain              |\
| **DKIM**                          | No             | Proves your email originated from you                        |\
| [DMARC](/dashboard/domains/dmarc) | Yes            | Proves you own the domain and instructs how to handle spoofs |\
| [BIMI](/dashboard/domains/bimi)   | Yes            | Proves you are the brand you say you are                     |\
\
**SPF** and **DKIM** are baseline requirements for all sending which is why both are automatically setup when you verify your domain with Resend. [DMARC](/dashboard/domains/dmarc) and [BIMI](/dashboard/domains/bimi) are both additional authentication methods that can build trust and further improve inbox placement.\
\
**Action Items**\
\
1. [Setup DMARC](/dashboard/domains/dmarc) for your domain\
2. [Setup BIMI](/dashboard/domains/bimi) for your domain\
\
## Legitimize Your Domain\
\
Gmail is using many methods to identify who you are as a sender, and one way they do that is by looking at your domain. You should make sure that the domain you send with is the same domain where your website is hosted. If you send from `@example.com` but your website is hosted at `example.net`, Gmail won't be able to use your site to help legitimize you.\
\
You can regularly check if your domain is listed as unsafe with [Google Safe Browsing](https://transparencyreport.google.com/safe-browsing/search?hl=en) to make sure Google isn't classifying your domain as suspicious.\
\
**Action Items**\
\
1. Host your website at the domain that you send from (especially for new domains)\
2. Check if your domain is listed as unsafe with [Google Safe Browsing](https://transparencyreport.google.com/safe-browsing/search?hl=en)\
\
## Manage your Mailing List\
\
Gmail monitors your sending across all Gmail inboxes to see if recipients want to receive your emails. This is mainly measured by their engagement with your messages (opens, clicks, replies). If Gmail doesn't see this engagement, they will start to move your inbox placement towards promotional or even spam.\
\
It would seem like adding open and click tracking would be ideal to gather this information, but this has been seen to negatively impact your inbox placement. Instead, focus on sending to recipients who want to receive your emails.\
\
**Prevent sending to recipients who**:\
\
* Didn't ask to be sent to (opt-in)\
* Show no signs of engagement with your emails or product\
* Requested to be unsubscribed\
* Marked your emails as spam (complained)\
* Never received your email (bounced)\
\
**Action Items**\
\
1. Make it easy to opt-out to your emails (including the [Unsubscribe Headers](https://resend.com/docs/dashboard/emails/add-unsubscribe-to-transactional-emails))\
2. Use [Webhooks](/dashboard/webhooks/introduction) to remove bounced or complained recipients from your list\
3. Use [Gmail's Postmaster Tool](https://support.google.com/mail/answer/9981691?sjid=4594872399309427672-NA\\&visit_id=638259770782293948-1913697299\\&rd=1) to monitor your spam reports\
\
## Monitor Affiliate Marketers\
\
Affiliate marketing programs offer rewards to companies or individuals that send visitors to your website. However, spammers can take advantage of these programs. If your brand is associated with marketing spam, other messages sent by you might be marked as spam.\
\
We recommend you regularly monitor affiliates, and remove any affiliates that send spam.\
\
**Action Items**\
\
1. Monitor your affiliate marketers for any spam\
\
## Make Content People Want to Read\
\
Trust is not only built with the domain, but also in the message. Sending content that people want to read and that is not misleading will help build trust with Gmail.\
\
A few good rules for content:\
\
* Less is more (keep it simple and to the point)\
* Plain text over complex HTML\
* Links should be visible and match the sending domain\
* No content should be hidden or manipulative\
\
**Action Items**\
\
1. Reduce and simplify your email content\
2. Make sure your links are using your sending domain\
\
## Establish Sending Patterns\
\
This is especially true for new domains since Gmail doesn't have any history of trust. Sending a large volume of emails from a new domain will likely result in poor inbox placement. Instead, start small and build up your sending volume over time.\
\
A great way to start is by sending regular person-to-person email with your gmail account. These messages will have high engagement and built trust quickly, which will carry over when you start integrating with a sending service like Resend.\
\
It can also be very helpful to segment your sending by sending address to give Gmail more indication of what type of sending you are doing. This allows Gmail to place your emails in the correct inbox tab (Primary, Promotions, etc.).\
\
Some examples of helpful email addresses:\
\
* **Personal emails** should come from an address with a name like [marissa@domain.com](mailto:marissa@domain.com)\
* **Transactional emails** should come from an address like [notifications@domain.com](mailto:notifications@domain.com)\
* **Marketing emails** should come from an address like [updates@domain.com](mailto:updates@domain.com).\
\
**Action Items**\
\
1. Send emails from your gmail account before sending transactional\
2. Send transactional emails before sending marketing emails\
3. Choose dedicated sending addresses for each type of email\
\
## Summary\
\
Email deliverability is overwhelming. One way to simplify it is to think: **what would a phisher do?**\
\
**Then do the opposite!**\
\
Gmail's goal is to only show emails that their users want to see and malicious emails are at the very bottom of the list. Reverse engineer phishing sending habits and consider how you could prove to Gmail at each step that you clearly have no malicious intent.\
\
<Info>Anything we missed? [Let us know](https://resend.com/help).</Info>\
\
\
# How do I avoid Outlook's spam folder?\
Source: https://resend.com/docs/knowledge-base/how-do-i-avoid-outlooks-spam-folder\
\
Learn how to improve inbox placement in Outlook.\
\
<Note>\
  This guide is adapted from Microsoft's article to [Improve your spam\
  reputation](https://support.microsoft.com/en-us/office/sender-support-in-outlook-com-05875e8d-1950-4d89-a5c3-adc355d0d652)\
</Note>\
\
* **Add your sender name**. Set your `from` like this: `"Name <name.domain.com>"`.\
\
* **Engage with your own email**. Send an email to yourself, open it, and reply to it.\
\
* **Add yourself as a contact**. See how to add contacts in [Outlook.com](https://support.microsoft.com/en-us/office/create-view-and-edit-contacts-and-contact-lists-in-outlook-com-5b909158-036e-4820-92f7-2a27f57b9f01).\
\
* **Ask your recipients to add you in their contacts**. This can be done in [Outlook](https://support.microsoft.com/en-us/office/add-recipients-of-my-email-messages-to-the-safe-senders-list-be1baea0-beab-4a30-b968-9004332336ce) or [outlook.com](https://support.microsoft.com/en-us/office/safe-senders-in-outlook-com-470d4ee6-e3b6-402b-8cd9-a6f00eda7339).\
\
* **Don't blast to a BCC list**. Send separate emails if you are sending to a large number of recipients.\
\
* **Prevent over sending**. Limits are impacted on historical engagements and sending volumes, but you should be hesitent to send too many emails at once. If you think this is an issue, reduce the frequency or volume.\
\
* **Send to engaged recipients**. Don't keep sending if there is no engagement from your recipients. This is especially true if a recipient has requested to unsubscribe or an address is bouncing.\
\
* **Limit use of HTML**. Keep emails as close to plain text as possible.\
\
\
# How do I ensure sensitive data isn't stored on Resend?\
Source: https://resend.com/docs/knowledge-base/how-do-i-ensure-sensitive-data-isnt-stored-on-resend\
\
Information on how we can help you protect your customer's information.\
\
Resend can turn off message content storage for teams with additional compliance requirements. This is available to customers who meet the following criteria:\
\
1. The team has been a Resend Pro or Scale subscriber for at least 1 month.\
2. The team is sending from a domain with an active website.\
3. The team has sent over 3,000 emails with a \\< 5% bounce rate.\
\
This feature requires a \\$50/mo add-on. If your account meets these requirements and you would like this turned on, contact our support team for help.\
\
\
# How do I fix CORS issues?\
Source: https://resend.com/docs/knowledge-base/how-do-i-fix-cors-issues\
\
Information on recommended options to avoid CORS errors when sending emails.\
\
## Problem\
\
It's common for people to hit CORS (Cross-Origin Resource Sharing) issues when using the Resend API. This error typically shows as:\
\
```\
Access to XMLHttpRequest at 'https://api.resend.com/emails'\
from origin 'http://localhost:3000' has been blocked by CORS policy:\
Response to preflight request doesn't pass access control check:\
No 'Access-Control-Allow-Origin' header is present on the requested resource.\
```\
\
## Solution\
\
Usually CORS errors happens when you're sending emails from the **client-side**.\
\
We recommend you to send the emails on the **server-side** to not expose your API keys and avoid CORS issues.\
\
\
# How do I maximize deliverability for Supabase Auth emails?\
Source: https://resend.com/docs/knowledge-base/how-do-i-maximize-deliverability-for-supabase-auth-emails\
\
Everything you should do before you start sending authentication emails with Resend and Supabase.\
\
<Note>\
  If you haven't yet, [configure your own Supabase\
  integration](https://resend.com/settings/integrations)!\
</Note>\
\
Below are **five steps to improve the deliverability of your authentication emails**.\
\
Prefer watching a video? Check out our video walkthrough below.\
\
<div className="aspect-video">\
  <iframe width="100%" height="100%" src="https://www.youtube.com/embed/51vzcGEmjRI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen />\
</div>\
\
## 1. Setup a custom domain on Supabase\
\
By default, Supabase generates a `supabase.co` domain for your project, and uses that domain for the links in your authentication emails (e.g., verify email, reset password).\
\
Once you are ready to go live, though, it is important to setup a custom domain. The key benefit here is to align the domains used in your `from` address and the links in your emails. Especially for something as sensitive as email verification and magic links, **giving confidence to the inbox providers that the origin of the email and the links in the body are the same** can be very impactful.\
\
This changes your links from:\
\
```\
https://039357829384.supabase.co/auth/v1/\{code\}\
```\
\
To something like this:\
\
```\
https://auth.yourdomain.com/auth/v1/\{code\}\
```\
\
Supabase has a helpful guide for [Setting up a custom domain](https://supabase.com/docs/guides/platform/custom-domains).\
\
## 2. Setup a dedicated subdomain\
\
There are many benefits to using a subdomain vs your root domain for sending, one being that you can isolate the reputation of the subdomain from your root domain.\
\
For authentication emails, using a subdomain is particularly helpful because it is a way to **signal your intention to the inbox provider**. For example, if you use `auth.yourdomain.com` for your authentication emails, you are communicating to the inbox provider that all emails from this subdomain are related to sending authentication emails.\
\
This clarity is essential because it helps the inbox provider understand that this subdomain is not used for sending marketing emails, which are more likely to be marked as spam.\
\
<Note>\
  If you don't want a subdomain just for auth, you can also achieve this by\
  establishing one subdomain for all your transactional emails (e.g.,\
  `notifications.yourdomain.com`).\
</Note>\
\
To add a subdomain to Resend, you can [add it as a domain on the dashboard](https://resend.com/domains).\
\
<img alt="Create auth subdomain" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-create-auth-subdomain.png?maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=475e5103726ed1116a0608f0672f18a4" width="3024" height="1888" data-path="images/kb-create-auth-subdomain.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-create-auth-subdomain.png?w=280&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=0c23358b0577f5da0b94aeb0955b5984 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-create-auth-subdomain.png?w=560&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=4d1e3a24a902b3cab06c1efa5dc49857 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-create-auth-subdomain.png?w=840&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c7c136e1ef7ced07ac56151d39ae0528 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-create-auth-subdomain.png?w=1100&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=eeaa279fbfdf2e088939bb659f43a7fd 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-create-auth-subdomain.png?w=1650&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=09f43ea41adac9c0ada20da7045c422a 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-create-auth-subdomain.png?w=2500&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=79346c4e0591ac3a4a3a341bf289903e 2500w" data-optimize="true" data-opv="2" />\
\
## 3. Disable link and open tracking\
\
Link and open tracking can be great for marketing emails but not for transactional emails. This kind of **tracking can actually hurt your deliverability**. Open tracking embeds a 1x1 pixel image in the email, and link tracking rewrites the links in the email to point to Resend's servers first. Both types can be seen as suspicious by the inbox provider and hurt your deliverability.\
\
Also, Supabase has noted that link tracking is [known for corrupting verification links](https://supabase.com/docs/guides/platform/going-into-prod), making them unusable for your users.\
\
You can disable link and open tracking by clicking on your domain and disabling at the bottom.\
\
<img alt="Disable link and open tracking" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-disable-tracking.png?maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=3397918ee891050f08b413bcfe98664a" width="3024" height="1888" data-path="images/kb-disable-tracking.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-disable-tracking.png?w=280&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=9e070ef85c4bd9b026dba2136db53474 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-disable-tracking.png?w=560&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=7396c32dc5fd65ab2aff15fbffd3ec00 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-disable-tracking.png?w=840&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=577bbc868b3598aa4892dcb4ca8dbb2e 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-disable-tracking.png?w=1100&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=da708a93e42513b3ffccd7ac5db33df0 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-disable-tracking.png?w=1650&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=3c3bbac31bb4e87cc15cf2364472c8ab 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-disable-tracking.png?w=2500&maxW=3024&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=19d3a21e483f21d2c55ef906d122be07 2500w" data-optimize="true" data-opv="2" />\
\
## 4. Prepare for link scanners\
\
Some inbox providers or enterprise systems have email scanners that run a `GET` request on all links in the body of the email. This type of scan can be problematic since Supabase Auth links are single-use.\
\
To get around this problem, consider altering the email template to replace the original magic link with a link to a domain you control. The domain can present the user with a "Sign-in" button, which redirects the user to the original magic link URL when clicked.\
\
## 5. Setup DMARC\
\
Like our human relationships, email deliverability is built on trust. The more inboxes can trust your emails, your domain, and your sending, the more likely your emails will be delivered to the inbox. This makes [Email Authentication a critical pillar](https://resend.com/blog/email-authentication-a-developers-guide) in the journey to excellent deliverability.\
\
That is where DMARC comes in. As the industry standard for email authentication, **DMARC is a way to tell the inbox provider that you are who you say you are**. It is a way to signal to the inbox provider that you are a legitimate sender and that your emails should be delivered to the inbox.\
\
Following security best practices like DMARC will show your validity and authenticity.\
\
<img alt="DMARC policy details" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-dmarc.png?maxW=2980&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1c70891234a0e51f19e9eca407dfd32e" width="2980" height="2040" data-path="images/kb-dmarc.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-dmarc.png?w=280&maxW=2980&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d40a2e697aa3fceffc6110d58adf4408 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-dmarc.png?w=560&maxW=2980&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b798bc48e1b4993f6eebee95b32f31ae 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-dmarc.png?w=840&maxW=2980&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=8875f18588290d6feaf87286e425f536 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-dmarc.png?w=1100&maxW=2980&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ee25900edb9a24095ea63edb4e31f30b 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-dmarc.png?w=1650&maxW=2980&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=7f87bb048e6f4349e6f43ac54f247248 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-dmarc.png?w=2500&maxW=2980&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=7936dcdec9a7a3de56306ae385875424 2500w" data-optimize="true" data-opv="2" />\
\
You can use our [DMARC setup guide to get started](/dashboard/domains/dmarc).\
\
\
# How do I send with an avatar?\
Source: https://resend.com/docs/knowledge-base/how-do-i-send-with-an-avatar\
\
Learn how to show your avatar in the inbox of your recipients.\
\
[Recent studies](https://www.businesswire.com/news/home/20210720005361/en/Red-Sift-and-Entrust-Survey-Showing-a-Logo-Positively-Affects-Consumer-Interaction-With-Emails-Open-Rates-Buying-Behavior-Brand-Recall-and-Confidence) are showing meaningful benefits of displaying your logo in the inbox:\
\
* Increases brand recall by 18%.\
* Improves open rate by 21%.\
* Boosts purchase likelihood by 34%.\
* Reinforces confidence in email by 90%.\
\
<img src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/sender-avatar.png?maxW=1368&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=fa1a89dcce660b09ef962d0e64093d01" alt="Email with an avatar" width="1368" height="488" data-path="images/sender-avatar.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/sender-avatar.png?w=280&maxW=1368&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d70887eaa8af99907715a5efb39c87c2 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/sender-avatar.png?w=560&maxW=1368&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c41c145cbf7896a1358effc4889b5f5b 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/sender-avatar.png?w=840&maxW=1368&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=2ca994ff0735c342eafcd592a06e80e1 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/sender-avatar.png?w=1100&maxW=1368&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=2da378f819e11d42d71aff787b870b3f 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/sender-avatar.png?w=1650&maxW=1368&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c0f301e630f9ec81bb7aa165f41bb178 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/sender-avatar.png?w=2500&maxW=1368&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=f3ddf6ebac5c839fcda943dfd9134d37 2500w" data-optimize="true" data-opv="2" />\
\
## Gmail\
\
Follow these steps to add an avatar to your Gmail inbox:\
\
1. Go to your [Google Account Settings](https://myaccount.google.com/personal-info)\
2. Upload a profile picture\
\
Avatars in Gmail only display in the mobile app (including in push notifications) and inside opened emails on desktop.\
\
## Outlook\
\
Follow these steps to add an avatar to your Outlook inbox:\
\
1. Go to your [Outlook Profile Settings](https://account.microsoft.com/profile/)\
2. Upload a profile picture\
\
Avatars in Outlook only display in the mobile app and inside opened emails on desktop.\
\
## Yahoo\
\
Follow these steps to add an avatar to your Yahoo inbox:\
\
1. Go to your [Yahoo Account Setting](https://login.yahoo.com/account/personalinfo)\
2. Upload a profile picture\
\
Avatars in Yahoo only display in the mobile app and inside an opened email on desktop.\
\
## Apple Mail\
\
Apple Mail only shows avatars if recipients have added images to contacts. Alternatively, you can set up [Apple Branded Mail](/knowledge-base/how-do-i-set-set-up-apple-branded-mail), a proprietary Apple format that displays your logo as an avatar in the inbox of Apple Mail, or [set up BIMI](/dashboard/domains/bimi#what-is-bimi) with a Verified Mark Certificate (Apple Mail does not support CMC).\
\
## Using Gravatar\
\
Some inbox service providers or email clients (e.g. Thunderbird, Airmail, and Postbox) rely on [Gravatar](https://gravatar.com/) to display an image.\
\
You can set up a free Gravatar account, add your avatar, and verify your addresses you're sending from to that account to have your avatar displayed.\
\
## Limitations\
\
Almost every email provider has its own way of adding a profile picture to an inbox.\
\
This means **you can only**:\
\
1. Add your avatar to a real inbox, limiting it only to that provider\
2. Send mail from the same address that you set the avatar on\
\
The way around this is [BIMI (Brand Indicators for Message Identification)](/dashboard/domains/bimi). It is much more difficult to obtain, but supports by nearly all providers and allows you to send from any address on that domain.\
\
<Note>\
  Need assistance setting up BIMI? [We can help](https://resend.com/help).\
</Note>\
\
\
# How do I set up Apple Branded Mail?\
Source: https://resend.com/docs/knowledge-base/how-do-i-set-set-up-apple-branded-mail\
\
Learn how to implement Apple Branded Mail to display your logo in Apple Mail clients.\
\
## Prerequisites\
\
To get the most out of this guide, you will need to:\
\
* [Create an Apple Business Connect account](https://www.apple.com/business/connect/)\
* [Setup DMARC on your domain](/dashboard/domains/dmarc)\
* A company identification number for Apple to verify your company\
\
Prefer watching a video? Check out our video walkthrough below.\
\
<div className="aspect-video">\
  <iframe width="100%" height="100%" src="https://www.youtube.com/embed/zLDRvWVPqxk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen />\
</div>\
\
## What is Apple Branded Mail?\
\
Apple Branded Mail is a proprietary Apple format that displays your logo as an avatar in the inbox of Apple Mail. Displaying your logo can increase brand recognition and trust and improve engagement.\
\
There are a few benefits of Apple Branded mail over BIMI:\
\
* Since it's an Apple format, it does not require a certificate like [BIMI does](/dashboard/domains/bimi).\
* The image support is broader, supporting `.png`, `.heif`, and `.jpg` logos.\
\
Since Apple Branded Mail works only with Apple Mail on new iOS, iPadOS, and macOS versions, your logo will not show in other mail clients or older versions of Apple Mail.\
\
For this reason, we recommend following all possible methods for adding your logo to your emails, including Apple Branded Mail, [our general guide](/knowledge-base/how-do-i-send-with-an-avatar), and [BIMI](/dashboard/domains/bimi) if it fits your needs.\
\
## Implementing Apple Branded Mail\
\
### 1. Configure DMARC\
\
<Note>\
  If you haven't set up DMARC yet, follow our [DMARC Setup\
  Guide](/dashboard/domains/dmarc).\
</Note>\
\
To ensure your logo appears with Apple Branded Mail, set your DMARC policy to either `p=quarantine;` or `p=reject;`. This policy guarantees that your emails are authenticated and prevents others from spoofing your domain and sending emails with your logo.\
\
Here's an overview of the required parameters:\
\
| Parameter | Purpose    | Required Value                 |\
| --------- | ---------- | ------------------------------ |\
| `p`       | Policy     | `p=quarantine;` or `p=reject;` |\
| `pct`     | Percentage | `pct=100;`                     |\
\
Here is an example of an adequate DMARC record:\
\
```\
"v=DMARC1; p=quarantine; pct=100; rua=mailto:dmarcreports@example.com"\
```\
\
As we mention in our [DMARC Setup Guide](/dashboard/domains/dmarc), be sure to test your emails to make sure they are passing DMARC before changing your DMARC policy to `p=quarantine;` or `p=reject;`.\
\
### 2. Create an Apple Business Connect account\
\
Apple displays the logo you set in your Business Connect account. [Create an account](https://www.apple.com/business/connect/) if your company does not already have one. Make sure to use your company details when signing up.\
\
### 3. Add your company details\
\
Apple will prompt you to provide details like your company address and name.\
\
### 4. Add your brand details\
\
Once your company account is created, in Apple Business Connect, select the **Branded Mail** option in the left sidebar and provide details on your brand. Add details like the brand name and your brand website.\
\
<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-1.png?maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a969154b439c38b9cea4e98618ecdd74" alt="Add your brand details" width="3412" height="1884" data-path="images/abm-step-4-add-brand-details-1.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-1.png?w=280&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b8a08151e8e1b53145cd63070029d1d9 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-1.png?w=560&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8563f281b5c0879bc1f0a9635e86be2d 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-1.png?w=840&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=513421878e121c53ba398312b0923036 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-1.png?w=1100&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e89f8d94e7275663c5db58b15fa137bf 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-1.png?w=1650&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=2b418c6bd2bc1562488b0ccf3f1103ab 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-1.png?w=2500&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e6caf7fb9ac708fb28312672eda5a6a6 2500w" data-optimize="true" data-opv="2" />\
\
<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-2.png?maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e8c9f295c89ce1d9238142026d5e9c25" alt="Add your brand details" width="3412" height="1884" data-path="images/abm-step-4-add-brand-details-2.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-2.png?w=280&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5f90f4be90c6850d75cdd0f18da119bd 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-2.png?w=560&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=0f767ca59ae47b9ab2f283b88dc65cba 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-2.png?w=840&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e05b90853d6ccedaeb4c1f7204ee5273 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-2.png?w=1100&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=998068d90158b6ed0811d0895220d5e6 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-2.png?w=1650&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=cb4255c5905167b4949558fadd0cc188 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-2.png?w=2500&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=44ea52568573b69de0f28803f0d66e21 2500w" data-optimize="true" data-opv="2" />\
\
### 5. Add your logo\
\
Once you fill out the brand details, upload your logo. Apple requires the logo to be at least 1024 x 1024 px in a `.png`, `.heif`, or `.jpeg` format.\
\
<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-5-add-your-logo.png?maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=2ca573cbe4d5bcb7c1176a49d23ccff8" alt="Add your logo" width="3412" height="1884" data-path="images/abm-step-5-add-your-logo.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-5-add-your-logo.png?w=280&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=6f00d44950b45dc94d3f54cf0ba3e994 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-5-add-your-logo.png?w=560&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=94a886283c141eacf31fe2700b8f5817 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-5-add-your-logo.png?w=840&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=9b1bdc1887a3bb4f9e35aa7be917fd8c 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-5-add-your-logo.png?w=1100&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=6698cb8585155aee45474a3215355129 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-5-add-your-logo.png?w=1650&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=fb1d8641fc223a0c299bfc316e9a42ea 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-5-add-your-logo.png?w=2500&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=581f5a9a4bc2397283b72cfc3e5ad3b7 2500w" data-optimize="true" data-opv="2" />\
\
### 6. Add your domain\
\
Confirm the domains or email addresses where you want your brand logo to appear.\
\
You can register your logo for your root domain or a subdomain. If you don't set a specific logo for a subdomain, the root domain logo will automatically display for any email sent from your subdomains.\
\
### 7. Verify your company\
\
Apple requires details to confirm your company identity.\
\
If you're in the United States, provide a Federal Taxpayer Identification Number. Other countries will use a local equivalent for this step. Apple also asks that you add a DNS record to verify DNS access.\
\
### 8. Verify with Apple\
\
After you submit all your information, Apple will verify your details. This process may take up to seven business days.\
\
Once the logo is verified, Apple will send an email notification and note the verified status in Branded Mail. Your logo will start to display in compatible Apple Mail versions.\
\
<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-8-verify-with-apple.png?maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d2875e4c52b1057c388322b214dafcef" alt="Verified logo" width="3412" height="1884" data-path="images/abm-step-8-verify-with-apple.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-8-verify-with-apple.png?w=280&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=01e681ce6478e9e176b12a3d205585a6 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-8-verify-with-apple.png?w=560&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5182839eab18319a2448dad1b1ed8e55 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-8-verify-with-apple.png?w=840&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=2ff6f6d8f0f2e5eda7aa2a6f1bc2380d 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-8-verify-with-apple.png?w=1100&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=3b5149b845ef43a83cd63d757579d528 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-8-verify-with-apple.png?w=1650&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=08114507ede23d043b50fe479c4ba1c6 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-8-verify-with-apple.png?w=2500&maxW=3412&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=9d9e4dc045b0020f68d565946c0d2309 2500w" data-optimize="true" data-opv="2" />\
\
<Tip>\
  See Apple's documentation on [Apple Branded\
  Mail](https://support.apple.com/en-au/guide/apple-business-connect/abcb761b19d2/web)\
  for any detailed questions on adding your logo.\
</Tip>\
\
\
# How to Handle API Keys\
Source: https://resend.com/docs/knowledge-base/how-to-handle-api-keys\
\
Learn our suggested practices for handling API keys.\
\
API Keys are secret tokens used to authenticate your requests. They are unique to your account and should be kept confidential. You can create API keys in two ways:\
\
* [via the Resend Dashboard](/dashboard/api-keys/introduction)\
* [via the API](/api-reference/api-keys/create-api-key)\
\
<Info>\
  For more help creating, deleting, and managing API keys, see the [API Keys\
  documentation](/dashboard/api-keys/introduction).\
</Info>\
\
## Best Practices\
\
It's crucial you handle your API keys securely. Do not share your API key with others or expose it in the browser or other client-side code.\
\
Here are some general guidelines:\
\
* Store API keys in environment variables.\
* Never commit API keys to version control.\
* Never hard-code API keys in your code or share them publicly.\
* Rotate API keys regularly. If an API key hasn't been used in the last 30 days, consider deleting it to keep your account secure.\
\
<Info>\
  When you create an API key in Resend, you can view the key only once. This\
  practice helps encourage these best practices.\
</Info>\
\
## Example\
\
Many programming languages have built-in support for environment variables. Here's an example of how to store an API key in an environment variable in a Node.js application.\
\
<Steps>\
  <Step title="Create an environment variable">\
    Once you create the API key, you can store it in an environment variable in a `.env` file.\
\
    ```ts .env\
    RESEND_API_KEY = 're_xxxxxxxxx';\
    ```\
  </Step>\
\
  <Step title="Add the file to your gitignore">\
    Add the `.env` file to your `.gitignore` file to prevent it from being committed to version control. Many frameworks already add `.env` to the `.gitignore` file by default.\
\
    ```ts .gitignore\
    .env\
    ```\
  </Step>\
\
  <Step title="Use the environment variable in your code">\
    `ts const resend = new Resend(process.env.RESEND_API_KEY); `\
  </Step>\
</Steps>\
\
\
# Introduction\
Source: https://resend.com/docs/knowledge-base/introduction\
\
A collection of answers to frequently asked questions.\
\
<CardGroup cols=\{1\}>\
  <Card title="Can I receive emails with Resend?" href="/knowledge-base/how-can-i-receive-emails-with-resend">\
    Resend does not offer the functionality to receive email but there are a few\
    workarounds that could help.\
  </Card>\
\
  <Card title="How do Dedicated IPs Work?" href="/knowledge-base/how-do-dedicated-ips-work">\
    Learn how Dedicated IPs work and how to request them.\
  </Card>\
\
  <Card title="How do I avoid conflicts with my MX records?" href="/knowledge-base/how-do-i-avoid-conflicting-with-my-mx-records">\
    Learn how to avoid conflicts with your existing MX records when setting up a\
    Resend domain.\
  </Card>\
\
  <Card title="How do I avoid Gmail's spam folder?" href="/knowledge-base/how-do-i-avoid-gmails-spam-folder">\
    Learn how to improve inbox placement in Gmail.\
  </Card>\
\
  <Card title="How do I avoid Outlook's spam folder?" href="/knowledge-base/how-do-i-avoid-outlooks-spam-folder">\
    Learn how to improve inbox placement in Outlook.\
  </Card>\
\
  <Card title="How do I ensure sensitive data isn't stored on Resend?" href="/knowledge-base/how-do-i-ensure-sensitive-data-isnt-stored-on-resend">\
    Information on how we can help you protect your customer's information.\
  </Card>\
\
  <Card title="How do I fix CORS issues?" href="/knowledge-base/how-do-i-fix-cors-issues">\
    Information on recommended options to avoid CORS errors when sending emails.\
  </Card>\
\
  <Card title="How do I maximize deliverability for Supabase Auth emails?" href="/knowledge-base/how-do-i-maximize-deliverability-for-supabase-auth-emails">\
    Everything you should do before you start sending authentication emails with\
    Resend and Supabase.\
  </Card>\
\
  <Card title="How do I send with an avatar?" href="/knowledge-base/how-do-i-send-with-an-avatar">\
    Learn how to show your avatar in the inbox of your recipients.\
  </Card>\
\
  <Card title="Is it better to send emails from a subdomain or the root domain?" href="/knowledge-base/is-it-better-to-send-emails-from-a-subdomain-or-the-root-domain">\
    Discover why sending emails from a subdomain can be better than using a root\
    domain.\
  </Card>\
\
  <Card title="What if an email says delivered but the recipient hasn't received it?" href="/knowledge-base/what-if-an-email-says-delivered-but-the-recipient-has-not-received-it">\
    Learn the steps to take when an email is delivered, but the recipient does not\
    receive it.\
  </Card>\
\
  <Card title="What if my domain is not verifying?" href="/knowledge-base/what-if-my-domain-is-not-verifying">\
    Learn what steps to take when your domain doesn't seem to verifying.\
  </Card>\
\
  <Card title="What is Resend Pricing?" href="/knowledge-base/what-is-resend-pricing">\
    Learn more about Resend's pricing plans.\
  </Card>\
\
  <Card title="Why are my open rates not accurate?" href="/knowledge-base/why-are-my-open-rates-not-accurate">\
    Learn why your open rate statistics are not accurate and what you can do about\
    it.\
  </Card>\
\
  <Card title="How can I delete my Resend account?" href="/knowledge-base/how-can-i-delete-my-resend-account">\
    Learn how to permanently delete your Resend account and data.\
  </Card>\
\
  <Card title="Should I add an unsubscribe link to all of my emails sent with Resend?" href="/knowledge-base/should-i-add-an-unsubscribe-link">\
    Learn when to add unsubscribe links to your transactional and marketing\
    emails.\
  </Card>\
\
  <Card title="Why are my emails landing on the suppression list?" href="/knowledge-base/why-are-my-emails-landing-on-the-suppression-list">\
    Learn why your emails land on the suppression list, and how to remove them.\
  </Card>\
</CardGroup>\
\
\
# IONOS\
Source: https://resend.com/docs/knowledge-base/ionos\
\
Verify your domain on IONOS with Resend.\
\
<Snippet file="domain-guide-add-domain.mdx" />\
\
## Login to IONOS\
\
Login to your [IONOS account](https://my.ionos.com/domains):\
\
1. Choose your Domain from the `Domain` list.\
2. Select the `DNS` tab to get to the page to manage DNS records.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-domains.png?maxW=2956&auto=format&n=JHWt09hsc7E33HK2&q=85&s=fa91a51a6099d5bdb41f2c62e8e14f79" width="2956" height="1848" data-path="images/dashboard-domains-ionos-domains.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-domains.png?w=280&maxW=2956&auto=format&n=JHWt09hsc7E33HK2&q=85&s=708fb8eace275a95e872e17e0dc297af 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-domains.png?w=560&maxW=2956&auto=format&n=JHWt09hsc7E33HK2&q=85&s=0b41f3c3085cf76502eca24973231f39 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-domains.png?w=840&maxW=2956&auto=format&n=JHWt09hsc7E33HK2&q=85&s=c9a245b5641d935a263c3553c392efbc 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-domains.png?w=1100&maxW=2956&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e55233d5194bebce77e7a6e5d5ee1701 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-domains.png?w=1650&maxW=2956&auto=format&n=JHWt09hsc7E33HK2&q=85&s=66bd99da86c1f0f48594882f16b2fd01 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-domains.png?w=2500&maxW=2956&auto=format&n=JHWt09hsc7E33HK2&q=85&s=0b24fdc15ad1cb91298858f556cd2b33 2500w" data-optimize="true" data-opv="2" />\
\
## Add MX SPF Record\
\
Select \'93Add record\'94 on IONOS to copy and paste the values MX from Resend.\
\
1. On the `Add a DNS Record` page, select `MX`.\
2. Type `send` for the `Name` of the record.\
3. Copy the MX Value from Resend into the `Points to` field.\
4. Use the default `Priority` of `10`.\
5. Use the default TTL of `1 hour`.\
6. Select `Save`.\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a\
  subdomain).\
</Info>\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=acacffca22bae16101670444382c652a" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a2664c22179353b27efaee19ecda4001 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=77bb16631d89ad4503bad8e9e6370090 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=419f41c59437cdebbdb1422305d1ae1e 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3a547e3cc820b5d99260cc365f574fe5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=87787650757a99bff16ec7476f8c60f8 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3c3300b899e4ff5dd8d6de3144b98386 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-mx.png?maxW=2954&auto=format&n=JHWt09hsc7E33HK2&q=85&s=38851a9ca8d3e0c470c39ac5d59bade6" width="2954" height="1848" data-path="images/dashboard-domains-ionos-spf-mx.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-mx.png?w=280&maxW=2954&auto=format&n=JHWt09hsc7E33HK2&q=85&s=886ac559463ba2d38939d8d4ec30acc6 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-mx.png?w=560&maxW=2954&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e7a82fe3fdc576a99ce90f25029d029e 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-mx.png?w=840&maxW=2954&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d43ab03c8f2be719c852bf490dadf1a3 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-mx.png?w=1100&maxW=2954&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e33e65a71ec173cc7f7442fe1846a428 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-mx.png?w=1650&maxW=2954&auto=format&n=JHWt09hsc7E33HK2&q=85&s=54e85717f6ad100a4dcae5de7aa59a97 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-mx.png?w=2500&maxW=2954&auto=format&n=JHWt09hsc7E33HK2&q=85&s=26664d4178d4b0b478a850e29ff18603 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to IONOS:\
\
| IONOS     | Resend   | Example Value                           |\
| --------- | -------- | --------------------------------------- |\
| Type      | Type     | `MX Record`                             |\
| Name      | Name     | `send`                                  |\
| Points to | Value    | `feedback-smtp.us-east-1.amazonses.com` |\
| TTL       | -        | `1 hour`                                |\
| Priority  | Priority | `10`                                    |\
\
<Info>\
  Do not use the same priority for multiple records. If Priority `10` is already\
  in use on another record, try a number slightly higher like `11` or `12`.\
</Info>\
\
## Add TXT SPF Record\
\
In the same section, select \'93Add record\'94 again.\
\
1. On the `Add a DNS Record` page, select `TXT`.\
2. Type `send` for the `Host name` of the record.\
3. Copy the TXT Value Resend into the `TXT value` field.\
4. Use the default TTL of `1 hour`.\
5. Select `Save`.\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a\
  subdomain).\
</Info>\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cb9073c5e7cb71d2aa844592cf44678f" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a6abe0e9c26365d9e361ab1950614b2 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e901d2d73db3f5863caf88f5eb17072c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a723ecf3902095de4fda741d9af4670c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d666407aab9c83c70ae4498b5ca3f919 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd4153e8857db380db68b0243a191ba2 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=321ba5f3c09c53a611f7790aa773a3bc 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-txt.png?maxW=2956&auto=format&n=JHWt09hsc7E33HK2&q=85&s=ae2d093ddad5af0932721009ac25067f" width="2956" height="1848" data-path="images/dashboard-domains-ionos-spf-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-txt.png?w=280&maxW=2956&auto=format&n=JHWt09hsc7E33HK2&q=85&s=13cedc927dabe9ad35e305da25415a96 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-txt.png?w=560&maxW=2956&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a42908b80b6aa261a9189f5dbc3a1ab6 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-txt.png?w=840&maxW=2956&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8db112f5cea538e2b437800e5cf26da9 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-txt.png?w=1100&maxW=2956&auto=format&n=JHWt09hsc7E33HK2&q=85&s=1858687c48f34626df19988534155802 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-txt.png?w=1650&maxW=2956&auto=format&n=JHWt09hsc7E33HK2&q=85&s=7ff6b1dbffe0b1abeb93ee6465c459a1 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-txt.png?w=2500&maxW=2956&auto=format&n=JHWt09hsc7E33HK2&q=85&s=147c4e31150b5626cbb34d5f5713c003 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to IONOS:\
\
| IONOS     | Resend | Example Value                         |\
| --------- | ------ | ------------------------------------- |\
| Type      | Type   | `TXT Record`                          |\
| Host name | Name   | `send`                                |\
| TXT value | Value  | `"v=spf1 include:amazonses.com ~all"` |\
| TTL       | -      | `1 hour`                              |\
\
## Add TXT DKIM Records\
\
In the same section, select \'93Add record\'94 again.\
\
1. On the `Add a DNS Record` page, select `TXT`.\
2. Type `resend._domainkey` for the `Host name` of the record.\
3. Copy the record value from Resend into the `TXT value` field.\
4. Use the default TTL of `1 hour`.\
5. Select `Save`.\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or\
  `resend._domainkey.subdomain` if you're using a subdomain).\
</Info>\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=664211d386b509e71a2a1ed05cefee73" width="2992" height="1868" data-path="images/dashboard-domains-resend-dkim.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e67460142f3afb173aaf6e0b7de5c91e 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=967d173c52b6d8f4f4cb084c018baef4 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a3a6c52abfac2a1e868371804da1a2dc 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8a62a7acf499f5ec75a70f87fa3a274a 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a9eadede29682ebd7cfaab3bf5300d64 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2fb4c83336c19d0dbe91569a022386e9 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-dkim-txt.png?maxW=2955&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2e8f5bcd1b2f8f00d2d35a0f7d0e7e4b" width="2955" height="1848" data-path="images/dashboard-domains-ionos-dkim-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-dkim-txt.png?w=280&maxW=2955&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8e58ae8ed67e0e5fb1b1b2135fc133cd 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-dkim-txt.png?w=560&maxW=2955&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6d1eda098b615759fb5dfc0c1cb661ed 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-dkim-txt.png?w=840&maxW=2955&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8ad9242c2f4b80a32ceb0455657634c8 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-dkim-txt.png?w=1100&maxW=2955&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9fef45387253a554ff90c0e410546fcd 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-dkim-txt.png?w=1650&maxW=2955&auto=format&n=JHWt09hsc7E33HK2&q=85&s=853ace2560e67136d23624ba6c60ba4c 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-dkim-txt.png?w=2500&maxW=2955&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cfc10e8be1a368287aef489f7ab79184 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to IONOS:\
\
| IONOS     | Resend | Example Value                                      |\
| --------- | ------ | -------------------------------------------------- |\
| Type      | Type   | `TXT Record`                                       |\
| Host name | Name   | `send`                                             |\
| TXT value | Value  | `p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB` |\
| TTL       | -      | `1 hour`                                           |\
\
## Complete Verification\
\
Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take a few hours to complete the verification process (often much faster).\
\
## Troubleshooting\
\
If your domain is not successfully verified, these are some common troubleshooting methods.\
\
<AccordionGroup>\
  <Accordion title="Resend shows my domain verification failed.">\
    Review the records you added to IONOS to rule out copy and paste errors.\
  </Accordion>\
\
  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">\
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).\
  </Accordion>\
</AccordionGroup>\
\
\
# Is it better to send emails from a subdomain or the root domain?\
Source: https://resend.com/docs/knowledge-base/is-it-better-to-send-emails-from-a-subdomain-or-the-root-domain\
\
Discover why sending emails from a subdomain can be better than using a root domain.\
\
We recommend sending emails from a subdomain (`notifications.acme.com`) instead of your root/apex domain (`acme.com`).\
\
There are **two main goals you should achieve with your domain setup**:\
\
* Reputation Isolation\
* Sending Purpose Transparency\
\
## Reputation Isolation\
\
Things happen. Maybe someone decides to DDOS your signup page and you get stuck sending tens of thousands of bounced verification emails to burner addresses. Or maybe a cold outreach campaign gets out of hand and your sending gets pegged as spam.\
\
Whatever it is, you want to be consistently hedging your reputation. One way to do this is by not using your root domain. This allows you to quarantine a compromised subdomain if needed. If your root domain ends up with a jeopardized reputation, it can be a long road to recovery.\
\
## Sending Purpose Transparency\
\
All of us want all of our emails to go right to the top of the priority folder of the inbox, but the reality is, not all of our email should. A password reset email should have higher priority than a monthly product update. Inbox providers like Outlook and Gmail are constantly trying to triage incoming mail to put only the most important stuff in that priority spot, and move the rest towards Promotional or even Spam.\
\
By segmenting your sending purposes by subdomain, you are giving Inbox Providers clear indication of how they should place your emails, which will build trust and confidence.\
\
## Avoid "Lookalike" Domains\
\
Never use domains that look like your main brand but aren\'92t actually your main brand. These brand-adjacent domains like `getacme-mail.com` or `acme-alerts.com` can appear suspicious to spam filters and confusing to your recipients. Inbox providers may flag them as phishing or spoofing attempts, and your users are more likely to ignore, delete, or even report the emails as spam.\
\
If you\'92re launching a new project or sending for a different purpose, again use a subdomain of your main domain. Sticking with clear, consistent subdomains helps reinforce your brand identity and builds trust with inbox providers and recipients alike.\
\
<Note>\
  We cover this in depth in our [deliverability\
  guide](/knowledge-base/how-do-i-avoid-gmails-spam-folder#establish-sending-patterns).\
</Note>\
\
\
# Send emails with Leap and Resend\
Source: https://resend.com/docs/knowledge-base/leap-new-integration\
\
Learn how to add the Resend integration to your Leap.new project.\
\
[Leap](https://leap.new) is a platform for building full-stack web and mobile apps via chat.\
\
## 1. Ask Leap to add Resend\
\
You can add Resend in a Leap project by asking the chat to add email sending with Resend.\
\
**Example prompt**\
\
```\
When someone fills out the contact form, send an email using Resend.\
```\
\
## 2. Add your Resend API key\
\
To use Resend with Leap, you'll need to add a Resend API key, which you can create in the [Resend Dashboard](https://resend.com/api-keys). Do not share your API key with others or expose it in the browser or other client-side code.\
\
Leap will prompt you to set a secret value on the Infrastructure page. Paste your key value and click **Update secret**.\
\
<img src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/leap-new-integration.png?maxW=3360&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=8ac89ca2d37c1b14b7d0e58f955990f0" alt="adding the Resend integration to a leap.new chat" width="3360" height="2100" data-path="images/leap-new-integration.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/leap-new-integration.png?w=280&maxW=3360&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=7aee4f2ee6aa745f1c78a0ca8dd36f6b 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/leap-new-integration.png?w=560&maxW=3360&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=525f613973e9a976e796820f3ae3ec19 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/leap-new-integration.png?w=840&maxW=3360&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=91d358bb95b44ab32b172670516c368d 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/leap-new-integration.png?w=1100&maxW=3360&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=2b14ff55fef215a2ff384b93bc61a220 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/leap-new-integration.png?w=1650&maxW=3360&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c568bf58d024d83c643aa7376d07e4e1 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/leap-new-integration.png?w=2500&maxW=3360&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=9ccaa12578e68652eee0206343b14517 2500w" data-optimize="true" data-opv="2" />\
\
<Info>\
  Learn more about the Resend integration in the [Leap\
  documentation](https://docs.leap.new/integrations/resend).\
</Info>\
\
## 3. Add a custom domain to your Resend account\
\
By default, you can only send emails to your own email address.\
\
To send emails to other email addresses:\
\
1. Add a [custom domain to your Resend account](https://resend.com/domains).\
2. Add the custom domain to the `from` field in the `resend` function in Leap (or ask the chat to update these fields).\
\
Get more help adding a custom domain in [Resend's documentation](/dashboard/domains/introduction).\
\
\
# Send emails with Lovable and Resend\
Source: https://resend.com/docs/knowledge-base/lovable-integration\
\
Learn how to add the Resend integration to your Lovable project.\
\
[Lovable](https://lovable.dev) is a platform for building web sites, tools, apps, and projects via chat. You can add Resend in a Lovable project by asking the chat to add email sending with Resend.\
\
If you prefer to watch a video, check out our video walkthrough below.\
\
<iframe width="100%" class="aspect-video" src="https://www.youtube.com/embed/0gw693uZt0w" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen />\
\
## 1. Add your Resend API key\
\
To use Resend with Lovable, you'll need to add a Resend API key, which you can create in the [Resend Dashboard](https://resend.com/api-keys). Do not share your API key with others or expose it in the browser or other client-side code.\
\
Lovable may integrate Resend in a few different ways:\
\
* Use the Supabase integration to store the API key **(highly recommended)**\
* Ask users to provide their own API key\
* Add the API key directly in the code\
\
You may need to prompt Lovable to store the API key for Resend using Supabase. Clicking **Add API key** will open a modal where you can add the API key.\
\
<img src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/lovable-integration.png?maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=dd0c0ca29cd291a7356a476d830e3202" alt="adding the Resend integration to a Lovable chat" width="2992" height="1868" data-path="images/lovable-integration.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/lovable-integration.png?w=280&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=0009caa7d8a1f9d9089374b69dbbbcc4 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/lovable-integration.png?w=560&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=7bf3829a5f6782c7e2e212c3e131ea49 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/lovable-integration.png?w=840&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d776181fc5d5af5d5f56d4f856ed180c 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/lovable-integration.png?w=1100&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=aeef146125f9927d9d3d82f06d5e065a 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/lovable-integration.png?w=1650&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=0582fdcbbff0e4ce0932c9ff715532a2 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/lovable-integration.png?w=2500&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=e43549aee863f16dea83ca951cbd6f2f 2500w" data-optimize="true" data-opv="2" />\
\
<Info>\
  At the time of writing, Lovable does not securely handle API keys\
  independently. Instead, it uses the [Supabase integration to store\
  secrets](https://docs.lovable.dev/integrations/supabase#storing-secrets-api-keys-%26-config).\
</Info>\
\
## 2. Add a custom domain to your Resend account\
\
By default, you can only send emails to your own email address.\
\
To send emails to other email addresses:\
\
1. Add a [custom domain to your Resend account](https://resend.com/domains).\
2. Add the custom domain to the `from` field in the `resend` function in Lovable (or ask the chat to update these fields).\
\
Get more help adding a custom domain in [Resend's documentation](/dashboard/domains/introduction).\
\
\
# MCP Server\
Source: https://resend.com/docs/knowledge-base/mcp-server\
\
Learn how to use the MCP Server to send emails.\
\
## What is an MCP Server?\
\
MCP is an open protocol that standardizes how applications provide context to LLMs. Among other benefits, it provides LLMs tools to act on your behalf.\
\
If you prefer to watch a video, check out our video walkthrough below.\
\
<iframe width="100%" class="aspect-video" src="https://www.youtube.com/embed/5QHOhvT-AFg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen />\
\
## What can Resend's MCP Server do?\
\
Currently, Resend's MCP Server is a simple server you must build locally that can send emails using Resend's API on your behalf.\
\
* Send plain text and HTML emails\
* Schedule emails for future delivery\
* Add CC and BCC recipients\
* Configure reply-to addresses\
* Customizable sender email (requires verification)\
\
As an example, you could use this to run local scripts, chat with Claude, or process data and send the results to yourself or your team.\
\
<video autoPlay muted loop playsInline className="w-full" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server.mp4?auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=19f412238a5e3e809be26066120f8c22" data-path="images/mcp-server.mp4" />\
\
## How to use Resend's MCP Server\
\
Build the project locally to use this MCP server to use it in a [supported MCP client](#mcp-client-integrations).\
\
<Steps>\
  <Step title="Clone this project locally.">\
    ```bash\
    git clone https://github.com/resend/mcp-send-email.git\
    ```\
  </Step>\
\
  <Step title="Build the project">\
    ```\
    npm install\
    npm run build\
    ```\
  </Step>\
\
  <Step title="Setup Resend">\
    1. [Create an API Key](https://resend.com/api-keys): copy this key to your clipboard\
    2. [Verify your own domain](https://resend.com/domains): to send to email addresses other than your own\
  </Step>\
</Steps>\
\
## MCP Client Integrations\
\
With the MCP server built, you can now add it to a supported MCP client.\
\
### Cursor\
\
<Steps>\
  <Step title="Open Cursor Settings">\
    Open the command palette (`cmd`+`shift`+`p` on macOS or `ctrl`+`shift`+`p` on Windows) and choose **Cursor Settings**.\
  </Step>\
\
  <Step title="Add the MCP server">\
    Select **MCP** from the left sidebar and click **Add new global MCP server** and add the following config:\
\
    ```json\
    \{\
      "mcpServers": \{\
        "resend": \{\
          "type": "command",\
          "command": "node ABSOLUTE_PATH_TO_MCP_SEND_EMAIL_PROJECT/build/index.js --key=YOUR_RESEND_API_KEY"\
        \}\
      \}\
    \}\
    ```\
\
    You can get the absolute path to your build script by right-clicking on the `/build/index.js` file in Cursor and selecting `Copy Path`.\
\
    **Possible arguments**\
\
    * `--key`: Your Resend API key (required)\
    * `--sender`: Your sender email address from a verified domain (optional)\
    * `--reply-to`: Your reply-to email address (optional)\
\
    <Info>\
      If you don't provide a sender email address, the MCP server will ask you to\
      provide one each time you call the tool.\
    </Info>\
\
    Adding the MCP server to Cursor's global settings will let you send emails from any project on your machine using Cursor's Agent mode.\
  </Step>\
\
  <Step title="Test the sending">\
    Test sending emails by going to `email.md` in the cloned project.\
\
    * Replace the to: email address with your own\
    * Select all text in `email.md`, and press `cmd+l`\
    * Tell cursor to "send this as an email" in the chat (make sure cursor is in Agent mode by selecting "Agent" on lower left side dropdown).\
\
    <img width="541" alt="Cursor chat with email.md file selected and Agent mode enabled" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-1.png?maxW=882&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=7c7e7c5f1cb9ac9c7d3996518fc38d34" width="882" height="376" data-path="images/mcp-server-1.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-1.png?w=280&maxW=882&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=3dc59e576d25ca7124f5614a3dac934c 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-1.png?w=560&maxW=882&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c5f73f93760360a6413d6cc88e7b9390 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-1.png?w=840&maxW=882&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=9d042d614c6b1328de3764508ad1efc1 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-1.png?w=1100&maxW=882&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=fc115edc1b21bee25579d56b546fa934 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-1.png?w=1650&maxW=882&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c04e9b4d779dfd27d095c51271844b00 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-1.png?w=2500&maxW=882&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=a7d40a94d0a2833ed12634e40f99008d 2500w" data-optimize="true" data-opv="2" />\
  </Step>\
</Steps>\
\
### Claude Desktop\
\
<Steps>\
  <Step title="Open Claude Desktop settings">\
    Open Claude Desktop settings and navigate to the "Developer" tab. Click `Edit Config`.\
  </Step>\
\
  <Step title="Add the MCP server">\
    Add the following config:\
\
    ```json\
    \{\
      "mcpServers": \{\
        "resend": \{\
          "command": "node",\
          "args": ["ABSOLUTE_PATH_TO_MCP_SEND_EMAIL_PROJECT/build/index.js"],\
          "env": \{\
            "RESEND_API_KEY": "YOUR_RESEND_API_KEY"\
          \}\
        \}\
      \}\
    \}\
    ```\
\
    You can get the absolute path to your build script by right-clicking on the `/build/index.js` file in your IDE and selecting `Copy Path`.\
\
    **Possible environment variables**\
\
    * `RESEND_API_KEY`: Your Resend API key (required)\
    * `SENDER_EMAIL_ADDRESS`: Your sender email address from a verified domain (optional)\
    * `REPLY_TO_EMAIL_ADDRESS`: Your reply-to email address (optional)\
\
    <Info>\
      If you don't provide a sender email address, the MCP server will ask you to\
      provide one each time you call the tool.\
    </Info>\
  </Step>\
\
  <Step title="Test the server">\
    Close and reopen Claude Desktop. Verify that the `resend` tool is available in the Claude developer settings.\
\
    <img alt="Claude Desktop developer settings with Resend MCP server showing" width="541" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-2.png?maxW=1584&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ce36c12b89ddb9605e80c4fcfb181445" width="1584" height="1120" data-path="images/mcp-server-2.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-2.png?w=280&maxW=1584&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=92692324a977659525a6269d3a55da39 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-2.png?w=560&maxW=1584&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d70e43be3c0779bf639e38f929bc9832 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-2.png?w=840&maxW=1584&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ec93a1ee12a183f8754ea1f1ff49c566 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-2.png?w=1100&maxW=1584&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=874acf83cb2bd250b3fb443c6f826b34 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-2.png?w=1650&maxW=1584&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=8a8b9c39ad4688e685764fa9027399de 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-2.png?w=2500&maxW=1584&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=4bae6e7348d5debac7aa47d5e28bc21b 2500w" data-optimize="true" data-opv="2" />\
\
    Chat with Claude and tell it to send you an email using the `resend` tool.\
  </Step>\
</Steps>\
\
\
# Namecheap\
Source: https://resend.com/docs/knowledge-base/namecheap\
\
Verify your domain on Namecheap with Resend.\
\
<Snippet file="domain-guide-add-domain.mdx" />\
\
## Login to Namecheap\
\
Then, login to your [Namecheap account](https://ap.www.namecheap.com), and go to the `Advanced DNS` page for the domain you want to verify.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-main.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=0ac9e3860f0dfa1d42f5e1e4d2816572" width="3024" height="1888" data-path="images/dashboard-domains-namecheap-main.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-main.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e82c59573588831d0a5ebba787bbb407 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-main.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e2bddd515cc38e20af1c22d28f20f0e9 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-main.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=0914b56bfaad2cc4491e06c4bf113ecf 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-main.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4bc8f8b7e67b8b099952f713f912096e 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-main.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=0f472e7ace0c7fd18591295de1ff30c9 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-main.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e00f037da9b66964f27ad84ea1819536 2500w" data-optimize="true" data-opv="2" />\
\
## Add MX SPF Record\
\
<Warning>\
  If you are changing the MX configuration from `Gmail` to `Custom MX`, you need\
  to [setup new MX records for\
  Gmail](https://support.google.com/a/answer/174125). If you don't setup new\
  records, receiving mail in your gmail inboxes will stop.\
</Warning>\
\
Under the `Mail Settings` section, click the dropdown and select `Custom MX`:\
\
1. Type `send` for the `Host` of the record.\
2. Copy the MX Value from Resend into the `Value` field.\
3. Use the `Automatic` TTL.\
4. Select `Save all changes`.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=acacffca22bae16101670444382c652a" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a2664c22179353b27efaee19ecda4001 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=77bb16631d89ad4503bad8e9e6370090 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=419f41c59437cdebbdb1422305d1ae1e 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3a547e3cc820b5d99260cc365f574fe5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=87787650757a99bff16ec7476f8c60f8 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3c3300b899e4ff5dd8d6de3144b98386 2500w" data-optimize="true" data-opv="2" />\
\
<br />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-mx.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=ddede2bf35ac0201650d8cbc424d6462" width="3024" height="1888" data-path="images/dashboard-domains-namecheap-spf-mx.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-mx.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=01552a5f77973b53c1fb3aad68ecb86b 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-mx.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=217b69273d3dd3215124a3b5c0293cdd 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-mx.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=360c0378d8b245e7ef40258e47010411 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-mx.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=21ee731a7ce418225db68df51fdb1c97 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-mx.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9a69ee73887b8bb586daea6ca9ab2be6 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-mx.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=08be03ceba701771e9cabd9c4d1ec539 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Namecheap:\
\
| Namecheap | Resend   | Example Value                           |\
| --------- | -------- | --------------------------------------- |\
| Type      | Type     | `MX Record`                             |\
| Host      | Name     | `send`                                  |\
| TTL       | -        | `Automatic`                             |\
| Value     | Value    | `feedback-smtp.us-east-1.amazonses.com` |\
| -         | Priority | `10`                                    |\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a\
  subdomain).\
</Info>\
\
<Info>\
  Namecheap does not label the `priority` column. It is the empty column after\
  `Value`. Do not use the same priority for multiple records. If Priority `10`\
  is already in use, try a number slightly higher like `11` or `12`.\
</Info>\
\
## Add TXT SPF Record\
\
Under the `Host Records` section, click `Add New Record`:\
\
1. Set the `Type` to `TXT Record`.\
2. Enter `send` into the `Host` field.\
3. Copy the TXT Value from Resend into the `Value` field.\
4. Use the `Automatic` TTL.\
5. Select `Save all changes`.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cb9073c5e7cb71d2aa844592cf44678f" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a6abe0e9c26365d9e361ab1950614b2 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e901d2d73db3f5863caf88f5eb17072c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a723ecf3902095de4fda741d9af4670c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d666407aab9c83c70ae4498b5ca3f919 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd4153e8857db380db68b0243a191ba2 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=321ba5f3c09c53a611f7790aa773a3bc 2500w" data-optimize="true" data-opv="2" />\
\
<br />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-txt.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9f97ed6a91a08b984ac685a3534bead1" width="3024" height="1888" data-path="images/dashboard-domains-namecheap-spf-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-txt.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8b1d3efac5903d1b3c3d4d5e81da3800 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-txt.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e2aa724e13eb96feb3c9e0052c0c130f 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-txt.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=edb79ba52215446b4ce33bc25f58b26d 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-txt.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=67fc4c377c36b4fbbb51ab0605230663 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-txt.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cad946701404972d405090484375df94 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-txt.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=c92961a5cb59dcc3bd5d119c4c9422bc 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Namecheap:\
\
| Namecheap | Resend | Example Value                         |\
| --------- | ------ | ------------------------------------- |\
| Type      | Type   | `TXT Record`                          |\
| Host      | Name   | `send`                                |\
| TTL       | -      | `Automatic`                           |\
| Value     | Value  | `"v=spf1 include:amazonses.com ~all"` |\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a\
  subdomain).\
</Info>\
\
## Add TXT DKIM Records\
\
In that same `Host Records` section, click `Add New Record`.\
\
1. Set the `Type` to `TXT Record`.\
2. Enter `resend._domainkey` into the `Host` field.\
3. Copy the TXT Value from Resend into the `Value` field.\
4. Use the `Automatic` TTL.\
5. Select `Save all changes`.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=664211d386b509e71a2a1ed05cefee73" width="2992" height="1868" data-path="images/dashboard-domains-resend-dkim.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e67460142f3afb173aaf6e0b7de5c91e 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=967d173c52b6d8f4f4cb084c018baef4 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a3a6c52abfac2a1e868371804da1a2dc 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8a62a7acf499f5ec75a70f87fa3a274a 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a9eadede29682ebd7cfaab3bf5300d64 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2fb4c83336c19d0dbe91569a022386e9 2500w" data-optimize="true" data-opv="2" />\
\
<br />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-dkim-txt.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=1f79ebff23f90836c885dee55188ba80" width="3024" height="1888" data-path="images/dashboard-domains-namecheap-dkim-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-dkim-txt.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=275838574cef57786f91eb845e6ca247 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-dkim-txt.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4e32cd43799341dcf77718ee377a96cb 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-dkim-txt.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8996edba78fdb9ab552491ff46f48c17 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-dkim-txt.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=7ce2d817cb8be1d84427a82f44a5719c 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-dkim-txt.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=386b423f56610dab0d9f79be326d624e 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-dkim-txt.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=aafe291a20b5ae85a106b6bfd68af87e 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Namecheap:\
\
| Namecheap | Resend | Example Value                                      |\
| --------- | ------ | -------------------------------------------------- |\
| Type      | Type   | `TXT Record`                                       |\
| Host      | Name   | `resend._domainkey`                                |\
| TTL       | -      | `Automatic`                                        |\
| Value     | Value  | `p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB` |\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or\
  `resend._domainkey.subdomain` if you're using a subdomain).\
</Info>\
\
## Complete Verification\
\
Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take up to 72 hours to complete the verification process (often much faster).\
\
## Troubleshooting\
\
If your domain is not successfully verified, these are some common troubleshooting methods.\
\
<AccordionGroup>\
  <Accordion title="Resend shows my domain verification failed.">\
    Review the records you added to Namecheap to rule out copy and paste errors.\
  </Accordion>\
\
  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">\
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).\
  </Accordion>\
</AccordionGroup>\
\
\
# Porkbun\
Source: https://resend.com/docs/knowledge-base/porkbun\
\
Verify your domain on Porkbun with Resend.\
\
<Snippet file="domain-guide-add-domain.mdx" />\
\
## Login to Porkbun\
\
Login to your [Porkbun account](https://porkbun.com/account/domainsSpeedy):\
\
1. Select the `DNS` option under your domain to manage DNS records.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-domains.png?maxW=2903&auto=format&n=JHWt09hsc7E33HK2&q=85&s=fee4989cdc885bba57204ae2f5d284b8" width="2903" height="1785" data-path="images/dashboard-domains-porkbun-domains.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-domains.png?w=280&maxW=2903&auto=format&n=JHWt09hsc7E33HK2&q=85&s=89a45b36259fb826caa6f78d2ef4f415 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-domains.png?w=560&maxW=2903&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e017127b971443c17e2b36ef3caee032 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-domains.png?w=840&maxW=2903&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd2c06f4577d1124e6f9e8d45106ec0b 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-domains.png?w=1100&maxW=2903&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d8e3347a6f4d7c54e23139064180966e 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-domains.png?w=1650&maxW=2903&auto=format&n=JHWt09hsc7E33HK2&q=85&s=62664ff2c487decd97a832531af6f346 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-domains.png?w=2500&maxW=2903&auto=format&n=JHWt09hsc7E33HK2&q=85&s=db0ca5c451e8b04a4f9addd622eddf1d 2500w" data-optimize="true" data-opv="2" />\
\
## Add MX SPF Record\
\
In the `DNS` section on Porkbun copy and paste the values MX from Resend:\
\
1. On the `Type` page, choose `MX`.\
2. Type `send` for the `Host` of the record.\
3. Copy the MX Value from Resend into the `Answer / Value` field.\
4. Use the default TTL of `600`.\
5. In the `Priority` field enter `10`.\
6. Select `Add`.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=acacffca22bae16101670444382c652a" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a2664c22179353b27efaee19ecda4001 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=77bb16631d89ad4503bad8e9e6370090 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=419f41c59437cdebbdb1422305d1ae1e 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3a547e3cc820b5d99260cc365f574fe5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=87787650757a99bff16ec7476f8c60f8 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3c3300b899e4ff5dd8d6de3144b98386 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-mx.png?maxW=2897&auto=format&n=JHWt09hsc7E33HK2&q=85&s=03c463267dc64c4c3f6a61e3ffd24553" width="2897" height="1767" data-path="images/dashboard-domains-porkbun-spf-mx.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-mx.png?w=280&maxW=2897&auto=format&n=JHWt09hsc7E33HK2&q=85&s=61c327702b689e86b7d30622a2c6984e 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-mx.png?w=560&maxW=2897&auto=format&n=JHWt09hsc7E33HK2&q=85&s=68cf743d7a6501b076c52a522c756fb0 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-mx.png?w=840&maxW=2897&auto=format&n=JHWt09hsc7E33HK2&q=85&s=863b31ace9d9cca24864d91555e680ed 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-mx.png?w=1100&maxW=2897&auto=format&n=JHWt09hsc7E33HK2&q=85&s=999df0cb725c403a753ebfa5cd094a84 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-mx.png?w=1650&maxW=2897&auto=format&n=JHWt09hsc7E33HK2&q=85&s=28f3b951cf3b2fc25496d9b6e6dfc030 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-mx.png?w=2500&maxW=2897&auto=format&n=JHWt09hsc7E33HK2&q=85&s=496b0e86fd02c255a2876c16b3aba3b6 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Porkbun:\
\
| Porkbun        | Resend   | Example Value                           |\
| -------------- | -------- | --------------------------------------- |\
| Type           | Type     | `MX Record`                             |\
| Host           | Name     | `send`                                  |\
| Answer / Value | Value    | `feedback-smtp.us-east-1.amazonses.com` |\
| TTL            | -        | `600`                                   |\
| Priority       | Priority | `10`                                    |\
\
<Info>\
  Do not use the same priority for multiple records. If Priority `10` is already\
  in use on another record, try a number slightly higher like `11` or `12`.\
</Info>\
\
## Add TXT SPF Record\
\
On the same section:\
\
1. On the `Type` page, choose `TXT`.\
2. Type `send` for the `Host` of the record.\
3. Copy the TXT Value Resend into the `Answer / Value` field.\
4. Use the default TTL of `600`.\
5. Select `Add Record`.\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a\
  subdomain).\
</Info>\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cb9073c5e7cb71d2aa844592cf44678f" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a6abe0e9c26365d9e361ab1950614b2 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e901d2d73db3f5863caf88f5eb17072c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a723ecf3902095de4fda741d9af4670c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d666407aab9c83c70ae4498b5ca3f919 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd4153e8857db380db68b0243a191ba2 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=321ba5f3c09c53a611f7790aa773a3bc 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-txt.png?maxW=2904&auto=format&n=JHWt09hsc7E33HK2&q=85&s=1d272cba726f73fb35f764f0600c049e" width="2904" height="1767" data-path="images/dashboard-domains-porkbun-spf-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-txt.png?w=280&maxW=2904&auto=format&n=JHWt09hsc7E33HK2&q=85&s=7f33fd428828edc4fc9d463d989308e8 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-txt.png?w=560&maxW=2904&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3c1dd92ba05710677c5c9b5532f2484c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-txt.png?w=840&maxW=2904&auto=format&n=JHWt09hsc7E33HK2&q=85&s=dae36cf4de45e79199a6b677b65219fc 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-txt.png?w=1100&maxW=2904&auto=format&n=JHWt09hsc7E33HK2&q=85&s=859f58cf151db87dd8a74b13e1365a43 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-txt.png?w=1650&maxW=2904&auto=format&n=JHWt09hsc7E33HK2&q=85&s=18c949df239bb471c711efc7557ac1d9 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-txt.png?w=2500&maxW=2904&auto=format&n=JHWt09hsc7E33HK2&q=85&s=b1788109f9e60a1a5eb97b759f435800 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Porkbun:\
\
| Porkbun        | Resend | Example Value                         |\
| -------------- | ------ | ------------------------------------- |\
| Type           | Type   | `TXT Record`                          |\
| Host           | Name   | `send`                                |\
| Answer / Value | Value  | `"v=spf1 include:amazonses.com ~all"` |\
| TTL            | -      | `600`                                 |\
\
## Add TXT DKIM Records\
\
On the same `Create Record` section:\
\
1. On the `Type` page, choose `TXT`.\
2. Type `resend._domainkey` for the `Host` of the record.\
3. Copy the TXT Value Resend into the `Answer / Value` field.\
4. Use the default TTL of `600`.\
5. Select `Add Record`.\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or\
  `resend._domainkey.subdomain` if you're using a subdomain).\
</Info>\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=664211d386b509e71a2a1ed05cefee73" width="2992" height="1868" data-path="images/dashboard-domains-resend-dkim.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e67460142f3afb173aaf6e0b7de5c91e 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=967d173c52b6d8f4f4cb084c018baef4 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a3a6c52abfac2a1e868371804da1a2dc 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8a62a7acf499f5ec75a70f87fa3a274a 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a9eadede29682ebd7cfaab3bf5300d64 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2fb4c83336c19d0dbe91569a022386e9 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-dkim-txt.png?maxW=2903&auto=format&n=JHWt09hsc7E33HK2&q=85&s=471ea066e20f1cc8f8b423bb046d343e" width="2903" height="1768" data-path="images/dashboard-domains-porkbun-dkim-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-dkim-txt.png?w=280&maxW=2903&auto=format&n=JHWt09hsc7E33HK2&q=85&s=98ce00732f369e5948952cd136b1f9a1 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-dkim-txt.png?w=560&maxW=2903&auto=format&n=JHWt09hsc7E33HK2&q=85&s=32990e81d5a6942039d663322e4be45e 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-dkim-txt.png?w=840&maxW=2903&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9becbc3aeaf3370490fc5d5b45048a29 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-dkim-txt.png?w=1100&maxW=2903&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9e285326fbad6d7bacf9f759d62c6b84 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-dkim-txt.png?w=1650&maxW=2903&auto=format&n=JHWt09hsc7E33HK2&q=85&s=98b3acb9276c69421aec0bcbd377e9cc 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-dkim-txt.png?w=2500&maxW=2903&auto=format&n=JHWt09hsc7E33HK2&q=85&s=fda36d6287a30fa5a47ce8677d2731c3 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Porkbun:\
\
| Porkbun        | Resend | Example Value                                      |\
| -------------- | ------ | -------------------------------------------------- |\
| Type           | Type   | `TXT Record`                                       |\
| Host           | Name   | `send`                                             |\
| Answer / Value | Value  | `p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB` |\
| TTL            | -      | `600`                                              |\
\
## Complete Verification\
\
Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take a few hours to complete the verification process (often much faster).\
\
## Troubleshooting\
\
If your domain is not successfully verified, these are some common troubleshooting methods.\
\
<AccordionGroup>\
  <Accordion title="Resend shows my domain verification failed.">\
    Review the records you added to Porkbun to rule out copy and paste errors.\
  </Accordion>\
\
  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">\
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).\
  </Accordion>\
</AccordionGroup>\
\
\
# Send emails with Replit and Resend\
Source: https://resend.com/docs/knowledge-base/replit-integration\
\
Learn how to add the Resend integration to your Replit project.\
\
[Replit](https://replit.com/) is a platform for building sites and apps with AI. You can add Resend in a Replit project by asking the chat to add email sending with Resend.\
\
## 1. Add your Resend API key\
\
To use Resend with Replit, you'll need to add a Resend API key, which you can create in the [Resend Dashboard](https://resend.com/api-keys). Do not share your API key with others or expose it in the browser or other client-side code.\
\
<img src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/replit-integration.png?maxW=2000&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ded694def36d3bfffcf28fbb9caca2ef" alt="adding the Resend integration to a Replit chat" width="2000" height="1117" data-path="images/replit-integration.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/replit-integration.png?w=280&maxW=2000&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=90af286577068144fb8262a26f61e47a 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/replit-integration.png?w=560&maxW=2000&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1cf1abf2f4c34c53ebdd14313ef9ee32 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/replit-integration.png?w=840&maxW=2000&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=9103c612df64b023de92cfe82443268b 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/replit-integration.png?w=1100&maxW=2000&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=35fc492e6b1bf7ef9824383f9a9354e4 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/replit-integration.png?w=1650&maxW=2000&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b2f0259306f5c7837e40865d893904b6 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/replit-integration.png?w=2500&maxW=2000&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=aae07a80a5c9da479e0ee4cbaa62b8c0 2500w" data-optimize="true" data-opv="2" />\
\
<Note>\
  Replit can track all your API keys and other secrets as encrypted environment\
  variables in your account's [Secrets\
  workspace](https://docs.replit.com/replit-workspace/workspace-features/secrets).\
  Secrets stored in this tool are available across all your projects, so adding\
  your Resend API key here is a good way to keep it safe and accessible.\
</Note>\
\
## 2. Add a custom domain to your Resend account\
\
By default, you can only send emails to your own email address.\
\
To send emails to other email addresses:\
\
1. Add a [custom domain to your Resend account](https://resend.com/domains).\
2. Add the custom domain to the `from` field in the `resend` function in Replit (or ask the chat to update these fields).\
\
Get more help adding a custom domain in [Resend's documentation](/dashboard/domains/introduction).\
\
\
# What are Resend account sending limits?\
Source: https://resend.com/docs/knowledge-base/resend-sending-limits\
\
Learn what different sending limits apply to accounts.\
\
Resend regulates sending emails in two ways:\
\
1. sending volume\
2. sending rate\
\
These limits help improve your deliverability and likelihood of reaching your recipient's inbox.\
\
## Free Account Daily and Monthly Sending Limits\
\
Free accounts have a daily sending limit of 100 emails/day and 3,000 emails/month. Multiple `To`, `CC`, or `BCC` recipients count towards this limit.\
\
## Paid Plan Limit\
\
* Transactional Pro and Scale plans have no daily limits, though the plan tier will dictate the monthly limit. To see your current month usage, view the [**Usage page**](https://resend.com/settings/usage). Multiple `To`, `CC`, or `BCC` recipients count towards the monthly limit.\
* Marketing Pro plans have no sending limits.\
\
## Rate Limits\
\
All accounts start with a rate limit of 2 requests per second. The [rate limits](/api-reference/introduction#rate-limit) follow the [IETF standard](https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-ratelimit-headers) for stating the rate limit in the response header. If you have specific requirements, [contact support](https://resend.com/help) to request a rate increase.\
\
## Bounce Rate\
\
All accounts must maintain a bounce rate of under **4%**. The [**Metrics page**](https://resend.com/metrics) within an account and/or [webhooks](https://resend.com/docs/dashboard/webhooks/event-types#email-bounced) allow you to monitor your account bounce rates.\
\
Maintaining a bounce rate above 4% may result in a temporary pause in sending until the bounce rate is reduced.\
\
Tips to keep a bounce rate low:\
\
* Remove inactive user email addresses from email lists.\
* Only send to recipients who have given consent to receive email.\
* When testing, avoid sending to fake email addresses. Use Resend's [test email addresses](/dashboard/emails/send-test-emails) instead.\
* If you are using open/click tracking, periodically remove recipients who are not engaging with your emails from your email lists.\
\
## Spam Rate\
\
All accounts must have a spam rate of under **0.08%**. The [**Metrics page**](https://resend.com/metrics) within an account and/or [webhooks](https://resend.com/docs/dashboard/webhooks/event-types#email-complained) allow you to monitor your account spam rates.\
\
Maintaining a spam rate over 0.08% may result in a temporary pause in sending until the spam rate is reduced.\
\
Tips to keep a spam rate low:\
\
* Give recipients an easy way to opt-out of emails.\
* Send relevant and timely emails.\
* Only send to recipients who have given consent to receive email.\
\
\
# AWS Route 53\
Source: https://resend.com/docs/knowledge-base/route53\
\
Verify your domain on Route 53 with Resend.\
\
<Snippet file="domain-guide-add-domain.mdx" />\
\
## Login to Route 53\
\
Then, login to your [AWS Management Console, and open Route 53 console](https://console.aws.amazon.com/route53/), then click on your domain name. From there, click on `Create Record`.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-createrecord.png?maxW=1510&auto=format&n=JHWt09hsc7E33HK2&q=85&s=dc03bf856927fc916402b525d0b2214a" width="1510" height="908" data-path="images/dashboard-domains-route53-createrecord.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-createrecord.png?w=280&maxW=1510&auto=format&n=JHWt09hsc7E33HK2&q=85&s=114571b2393fe8c5c155e9f75bb12250 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-createrecord.png?w=560&maxW=1510&auto=format&n=JHWt09hsc7E33HK2&q=85&s=74f0255cc5a19a843a0a775cbdc28164 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-createrecord.png?w=840&maxW=1510&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4047129f48af56fac1bdb55cb78c8ddb 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-createrecord.png?w=1100&maxW=1510&auto=format&n=JHWt09hsc7E33HK2&q=85&s=b9632336fc334b8390e5e9d36bb453f2 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-createrecord.png?w=1650&maxW=1510&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5d3d8061d0f73e615af058125705f6a8 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-createrecord.png?w=2500&maxW=1510&auto=format&n=JHWt09hsc7E33HK2&q=85&s=ff3a8deed4bfb1900a2f06816ce9aa7a 2500w" data-optimize="true" data-opv="2" />\
\
## Add MX SPF Record\
\
1. Type in `send` for the `Record name`.\
2. Select the `Record type` dropdown, and choose `MX`.\
3. Copy the MX Value from your domain in Resend into the `Value` field.\
4. Be sure to include the `10` in the `Value` field, as seen in the screenshot.\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a\
  subdomain).\
</Info>\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=acacffca22bae16101670444382c652a" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a2664c22179353b27efaee19ecda4001 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=77bb16631d89ad4503bad8e9e6370090 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=419f41c59437cdebbdb1422305d1ae1e 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3a547e3cc820b5d99260cc365f574fe5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=87787650757a99bff16ec7476f8c60f8 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3c3300b899e4ff5dd8d6de3144b98386 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-mx.png?maxW=1512&auto=format&n=JHWt09hsc7E33HK2&q=85&s=37b5f438bc4fc41d6a9a8790bf709ef9" width="1512" height="909" data-path="images/dashboard-domains-route53-spf-mx.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-mx.png?w=280&maxW=1512&auto=format&n=JHWt09hsc7E33HK2&q=85&s=957cc319896643748846953ad80fdcc1 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-mx.png?w=560&maxW=1512&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a426b9d359f2b4306ce57d98642d75c9 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-mx.png?w=840&maxW=1512&auto=format&n=JHWt09hsc7E33HK2&q=85&s=0c6923c183c7aeea4d44a55a20c8fa2e 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-mx.png?w=1100&maxW=1512&auto=format&n=JHWt09hsc7E33HK2&q=85&s=469ff151e91b1c04d765f72016a50bd1 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-mx.png?w=1650&maxW=1512&auto=format&n=JHWt09hsc7E33HK2&q=85&s=08cc4d20bb1e436832b46aacdd8adbcc 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-mx.png?w=2500&maxW=1512&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9f0187cce930c21e68d7acdd3c85bc67 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Route 53:\
\
| Route 53       | Resend           | Example Value                              |\
| -------------- | ---------------- | ------------------------------------------ |\
| Record Type    | Type             | `MX Record`                                |\
| Record name    | Name             | `send`                                     |\
| Value          | Value & Priority | `10 feedback-smtp.us-east-1.amazonses.com` |\
| TTL            | -                | `Use Route 53 Default (300)`               |\
| Routing policy | -                | `Simple routing`                           |\
\
<Info>\
  Route 53 does not label the `priority` column, and you will need to add this\
  in to the `Value` section, as shown in the screenshot. Do not use the same\
  priority for multiple records. If Priority `10` is already in use, try a\
  number slightly higher like `11` or `12`.\
</Info>\
\
## Add TXT SPF Record\
\
In the same section, choose `Add another record`:\
\
1. Type in `send` for the `Record name`.\
2. Click the `Record type` dropdown.\
3. Select the `Record type` dropdown, and choose `TXT`.\
4. Copy TXT Value from your domain in Resend into the `Value` field.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cb9073c5e7cb71d2aa844592cf44678f" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a6abe0e9c26365d9e361ab1950614b2 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e901d2d73db3f5863caf88f5eb17072c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a723ecf3902095de4fda741d9af4670c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d666407aab9c83c70ae4498b5ca3f919 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd4153e8857db380db68b0243a191ba2 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=321ba5f3c09c53a611f7790aa773a3bc 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-txt.png?maxW=1509&auto=format&n=JHWt09hsc7E33HK2&q=85&s=45cb67d0389bdaaf9d54e89a5f356bf0" width="1509" height="908" data-path="images/dashboard-domains-route53-spf-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-txt.png?w=280&maxW=1509&auto=format&n=JHWt09hsc7E33HK2&q=85&s=ca87b247177aba6e75fb6f38d72b3ee6 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-txt.png?w=560&maxW=1509&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4d5da4587006b94483e0cb4627606aea 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-txt.png?w=840&maxW=1509&auto=format&n=JHWt09hsc7E33HK2&q=85&s=b32b2254884c09109d77789b3b62c6c9 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-txt.png?w=1100&maxW=1509&auto=format&n=JHWt09hsc7E33HK2&q=85&s=66c9c89c02199a121a8fba332d8ac5a9 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-txt.png?w=1650&maxW=1509&auto=format&n=JHWt09hsc7E33HK2&q=85&s=26a75aa644ef82bc3063f34540c53b73 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-txt.png?w=2500&maxW=1509&auto=format&n=JHWt09hsc7E33HK2&q=85&s=92bbb55d5a0494d42078e786e96f5469 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Route 53:\
\
| Route 53       | Resend | Example Value                         |\
| -------------- | ------ | ------------------------------------- |\
| Record type    | Type   | `TXT Record`                          |\
| Record name    | Name   | `send`                                |\
| Value          | Value  | `"v=spf1 include:amazonses.com ~all"` |\
| TTL            | -      | `Use Route 53 Default (300)`          |\
| Routing policy | -      | `Simple routing`                      |\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a\
  subdomain).\
</Info>\
\
## Add TXT DKIM Records\
\
In the same section, choose `Add another record`:\
\
1. Type in `resend._domainkey` for the the `Record name`.\
2. Change the `Record Type` to `TXT`.\
3. Copy the TXT Value value from your domain in Resend to the `Value` text box.\
4. Click on `Create Records`.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=664211d386b509e71a2a1ed05cefee73" width="2992" height="1868" data-path="images/dashboard-domains-resend-dkim.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e67460142f3afb173aaf6e0b7de5c91e 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=967d173c52b6d8f4f4cb084c018baef4 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a3a6c52abfac2a1e868371804da1a2dc 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8a62a7acf499f5ec75a70f87fa3a274a 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a9eadede29682ebd7cfaab3bf5300d64 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2fb4c83336c19d0dbe91569a022386e9 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-dkim-txt.png?maxW=1513&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4147d23579902ce38fcbc1506f6ab738" width="1513" height="912" data-path="images/dashboard-domains-route53-dkim-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-dkim-txt.png?w=280&maxW=1513&auto=format&n=JHWt09hsc7E33HK2&q=85&s=60bedc0ac3b52d6a0f33eac7a27a7cbe 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-dkim-txt.png?w=560&maxW=1513&auto=format&n=JHWt09hsc7E33HK2&q=85&s=239a68d7c6db32be349b36f738a13efe 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-dkim-txt.png?w=840&maxW=1513&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8f9449d9a48ce7041925980e068b940e 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-dkim-txt.png?w=1100&maxW=1513&auto=format&n=JHWt09hsc7E33HK2&q=85&s=ba939ad495b77d158cb53124003bb408 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-dkim-txt.png?w=1650&maxW=1513&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f479043bdd6f0cdf908904f439732c07 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-dkim-txt.png?w=2500&maxW=1513&auto=format&n=JHWt09hsc7E33HK2&q=85&s=069e2326a76778f376f5e41088feab36 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Route 53:\
\
| Route 53       | Resend | Example Value                                      |\
| -------------- | ------ | -------------------------------------------------- |\
| Record type    | Type   | `TXT Record`                                       |\
| Record name    | Name   | `resend._domainkey`                                |\
| Value          | Value  | `p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB` |\
| TTL            | -      | `Use Route 53 Default (300)`                       |\
| Routing policy | -      | `Simple routing`                                   |\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or\
  `resend._domainkey.subdomain` if you're using a subdomain).\
</Info>\
\
## Complete Verification\
\
Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take up to 5 hours to complete the verification process (often much faster).\
\
## Troubleshooting\
\
If your domain is not successfully verified, these are some common troubleshooting methods.\
\
<AccordionGroup>\
  <Accordion title="Resend shows my domain verification failed.">\
    Review the records you added to Route 53 to rule out copy and paste errors.\
  </Accordion>\
\
  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">\
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).\
  </Accordion>\
</AccordionGroup>\
\
\
# How to prevent bounces with @privaterelay.appleid.com recipients?\
Source: https://resend.com/docs/knowledge-base/sending-apple-private-relay\
\
Sending to Apple Private Email Relay requires specific configuration steps to ensure your emails get delivered\
\
If your website or application supports Sign In with Apple, your customers have the option to receive emails from you via Apple\'92s Private Email Relay service. This feature allows users to keep their actual email addresses private when they sign up or log in.\
\
When a user selects the Hide My Email option, Apple assigns them a unique, randomly generated email address under the `@privaterelay.appleid.com` domain, which you can link to that specific user.\
\
To ensure your emails are delivered through Apple\'92s Private Email Relay, you must first access the Apple Developer Portal and navigate to `Certificates, Identifiers & Profiles` > `More` > `Sign in with Apple for Email Communication` > `Configure`.\
\
<Info>\
  **Apple Offers Multiple Hide My Email Services**\
\
  Starting with iOS 15, Apple provides two separate Hide My Email services\'97one through Sign in with Apple and another via iCloud+.\
\
  This guide is specifically for apps and websites utilizing Sign in with Apple, which generates a unique email address for account creation and login purposes.\
</Info>\
\
## Register your sending domains\
\
Apple mandates that you list the domains from which you will send emails to its service. Additionally, if your return-path domain differs from your sending domain, you must include that as well.\
\
If you use Resend, note that its return-path domain is different since it operates through a subdomain. You will find this subdomain in your Domain settings, formatted as `send.yourdomain.tld` or `send.yoursubdomain.yourdomain.tld` for MX and SPF records. Ensure you add both your primary domain and the subdomain as Apple Email Sources.\
\
## Register your email addresses\
\
Alongside your Sending Domains, Apple requires registration of all email addresses used to send messages from those domains.\
\
You can add these email addresses one by one or in a comma-separated list. If you use other email sources outside of Resend to send messages to Private Relay addresses, include those as well.\
\
## Authenticate your sending domains\
\
Since Resend mandates SPF and DKIM authentication for all domains sending emails through its service, your domain will automatically meet Apple\'92s authentication requirements.\
\
## Still experiencing bounces from @privaterelay.appleid.com?\
\
At times, emails sent to `@privaterelay.appleid.com` may still bounce. While the bounce messages may not always contain detailed explanations, common reasons include:\
\
* The user has deleted their Hide My Email address from Apple\'92s settings.\
* The user has exceeded their daily limit of 100 emails sent to and from their Hide My Email address.\
* A misconfiguration in your settings\'97double-check that all Sending Domains and From Addresses are correctly registered and authenticated with Apple.\
\
Apple allows the account owner and admins in the Apple Developer Portal to receive notifications if messages fail to deliver through the relay. You can enable this setting in the portal.\
\
***\
\
Once you have completed these three steps, you will be ready to send emails to customers using Hide My Email addresses via Apple\'92s Private Email Relay service.\
\
For additional details on Apple Private Email Relay and configuration options, refer to Apple\'92s official documentation:\
\
* [Apple: Configure Private Email Relay Service](https://developer.apple.com/help/account/configure-app-capabilities/configure-private-email-relay-service/)\
* [Apple: Communicating Using the Private Email Relay Service](https://developer.apple.com/documentation/signinwithapple/communicating-using-the-private-email-relay-service/)\
\
\
# Should I add an unsubscribe link to all of my emails sent with Resend?\
Source: https://resend.com/docs/knowledge-base/should-i-add-an-unsubscribe-link\
\
Learn best practices about using unsubscribe links.\
\
Transactional emails are generally exempt from including an unsubscribe link. Unlike marketing emails, transactional emails serve a functional purpose, such as account confirmation, password resets, and order confirmations.\
\
As a best practice, we recommend telling recipients how to opt out of receiving future email from you if the content is more related to nurturing relationships with your customers, rather than pragmatic, action-oriented emails.\
\
Laws enforced by the FTC and GDPR prioritize giving recipients an easy way to give and withdraw their consent to recieving email marketing content. Additionally, not having an option for opting out of emails risks recipients complaining or marking the email as spam, which can hurt your reputation as a sender.\
\
Here is more on how to [manually add and manage unsubscribe links](https://resend.com/docs/dashboard/emails/add-unsubscribe-to-transactional-emails).\
\
If you're using [Resend Broadcasts](https://resend.com/docs/dashboard/audiences/managing-unsubscribe-list), the unsubscribe headers are added automatically to your emails. You can include the Unsubscribe Footer in your Broadcasts, which will be automatically replaced with the correct link for each contact or use `\{\{\{RESEND_UNSUBSCRIBE_URL\}\}\}` as a link target should you want to customize the unsubscribe footer.\
\
\
# Squarespace\
Source: https://resend.com/docs/knowledge-base/squarespace\
\
Verify your domain on Squarespace with Resend.\
\
<Snippet file="domain-guide-add-domain.mdx" />\
\
## Login to Squarespace\
\
Login to your [Squarespace domains page](https://account.squarespace.com/domains) and click on your domain.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-domains-main.png?maxW=3808&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1ae7f9c7017bf4f7885d5e63711435d0" width="3808" height="2128" data-path="images/squarespace-domains-main.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-domains-main.png?w=280&maxW=3808&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1555d2ba01926b0db68a1f42e881714c 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-domains-main.png?w=560&maxW=3808&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=86233f05c107f100c2cf3a2a5334ff64 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-domains-main.png?w=840&maxW=3808&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=42c6ab733a4e34d0e0628224ca0918a4 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-domains-main.png?w=1100&maxW=3808&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c5ec7c2fdb327d0199b6611f534948c1 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-domains-main.png?w=1650&maxW=3808&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=2ce3624f2d9fc6014d981942ee80063e 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-domains-main.png?w=2500&maxW=3808&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=502545b6a8efc36eae1a65ac60141e15 2500w" data-optimize="true" data-opv="2" />\
\
## Add MX SPF Record\
\
Scroll down to the **Custom records** section and select `Add record` on Squarespace.\
\
1. Type `send` for the `Host` of the record.\
2. Set the `Type` to `MX`.\
3. Set the `Priority` to `10`.\
4. Use the Default 4 hours for `TTL`.\
5. Copy the MX Value from Resend into the `Mail Server` field\
6. Select `Save`.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=acacffca22bae16101670444382c652a" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a2664c22179353b27efaee19ecda4001 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=77bb16631d89ad4503bad8e9e6370090 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=419f41c59437cdebbdb1422305d1ae1e 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3a547e3cc820b5d99260cc365f574fe5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=87787650757a99bff16ec7476f8c60f8 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3c3300b899e4ff5dd8d6de3144b98386 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-mx.png?maxW=3760&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=cda16270cec2b7f4c1a945147bd966bc" width="3760" height="2080" data-path="images/squarespace-spf-mx.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-mx.png?w=280&maxW=3760&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=f2cdded437051fa6b6414a66539912de 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-mx.png?w=560&maxW=3760&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=e504728eb330f8f9c9b11b8f6b7e5ae4 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-mx.png?w=840&maxW=3760&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=092933b514be4caec31bed48abbe92b5 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-mx.png?w=1100&maxW=3760&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=977dc5bd2ba458e07dab9f511555761f 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-mx.png?w=1650&maxW=3760&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ad6634394c908b506542db28f8652f6f 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-mx.png?w=2500&maxW=3760&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=557220553821b3856dcc466c7df466c2 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Squarespace:\
\
| Squarespace | Resend   | Example Value                           |\
| ----------- | -------- | --------------------------------------- |\
| Type        | Type     | `MX`                                    |\
| Host        | Name     | `send`                                  |\
| TTL         | -        | `4 hrs` (default)                       |\
| Mail Server | Value    | `feedback-smtp.us-east-1.amazonses.com` |\
| Priority    | Priority | `10`                                    |\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a\
  subdomain).\
</Info>\
\
<Info>\
  Do not use the same priority for multiple records. If Priority `10` is already\
  in use, try a number slightly higher like `11` or `12`.\
</Info>\
\
## Add TXT SPF Record\
\
In the same **Custom records** section, select `Add Record` on Squarespace.\
\
1. Type `send` for the `Host` of the record.\
2. Set the `Type` to `TXT`.\
3. Use the Default 4 hours for `TTL`.\
4. Copy the TXT Value from Resend into the `Text` field\
5. Select `Save`.\
\
Add the **TXT Record** from your domain in Resend to Squarespace and click "Save".\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cb9073c5e7cb71d2aa844592cf44678f" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a6abe0e9c26365d9e361ab1950614b2 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e901d2d73db3f5863caf88f5eb17072c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a723ecf3902095de4fda741d9af4670c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d666407aab9c83c70ae4498b5ca3f919 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd4153e8857db380db68b0243a191ba2 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=321ba5f3c09c53a611f7790aa773a3bc 2500w" data-optimize="true" data-opv="2" />\
\
<br />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-txt.png?maxW=3808&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=9f8fa185f4551cbab5e2764a36687e71" width="3808" height="2128" data-path="images/squarespace-spf-txt.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-txt.png?w=280&maxW=3808&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c969538453592be08437f565dee8dde3 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-txt.png?w=560&maxW=3808&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c22d2ef3e8dd3e9095d5674722c40d88 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-txt.png?w=840&maxW=3808&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d05546be764d60eb11e514883b048399 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-txt.png?w=1100&maxW=3808&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c68d8743be9edab48d9758419e33d0c8 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-txt.png?w=1650&maxW=3808&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=fae84c5a853923613758cbc909385c5d 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-txt.png?w=2500&maxW=3808&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=f0bf723e1d41420a8e933ed34c240286 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Squarespace:\
\
| Squarespace | Resend | Example Value                         |\
| ----------- | ------ | ------------------------------------- |\
| Type        | Type   | `TXT`                                 |\
| Host        | Name   | `send`                                |\
| TTL         | -      | `4 hrs` (default)                     |\
| Text        | Value  | `"v=spf1 include:amazonses.com ~all"` |\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a\
  subdomain).\
</Info>\
\
## Add TXT DKIM Records\
\
In the same **Custom records** section, select `Add Record` on Squarespace.\
\
1. Type `resend._domainkey` for the `Host` of the record.\
2. Set the `Type` to `TXT`.\
3. Use the Default 4 hours for `TTL`.\
4. Copy the TXT Value from Resend into the `Text` field\
5. Select `Save`.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=664211d386b509e71a2a1ed05cefee73" width="2992" height="1868" data-path="images/dashboard-domains-resend-dkim.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e67460142f3afb173aaf6e0b7de5c91e 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=967d173c52b6d8f4f4cb084c018baef4 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a3a6c52abfac2a1e868371804da1a2dc 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8a62a7acf499f5ec75a70f87fa3a274a 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a9eadede29682ebd7cfaab3bf5300d64 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2fb4c83336c19d0dbe91569a022386e9 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-dkim-txt.png?maxW=3808&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=238c67b370f700954aaa7fcb5c655120" width="3808" height="2128" data-path="images/squarespace-dkim-txt.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-dkim-txt.png?w=280&maxW=3808&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=bce5a1384a864f36acce9cd36136f2aa 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-dkim-txt.png?w=560&maxW=3808&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1372a095d54fc72dad1a77b7b944e9c2 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-dkim-txt.png?w=840&maxW=3808&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=5f011a45248df975fdca00517ebde59a 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-dkim-txt.png?w=1100&maxW=3808&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=02db8faeb4f59378531d7eb6cd3b5a73 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-dkim-txt.png?w=1650&maxW=3808&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=3c9c916f227bb7d82ca775562993b5ab 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-dkim-txt.png?w=2500&maxW=3808&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d2d60518014d63bd385a797d16707dea 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Squarespace:\
\
| Squarespace | Resend | Example Value                                      |\
| ----------- | ------ | -------------------------------------------------- |\
| Type        | Type   | `TXT`                                              |\
| Host        | Name   | `resend._domainkey`                                |\
| TTL         | -      | `4 hrs` (default)                                  |\
| Text        | Value  | `p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB` |\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or\
  `resend._domainkey.subdomain` if you're using a subdomain).\
</Info>\
\
## Complete Verification\
\
Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take up to 72 hours to complete the verification process (often much faster).\
\
## Troubleshooting\
\
If your domain is not successfully verified, these are some common troubleshooting methods.\
\
<AccordionGroup>\
  <Accordion title="Resend shows my domain verification failed.">\
    Review the records you added to Squarespace to rule out copy and paste errors.\
  </Accordion>\
\
  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">\
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).\
  </Accordion>\
</AccordionGroup>\
\
\
# Strato\
Source: https://resend.com/docs/knowledge-base/strato\
\
Verify your domain on Strato with Resend.\
\
<Snippet file="domain-guide-add-domain.mdx" />\
\
## Log in to Strato\
\
Log in to your [Strato account](https://www.strato.es/apps/CustomerService):\
\
1. In the left-hand navigation, go to Domains > Manage Domain.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-domain-manager.png?maxW=2676&auto=format&n=JHWt09hsc7E33HK2&q=85&s=52ac4eccc15565ff5496647135c23f9f" width="2676" height="1556" data-path="images/dashboard-domains-strato-domain-manager.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-domain-manager.png?w=280&maxW=2676&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a56ff6c77bfcb58caf0a66acdec49665 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-domain-manager.png?w=560&maxW=2676&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3d7eb51ea329c7b089711eaa7d93fe57 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-domain-manager.png?w=840&maxW=2676&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9aa26efc04cc14dd2473cfa48f5bc879 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-domain-manager.png?w=1100&maxW=2676&auto=format&n=JHWt09hsc7E33HK2&q=85&s=74c525557d5dad9f779d42cc0a901d9d 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-domain-manager.png?w=1650&maxW=2676&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8832b40906395cc578bb88dfa92359bf 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-domain-manager.png?w=2500&maxW=2676&auto=format&n=JHWt09hsc7E33HK2&q=85&s=7217256d454222f73d3901813e9b34e1 2500w" data-optimize="true" data-opv="2" />\
\
## Add MX SPF Record\
\
1. On the domain page, click on the gear icon to redirect to Settings.\
2. Create a new subdomain named `send`.\
3. Navigate to the subdomain settings.\
4. Go to the `DNS` tab, you'll see a list of DNS records you can update. Click on `manage` MX record.\
5. Select own mail server.\
6. Copy MX value from Resend into `Server` field.\
7. Use the default priority `Low`.\
8. Save settings.\
\
<Info>\
  By default, Strato domains use Strato mail server which uses `mail` as their\
  send path. You will need to bypass this default behavior by creating a\
  subdomain and setting the MX record there.\
</Info>\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=acacffca22bae16101670444382c652a" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a2664c22179353b27efaee19ecda4001 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=77bb16631d89ad4503bad8e9e6370090 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=419f41c59437cdebbdb1422305d1ae1e 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3a547e3cc820b5d99260cc365f574fe5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=87787650757a99bff16ec7476f8c60f8 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3c3300b899e4ff5dd8d6de3144b98386 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-mx.png?maxW=2676&auto=format&n=JHWt09hsc7E33HK2&q=85&s=0d18de215db2ff440e368668005e6847" width="2676" height="1542" data-path="images/dashboard-domains-strato-mx.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-mx.png?w=280&maxW=2676&auto=format&n=JHWt09hsc7E33HK2&q=85&s=682bb2770a33e00785220fd633590b03 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-mx.png?w=560&maxW=2676&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3f38002c497ce0e34c41d1fbc7aef360 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-mx.png?w=840&maxW=2676&auto=format&n=JHWt09hsc7E33HK2&q=85&s=541e8801845e005d5fd7b02cd3faca33 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-mx.png?w=1100&maxW=2676&auto=format&n=JHWt09hsc7E33HK2&q=85&s=dc9bf35a37281e53d222cf410cad3872 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-mx.png?w=1650&maxW=2676&auto=format&n=JHWt09hsc7E33HK2&q=85&s=ff60df1f41b23c59f2d22be05b7f6991 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-mx.png?w=2500&maxW=2676&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e4e0a4c23eb0a95fd9b6bcd64d94a262 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Strato:\
\
| Strato      | Resend   | Example Value                            |\
| ----------- | -------- | ---------------------------------------- |\
| Type        | Type     | `MX Record`                              |\
| Name        | Name     | `send`                                   |\
| Mail server | Value    | `feedback-smtp.eu-west-1.amazonses.com.` |\
| Priority    | Priority | `Low`                                    |\
\
## Add TXT SPF Record\
\
On the base domain settings:\
\
1. Go to the `DNS` tab.\
2. Manage TXT and CNAME records.\
3. On the bottom, click `Create another record`.\
4. Choose `TXT` type.\
5. Add `send` for the `name` record.\
6. For `value` input `v=spf1 include:amazonses.com ~all`.\
7. Save settings.\
\
<Info>\
  Strato provides a standard DMARC record similar to Resend's recommended value:\
  `v=DMARC1;p=reject;`.\
</Info>\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cb9073c5e7cb71d2aa844592cf44678f" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a6abe0e9c26365d9e361ab1950614b2 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e901d2d73db3f5863caf88f5eb17072c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a723ecf3902095de4fda741d9af4670c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d666407aab9c83c70ae4498b5ca3f919 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd4153e8857db380db68b0243a191ba2 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=321ba5f3c09c53a611f7790aa773a3bc 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?maxW=1458&auto=format&n=JHWt09hsc7E33HK2&q=85&s=50e4cde9d4a423385ba8d4a9b87521c6" width="1458" height="933" data-path="images/dashboard-domains-strato-spf-dkim.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=280&maxW=1458&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6a290c1e0ee1e3a90641b0fda30a32f4 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=560&maxW=1458&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e3fddd82f755dcdb15bda981eb9156b1 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=840&maxW=1458&auto=format&n=JHWt09hsc7E33HK2&q=85&s=61b2a2d2df36e90ae2d1bee007a3a1e7 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=1100&maxW=1458&auto=format&n=JHWt09hsc7E33HK2&q=85&s=03143c9701531be5a1f4908cc2d5f5ac 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=1650&maxW=1458&auto=format&n=JHWt09hsc7E33HK2&q=85&s=eb904cfc87c387305d0499a245c410f5 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=2500&maxW=1458&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d9ee4e7109d2b1213c9d6cf199483506 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Strato:\
\
| Strato | Resend | Example Value                       |\
| ------ | ------ | ----------------------------------- |\
| Type   | Type   | `TXT Record`                        |\
| Name   | Name   | `send`                              |\
| Value  | Value  | `v=spf1 include:amazonses.com ~all` |\
\
## Add TXT DKIM Records\
\
On the same TXT and CNAME manage page:\
\
1. Click `Create another record`.\
2. Choose `TXT` type.\
3. Add `resend._domainkey` for the `Name` record.\
4. Copy the record value from Resend into the TXT value field.\
5. Save settings.\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or\
  `resend._domainkey.subdomain` if you're using a subdomain).\
</Info>\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=664211d386b509e71a2a1ed05cefee73" width="2992" height="1868" data-path="images/dashboard-domains-resend-dkim.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e67460142f3afb173aaf6e0b7de5c91e 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=967d173c52b6d8f4f4cb084c018baef4 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a3a6c52abfac2a1e868371804da1a2dc 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8a62a7acf499f5ec75a70f87fa3a274a 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a9eadede29682ebd7cfaab3bf5300d64 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2fb4c83336c19d0dbe91569a022386e9 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?maxW=1458&auto=format&n=JHWt09hsc7E33HK2&q=85&s=50e4cde9d4a423385ba8d4a9b87521c6" width="1458" height="933" data-path="images/dashboard-domains-strato-spf-dkim.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=280&maxW=1458&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6a290c1e0ee1e3a90641b0fda30a32f4 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=560&maxW=1458&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e3fddd82f755dcdb15bda981eb9156b1 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=840&maxW=1458&auto=format&n=JHWt09hsc7E33HK2&q=85&s=61b2a2d2df36e90ae2d1bee007a3a1e7 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=1100&maxW=1458&auto=format&n=JHWt09hsc7E33HK2&q=85&s=03143c9701531be5a1f4908cc2d5f5ac 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=1650&maxW=1458&auto=format&n=JHWt09hsc7E33HK2&q=85&s=eb904cfc87c387305d0499a245c410f5 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=2500&maxW=1458&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d9ee4e7109d2b1213c9d6cf199483506 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Strato:\
\
| Strato | Resend | Example Value                                      |\
| ------ | ------ | -------------------------------------------------- |\
| Type   | Type   | `TXT Record`                                       |\
| Name   | Name   | `send`                                             |\
| Value  | Value  | `p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB` |\
\
<Info>\
  Copy DKIM value using the small copy icon in Resend. DKIM records are\
  case-sensitive and must match up exactly.\
</Info>\
\
## Complete Verification\
\
Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take a few hours to complete the verification process (often much faster).\
\
## Troubleshooting\
\
If your domain is not successfully verified, these are some common troubleshooting methods.\
\
<AccordionGroup>\
  <Accordion title="Resend shows my domain verification failed.">\
    Review the records you added to Strato to rule out copy and paste errors.\
  </Accordion>\
\
  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">\
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).\
  </Accordion>\
</AccordionGroup>\
\
\
# Send emails with v0 and Resend\
Source: https://resend.com/docs/knowledge-base/v0-integration\
\
Learn how to add the Resend integration to your v0 project.\
\
[v0](https://v0.dev) by Vercel is a platform for building web sites, tools, apps, and projects via chat. You can add Resend in a v0 project by asking the chat to add email sending with Resend.\
\
## 1. Add your Resend API key\
\
To use Resend with v0, you'll need to add a Resend API key, which you can create in the [Resend Dashboard](https://resend.com/api-keys).\
\
<Note>\
  Do not share your API key with others or expose it in the browser or other\
  client-side code.\
</Note>\
\
<img src="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/v0-integration.png?maxW=3808&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=2a5c530f67deb8ce04a755a46ba39e6a" alt="adding the Resend integration to a v0 chat" width="3808" height="2128" data-path="images/v0-integration.png" srcset="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/v0-integration.png?w=280&maxW=3808&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=b69e57b69cd96e7df499a36b8aea7abb 280w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/v0-integration.png?w=560&maxW=3808&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=d9d12f8db1b128127bb095d5135a9363 560w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/v0-integration.png?w=840&maxW=3808&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=8980524686cb75690e1fced357a5f7f2 840w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/v0-integration.png?w=1100&maxW=3808&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=5960ba0f2029daf9adbc54c2aac98d5c 1100w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/v0-integration.png?w=1650&maxW=3808&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=badec5108f923947892b0c6d5e6aa670 1650w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/v0-integration.png?w=2500&maxW=3808&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=a9c9549f4484b0a8ba33e35c2a985c1b 2500w" data-optimize="true" data-opv="2" />\
\
## 2. Add a custom domain to your Resend account\
\
By default, you can only send emails to your own email address.\
\
To send emails to other email addresses:\
\
1. Add a [custom domain to your Resend account](https://resend.com/domains).\
2. Add the custom domain to the `from` field in the `resend` function in v0 (or ask the chat to update these fields).\
\
Get more help adding a custom domain in [Resend's documentation](/dashboard/domains/introduction).\
\
\
# Vercel\
Source: https://resend.com/docs/knowledge-base/vercel\
\
Verify your domain on Vercel with Resend.\
\
<Note>\
  This guide helps you verify your domain on Vercel with Resend. We also have\
  [an official integration for\
  Vercel](https://resend.com/blog/vercel-integration) that helps you set up your\
  API keys on Vercel projects so you can start sending emails with Resend. [View\
  the integration here](https://vercel.com/resend/~/integrations/resend).\
</Note>\
\
<Snippet file="domain-guide-add-domain.mdx" />\
\
## Login to Vercel\
\
Login to your [Vercel account](https://vercel.com/login) and select the `Domains` tab.\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-domains.png?maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=43f3193940fcbf305151e04a667552ab" width="1200" height="676" data-path="images/dashboard-domains-vercel-domains.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-domains.png?w=280&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=24e618167a558ca3338cb67845c923f5 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-domains.png?w=560&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5893e4e8693202488ac3e14a0daeb1fe 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-domains.png?w=840&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e4e5551c3b45960b92c7732d9dadba18 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-domains.png?w=1100&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=948296dec9217948722a81c2b07da653 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-domains.png?w=1650&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=dbc77957ed4696c667f04a77a8c02924 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-domains.png?w=2500&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=c07fbbd065d0a1a8a0b1eb2b353bfb40 2500w" data-optimize="true" data-opv="2" />\
\
## Add MX SPF Record\
\
Copy and paste the values in Resend to Vercel.\
\
1. Type `send` for the `Name` of the record in Vercel.\
2. Expand the `Type` dropdown and select `MX`.\
3. Copy the record value from Resend into the `Value` field in Vercel.\
4. Add `10` for the `Priority`.\
5. Select `Add`.\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a\
  subdomain).\
</Info>\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=acacffca22bae16101670444382c652a" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a2664c22179353b27efaee19ecda4001 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=77bb16631d89ad4503bad8e9e6370090 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=419f41c59437cdebbdb1422305d1ae1e 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3a547e3cc820b5d99260cc365f574fe5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=87787650757a99bff16ec7476f8c60f8 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3c3300b899e4ff5dd8d6de3144b98386 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-mx.png?maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e7e54503773854af2e5656a9ab6ccbfc" width="1200" height="676" data-path="images/dashboard-domains-vercel-spf-mx.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-mx.png?w=280&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f82425187711422da97f06e790454ed2 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-mx.png?w=560&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d23f8865fde2b1794af9cb85f5164d43 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-mx.png?w=840&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=fe161c924b2da66c933b87071b054d9b 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-mx.png?w=1100&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=7577d6e3777920c5218be18272919ee6 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-mx.png?w=1650&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=b2ae25f1a65237028785ce30d0bb7dbf 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-mx.png?w=2500&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d2c585a653174ed970c01379c0d694a0 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Vercel:\
\
| Vercel   | Resend   | Example Value                           |\
| -------- | -------- | --------------------------------------- |\
| Type     | Type     | `MX Record`                             |\
| Name     | Name     | `send`                                  |\
| Value    | Value    | `feedback-smtp.us-east-1.amazonses.com` |\
| TTL      | -        | `Use Vercel default (60)`               |\
| Priority | Priority | `10`                                    |\
\
<Info>\
  Do not use the same priority for multiple records. If Priority `10` is already\
  in use on another record, try a number slightly higher like `11` or `12`.\
</Info>\
\
## Add TXT SPF Record\
\
In the same section, add another record in Vercel.\
\
1. Type `send` for the `Name` of the record.\
2. Expand the `Type` dropdown and select `TXT`.\
3. Copy the `TXT` record value from Resend into the `Value` field in Vercel.\
4. Use the default TTL of `60`.\
5. Select `Add`.\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a\
  subdomain).\
</Info>\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cb9073c5e7cb71d2aa844592cf44678f" width="3024" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a6abe0e9c26365d9e361ab1950614b2 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e901d2d73db3f5863caf88f5eb17072c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a723ecf3902095de4fda741d9af4670c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d666407aab9c83c70ae4498b5ca3f919 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd4153e8857db380db68b0243a191ba2 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&maxW=3024&auto=format&n=JHWt09hsc7E33HK2&q=85&s=321ba5f3c09c53a611f7790aa773a3bc 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-txt.png?maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8195f438df323ed69e7805ed43a65277" width="1200" height="676" data-path="images/dashboard-domains-vercel-spf-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-txt.png?w=280&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=96edc66418b824d8ae747c56a9b22058 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-txt.png?w=560&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5fb5692632fb3d95655551c2fba7932f 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-txt.png?w=840&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=c46e9d1fb0d94f025daf4266e1cf8264 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-txt.png?w=1100&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a0a516056392d610548bfddd7947f192 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-txt.png?w=1650&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8b41a9f530c74726558ecc7417b215ad 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-txt.png?w=2500&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=094343d4cf1148656cf50092f67d7ea4 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Vercel:\
\
| Vercel | Resend | Example Value                         |\
| ------ | ------ | ------------------------------------- |\
| Type   | Type   | `TXT Record`                          |\
| Name   | Name   | `send`                                |\
| Value  | Value  | `"v=spf1 include:amazonses.com ~all"` |\
| TTL    | -      | `Use Vercel default (60)`             |\
\
## Add TXT DKIM Records\
\
In the same section, add another record in Vercel.\
\
1. Type `resend._domainkey` for the `Name` of the record.\
2. Expand the `Type` dropdown and select `TXT`.\
3. Copy the record value from Resend into the `Value` field in Vercel.\
\
<Info>\
  Omit your domain from the record values in Resend when you paste. Instead of\
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or\
  `resend._domainkey.subdomain` if you're using a subdomain).\
</Info>\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=664211d386b509e71a2a1ed05cefee73" width="2992" height="1868" data-path="images/dashboard-domains-resend-dkim.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e67460142f3afb173aaf6e0b7de5c91e 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=967d173c52b6d8f4f4cb084c018baef4 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a3a6c52abfac2a1e868371804da1a2dc 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8a62a7acf499f5ec75a70f87fa3a274a 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a9eadede29682ebd7cfaab3bf5300d64 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&maxW=2992&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2fb4c83336c19d0dbe91569a022386e9 2500w" data-optimize="true" data-opv="2" />\
\
<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-dkim-txt.png?maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=32d3618d85015eb37275d0beac166b86" width="1200" height="676" data-path="images/dashboard-domains-vercel-dkim-txt.png" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-dkim-txt.png?w=280&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4ea427e2d022f4bbc1809e77d63667cd 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-dkim-txt.png?w=560&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=1939301b4fac8568c1c6faa2d30467ab 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-dkim-txt.png?w=840&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f9d174c5cb8426ba0143a7161748499b 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-dkim-txt.png?w=1100&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9f3eb5e637091337d8f3e61c83865836 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-dkim-txt.png?w=1650&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a8a06a426c283e8dfa70464bc93bf9c2 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-dkim-txt.png?w=2500&maxW=1200&auto=format&n=JHWt09hsc7E33HK2&q=85&s=1b50ddfa4be0f9b5fe9e945612307dee 2500w" data-optimize="true" data-opv="2" />\
\
Below is a mapping of the record fields from Resend to Vercel:\
\
| Vercel | Resend | Example Value                                      |\
| ------ | ------ | -------------------------------------------------- |\
| Type   | Type   | `TXT Record`                                       |\
| Name   | Name   | `resend._domainkey`                                |\
| Value  | Value  | `p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB` |\
| TTL    | -      | `Use Vercel default (60)`                          |\
\
## Complete Verification\
\
Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take a few hours to complete the verification process (often much faster).\
\
## Troubleshooting\
\
If your domain is not successfully verified, these are some common troubleshooting methods.\
\
<AccordionGroup>\
  <Accordion title="Resend shows my domain verification failed.">\
    Review the records you added to Vercel to rule out copy and paste errors.\
  </Accordion>\
\
  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">\
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).\
  </Accordion>\
</AccordionGroup>\
\
\
# Domain and/or IP Warm-up Guide\
Source: https://resend.com/docs/knowledge-base/warming-up\
\
Learn how to warm up a domain or IP to avoid deliverability issues.\
\
Warming up a domain or IP refers to the practice of progressively increasing your sending volume to maximize your deliverability. The goal is to send at a consistent rate and avoid any spikes in email volume that might be concerning to inbox service providers.\
\
Whenever you change your sending patterns\'97whether because you're using a new domain, a new IP, or a new vendor, or because your volume will increase\'97you should warm-up your domain and/or IP.\
\
A thought-out warm-up plan limits greylisting and delivery throttling, as well as helping establish a good domain and IP reputation.\
\
As your volume increases, you'll need to monitor your bounce rate to ensure it remains below 4%, and your spam rate below 0.08%. An increase in these rates would be a sign that your warm-up plan needs to be slowed down and an investigation into the root causes of the increases started.\
\
Following these rules and metrics will establish a good domain reputation.\
\
<Info>\
  Each sender has different constraints and needs, so these numbers are meant as\
  a baseline. Our [Support team](https://resend.com/help) can work with you on\
  devising a plan adapted to your needs.\
</Info>\
\
# Existing domain\
\
If you're already sending from an existing domain with established reputation and volumes, you can use the following guidelines to start sending with Resend.\
\
| **Day** | **Messages per day** | **Messages per hour** |\
| ------- | -------------------- | --------------------- |\
| **1**   | Up to 1,000 emails   | 100 Maximum           |\
| **2**   | Up to 2,500 emails   | 300 Maximum           |\
| **3**   | Up to 5,000 emails   | 600 Maximum           |\
| **4**   | Up to 5,000 emails   | 800 Maximum           |\
| **5**   | Up to 7,500 emails   | 1,000 Maximum         |\
| **6**   | Up to 7,500 emails   | 1,500 Maximum         |\
| **7**   | Up to 10,000 emails  | 2,000 Maximum         |\
\
# New domain\
\
Before you start sending emails with a brand new domain, it's especially important to have a warm-up plan so you can maximize your deliverability right from the start.\
\
| **Day** | **Messages per day** | **Messages per hour** |\
| ------- | -------------------- | --------------------- |\
| **1**   | Up to 150 emails     |                       |\
| **2**   | Up to 250 emails     |                       |\
| **3**   | Up to 400 emails     |                       |\
| **4**   | Up to 700 emails     | 50 Maximum            |\
| **5**   | Up to 1,000 emails   | 75 Maximum            |\
| **6**   | Up to 1,500 emails   | 100 Maximum           |\
| **7**   | Up to 2,000 emails   | 150 Maximum           |\
\
# Warming up your Dedicated IP with Resend\
\
In order for a Dedicated IP to be beneficial or useful, you first need to establish a certain sending volume and patterns. Once you've established this volume and these patterns, our [Support team](https://resend.com/help) can set it up for you.\
\
We provide an automatic warm-up process so that you can simply focus on sending.\
\
[Learn more about requesting a Dedicated IP](https://resend.com/docs/knowledge-base/how-do-dedicated-ips-work#how-to-request-a-dedicated-ip).\
\
# What about third-party warm-up services?\
\
We know email deliverability is important, and it can be tempting to use services promising quick fixes. However, using tools that artificially boost engagement can harm your long-term sender reputation. These services often rely on manipulating anti-spam filters, which can backfire as email providers like Gmail adjust their systems.\
\
Instead, we recommend focusing on sustainable practices\'97such as sending relevant content, maintaining a clean list, and using proper authentication. These methods build trust with email providers and improve your deliverability over time.\
\
\
# What attachment types are not supported?\
Source: https://resend.com/docs/knowledge-base/what-attachment-types-are-not-supported\
\
Learn which file attachment extensions are unsupported.\
\
Resend accepts all file attachment types except for those in the following list.\
\
|          |       |       |         |           |\
| -------- | ----- | ----- | ------- | --------- |\
| .adp     | .app  | .asp  | .bas    | .bat      |\
| .cer     | .chm  | .cmd  | .com    | .cpl      |\
| .crt     | .csh  | .der  | .exe    | .fxp      |\
| .gadget  | .hlp  | .hta  | .inf    | .ins      |\
| .isp     | .its  | .js   | .jse    | .ksh      |\
| .lib     | .lnk  | .mad  | .maf    | .mag      |\
| .mam     | .maq  | .mar  | .mas    | .mat      |\
| .mau     | .mav  | .maw  | .mda    | .mdb      |\
| .mde     | .mdt  | .mdw  | .mdz    | .msc      |\
| .msh     | .msh1 | .msh2 | .mshxml | .msh1xml  |\
| .msh2xml | .msi  | .msp  | .mst    | .ops      |\
| .pcd     | .pif  | .plg  | .prf    | .prg      |\
| .reg     | .scf  | .scr  | .sct    | .shb      |\
| .shs     | .sys  | .ps1  | .ps1xml | .ps2      |\
| .ps2xml  | .psc1 | .psc2 | .tmp    | .url      |\
| .vb      | .vbe  | .vbs  | .vps    | .vsmacros |\
| .vss     | .vst  | .vsw  | .vxd    | .ws       |\
| .wsc     | .wsf  | .wsh  | .xnk    |           |\
\
\
# What counts as email consent?\
Source: https://resend.com/docs/knowledge-base/what-counts-as-email-consent\
\
Learn what valid email permission looks like and why it matters.\
\
Getting consent to send email isn\'92t just a legal requirement. It\'92s also essential for keeping your deliverability strong and your Resend account in good standing.\
\
This guide explains what valid email permission looks like, why it matters, and how to set it up properly.\
\
## Why consent matters\
\
Many senders assume that if someone provides an email address, that automatically means it\'92s okay to email them. But that\'92s not always true and can often cause large-scale deliverability problems, especially for marketing or bulk messages.\
\
Mailbox providers like Gmail and Outlook closely monitor how recipients react to your emails, paying special attention to whether people mark your emails as spam. High complaint rates or low overall engagement signal that your messages weren\'92t wanted, which can hurt your reputation and lead to filtering, blocking, or delivery issues.\
\
## What *doesn\'92t* count as permission\
\
These common methods are **not** considered valid:\
\
* Including a clause in your Terms of Service that says users \'93agree to receive emails\'94\
* Using a **pre-checked** box on your signup form for marketing messages\
* Assuming someone is opted in unless they unsubscribe\
\
These approaches violate email best practices and don\'92t meet legal standards [like GDPR](https://gdpr-info.eu/art-7-gdpr/).\
\
## What *does* count as permission\
\
Valid consent means the recipient **clearly and knowingly agreed** to receive the specific kind of email you're sending.\
\
[According to GDPR](https://gdpr-info.eu/recitals/no-32/) (and general best practices), consent must be:\
\
* **Freely given** \'96 without pressure, bundling, or tricks\
* **Specific** \'96 clearly describes the type of messages the user will receive\
* **Informed** \'96 the user knows who you are and how you\'92ll use their data\
* **Unambiguous** \'96 requires an active opt-in (like checking a box)\
\
In other words, recipients should be able to consent to each message type from a particular sender.\
\
## What happens if you send without consent?\
\
If you send to recipients who didn\'92t explicitly opt in, here\'92s what can happen:\
\
1. Some of those people will **mark the message as spam**.\
2. Mailbox providers may **block your mail or filter it to the spam folder**.\
3. If your spam complaint or bounce rate remains high, [Resend may have to **pause or terminate your account**](https://resend.com/legal/acceptable-use) to protect our sending reputation.\
\
And this applies *globally*, not just in the EU. Even if your emails are technically legal in your country, violating consent can lead to your mail being blocked or filtered to the spam folder.\
\
## Best practice: Let people say \'93yes\'94\
\
The easiest way to get consent is to **ask for it clearly and separately**. Add an unchecked checkbox to your signup form, like this:\
\
> \'a0Yes, I want to receive product updates and occasional marketing emails\
\
**Follow these best practices:**\
\
* Keep it **optional** and **unchecked** by default\
* Make the wording clear and specific\
* Place it outside of your Terms of Service\
* Include a one-click unsubscribe link in every email\
\
<img alt="Example of a consent checkbox and unsubscribe link" src="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/what-counts-as-email-consent.jpeg?maxW=1606&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=e61ac1cce418a087e0999a2289584239" width="1606" height="757" data-path="images/what-counts-as-email-consent.jpeg" srcset="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/what-counts-as-email-consent.jpeg?w=280&maxW=1606&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=f54e16770f11d65c0cd5a95fb576d43d 280w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/what-counts-as-email-consent.jpeg?w=560&maxW=1606&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=569f128b61152d4074955ee69aab559e 560w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/what-counts-as-email-consent.jpeg?w=840&maxW=1606&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=4d96211d31fc754371d42c59bf3f9ea3 840w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/what-counts-as-email-consent.jpeg?w=1100&maxW=1606&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=6bf4ba40668055e7f7b152a00be2a241 1100w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/what-counts-as-email-consent.jpeg?w=1650&maxW=1606&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=0f0ce80a2ec7c65c22c1b71465fda2d2 1650w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/what-counts-as-email-consent.jpeg?w=2500&maxW=1606&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=3d5a8b97d3b7e464851542a77ed1b04b 2500w" data-optimize="true" data-opv="2" />\
\
## Still have questions?\
\
Following best practices helps everyone \'97 your recipients, your deliverability, and the health of the email ecosystem. When you start with clear consent, your messages are the ones people are *glad* to receive.\
\
If you\'92re new to permission-based sending, please reach out to [Support](https://resend.com/help) and we\'92ll help you make sure everything\'92s on track.\
\
\
# What email addresses to use for testing?\
Source: https://resend.com/docs/knowledge-base/what-email-addresses-to-use-for-testing\
\
Learn what email addresses are safe to use for testing with Resend\
\
## Safe email addresses for testing\
\
When testing email functionality, it's important to use designated test addresses to avoid unintended consequences like deliverability issues or spam complaints.\
\
Resend provides a set of safe email addresses specifically designed for testing, ensuring that you can simulate different email events without affecting your domain's reputation.\
\
### Why not use @example.com or @test.com?\
\
Many developers attempt to use domains like `@example.com` or `@test.com` for testing purposes. However, these domains are not designed for email traffic and often reject messages, leading to bounces.\
\
A high bounce rate can negatively impact your sender reputation and affect future deliverability. To prevent this, Resend blocks such addresses and returns a `422 Unprocessable Entity` error if you attempt to send to them.\
\
### List of addresses to use\
\
To help you safely test email functionality, Resend provides the following test addresses, each designed to simulate a different delivery event:\
\
| Address                | Delivery event simulated |\
| ---------------------- | ------------------------ |\
| `delivered@resend.dev` | Email being delivered    |\
| `bounced@resend.dev`   | Email bouncing           |\
\
Using these addresses in your tests allows you to validate email flows without risking real-world deliverability problems. For more help sending test emails, see our [testing documentation](/dashboard/emails/send-test-emails).\
\
Whether you need to confirm that an email has been sent, track engagement events, or simulate a bounce scenario, these addresses provide a controlled and predictable way to test your email integration with Resend.\
\
\
# What if an email says delivered but the recipient has not received it?\
Source: https://resend.com/docs/knowledge-base/what-if-an-email-says-delivered-but-the-recipient-has-not-received-it\
\
Learn the steps to take when an email is delivered, but the recipient does not receive it.\
\
Some emails may be marked as `Delivered` but not reach the recipient's inbox due to various inbox sorting variables. This guide provides reasons for and advice on avoiding such issues.\
\
## Why does this happen\
\
When an email is sent, it is marked as `Delivered` once the recipient server accepts it with a `250 OK` response. However, the server can then direct the email to the inbox, queue it for later, route it to the spam folder, or even discard it. This is done by major inbox providers (e.g., Gmail, Yahoo, Outlook), as well as by IT departments and individual users who set up firewalls or filtering rules.\
\
As a result, even though most legitimate emails should land in the intended inboxes, your message might end up in the spam/junk folder or, in rare cases, be deleted.\
\
**Inbox Providers do not share any information on how the messages are later filtered.** Resend is only notified about the initial acceptance and marks the email as `Delivered`. Any subsequent events (e.g., open/click events, unsubscribes) require recipient engagement.\
\
## How to avoid this\
\
### If you are in contact with the user\
\
The easiest way to solve this is by cooperating with the end user. If you have direct communication with the recipient, you can ask them to **check these places for your email**:\
\
* Corporate spam filters or firewalls\
* Personal inbox filtering\
* Promotional, spam, or deleted folders\
* Group inboxes or queues\
\
If they find it, ask them to mark the email as `Not Spam` or add your domain to an allowlist.\
\
### If you are not in contact with the user\
\
Debugging without direct contact with the user is challenging. However, there are some optimizations that can **improve your chances of delivering to their inbox next time**:\
\
* [Configure DMARC](/dashboard/domains/dmarc) to build trust with the inbox provider\
* Warm up new domains slowly before sending large volumes\
* Change all links in your email to use your own domain (matching your sender domain)\
* Turn off open and click tracking\
* Reduce the number of images in your email\
* Improve wording to be succinct, clear, and avoid spammy words\
\
We have an [extensive but practical deliverability guide](/knowledge-base/how-do-i-avoid-gmails-spam-folder) that covers these topics in more detail.\
\
\
# What if my domain is not verifying?\
Source: https://resend.com/docs/knowledge-base/what-if-my-domain-is-not-verifying\
\
Learn what steps to take when your domain doesn't seem to verifying.\
\
Verifying a domain involves a few steps:\
\
1. Add your domain to Resend\
2. Copy the required DNS records from Resend\
3. Add these records to your DNS provider\
4. Wait for verification to complete\
\
When this process is completed correctly, your domain will often verify within 15 minutes of adding the DNS records. What should you do if your domain isn't verifying?\
\
<Tip>\
  If your are having any conflict issues with the `MX` records, [checkout this\
  guide](/knowledge-base/how-do-i-avoid-conflicting-with-my-mx-records).\
</Tip>\
\
## Common verification issues\
\
When your domain doesn't verify as expected, it's typically due to DNS configuration issues. This guide will help you troubleshoot and resolve common verification problems.\
\
### Incorrect DNS records\
\
Usually when a domain doesn't verify, it's because the DNS records were not added correctly. Here's how to check:\
\
1. Confirm that you've added all required records (DKIM, SPF, and MX)\
2. Verify that the records are added at the correct location (the `send` subdomain, not the root domain)\
3. Check that record values match exactly what Resend generated for you\
4. Use a DNS lookup tool like [dns.email](https://dns.email) to verify your records are publicly visible\
\
### DNS provider auto-appending domain names\
\
Some DNS providers automatically append your domain name to record MX values, causing verification failures.\
\
**Problem:**\
\
Your MX record appears as:\
\
`feedback-smtp.eu-west-1.amazonses.com.yourdomain.com`\
\
Instead of:\
\
`feedback-smtp.eu-west-1.amazonses.com`\
\
**Solution:**\
\
In your DNS provider, add a trailing period (dot) at the end of the record value:\
\
`feedback-smtp.eu-west-1.amazonses.com.`\
\
The trailing period tells your DNS provider that this is a fully qualified domain name that should not be modified.\
\
<Tip>\
  Note: The region your domain is added to is in this MX record. It may be\
  `us-east-1`, `eu-west-1`, `ap-northeast-1`, or `sa-east-1` depending on the\
  region.\
</Tip>\
\
### Nameserver conflicts\
\
If your domain's DNS is managed in multiple places (e.g., Vercel, Cloudflare, your domain registrar), you might be adding records in the wrong location.\
\
**How to check:** Run a nameserver lookup for your domain using a tool like [dns.email](https://dns.email) to see which provider actually controls your DNS. Add the Resend records at that provider, not elsewhere.\
\
### DKIM record value mismatches\
\
The DKIM record must match exactly what Resend generated. Common mistakes include:\
\
1. Adding extra quotes or spaces\
2. Truncating long values\
3. Adding SPF information to the DKIM record\
4. Not copying the entire value\
\
Always copy and paste the exact value from Resend's domain configuration page.\
\
### DNS Propagation\
\
After adding or correcting your DNS records:\
\
1. DNS changes can take up to 72 hours to propagate globally (though often much faster)\
2. Use the "Restart verification" button in the Resend dashboard to trigger a fresh verification check\
3. If verification still fails after 24 hours, use [dns.email](https://dns.email) to check if your records are visible publicly\
\
## Need more help?\
\
If you've followed all the steps above and your domain still isn't verifying, contact [Resend support](https://resend.com/help) with:\
\
1. Your domain name\
2. Screenshots of your DNS configuration\
\
Our team will help identify any remaining issues preventing successful verification.\
\
<AccordionGroup>\
  <Accordion title="Check your records in the browser">\
    Tools like [dns.email](https://dns.email) allow you to check your DNS records in the browser.\
\
    Go to this URL and replace `yourdomain.com` with the domain you added in Resend.\
\
        <img src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-1.png?maxW=3516&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1f67771e84b1fe2f803698da519b58d8" alt="Check domain records with dns.email" width="3516" height="2380" data-path="images/domain-not-verifying-1.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-1.png?w=280&maxW=3516&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=aeeccfa70b4d24b78ff6d9798bfd8fa4 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-1.png?w=560&maxW=3516&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=07ac2f651e684d3e5a24d345585c30c9 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-1.png?w=840&maxW=3516&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=158dc9fa3262d29709051879a378ed52 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-1.png?w=1100&maxW=3516&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=01bd6a24276f85ac3d9069cc249085fd 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-1.png?w=1650&maxW=3516&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=190bbee1d0a7330e1d2b254f96cab3f1 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-1.png?w=2500&maxW=3516&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=00b7a6f84df87be7546201058b4fab8a 2500w" data-optimize="true" data-opv="2" />\
\
    You are looking to see the same values that you see in Resend.\
  </Accordion>\
\
  <Accordion title="Check your records in the terminal">\
    Checking your DNS records in the terminal is just as easy. You can use the `nslookup` command and a record type flag to get the same information.\
\
    Replace `yourdomain.com` with whatever you added as the domain in Resend:\
\
    Check your DKIM `TXT` record:\
\
    ```\
    nslookup -type=TXT resend._domainkey.yourdomain.com\
    ```\
\
    Check your SPF `TXT` record:\
\
    ```\
    nslookup -type=TXT send.yourdomain.com\
    ```\
\
    Check your SPF `MX` record:\
\
    ```\
    nslookup -type=MX send.yourdomain.com\
    ```\
\
        <img src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-2.png?maxW=1924&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=3215ac65cbd269c52a7997f35c6cfca5" alt="Check domain records with nslookup" width="1924" height="1202" data-path="images/domain-not-verifying-2.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-2.png?w=280&maxW=1924&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=be5adaf5ce5eea63d2cabe80f1da434f 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-2.png?w=560&maxW=1924&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=746d2819daf2c4637d604d8fdf8b6f93 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-2.png?w=840&maxW=1924&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1e6164895e671df0cf76cba1f7a4db73 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-2.png?w=1100&maxW=1924&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=907fd25f0a4640635a2679a004796717 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-2.png?w=1650&maxW=1924&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=4237cf83971d8f39410dd3b46b50f718 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-2.png?w=2500&maxW=1924&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=41f012cbf57d0a793b4fcb8c59a9d703 2500w" data-optimize="true" data-opv="2" />\
\
    You are looking to see the same values that you see in Resend.\
  </Accordion>\
</AccordionGroup>\
\
\
# What is Resend Pricing\
Source: https://resend.com/docs/knowledge-base/what-is-resend-pricing\
\
Learn more about Resend's pricing plans.\
\
You can learn more about Resend's pricing at [resend.com/pricing](https://resend.com/pricing).\
\
\
# What sending feature should I be using?\
Source: https://resend.com/docs/knowledge-base/what-sending-feature-to-use\
\
How to pick between our different sending features depending on your number of recipients and the nature of the message.\
\
Resend allows you to send both **Transactional** and **Marketing** emails.\
\
## What's the difference between Transactional and Marketing emails?\
\
### What is a Transactional email?\
\
A **Transactional email** is a message triggered by a user action or required for legal compliance. These emails are essential communications that users **cannot unsubscribe** from. Common examples include:\
\
* Order confirmations\
* Password reset emails\
* Account notifications\
\
Typically, transactional emails are **1-to-1** messages sent in response to a specific event.\
\
### What is a Marketing email?\
\
A **Marketing email** is any email that is not transactional. These can be **promotional**, **informative**, or **general communication** messages.\
\
Marketing emails are regulated by laws like **CAN-SPAM** (US) and **CASL** (Canada), and **recipients must have the option to unsubscribe**.\
\
Examples of marketing emails:\
\
* Promotional offers and discounts\
* Newsletters\
* Product updates\
\
Marketing emails can be **1-to-1** (e.g., abandoned cart reminders) or **1-to-many** (e.g., newsletters).\
\
## Should I be sending a Transactional or a Marketing email?\
\
While not exhaustive, here's a table listing different examples of emails and the most appropriate type for each example.\
\
| Type of Message    | Type of Recipient | Transactional | Marketing |\
| ------------------ | ----------------- | ------------- | --------- |\
| Order confirmation | Single            | \uc0\u10003              | \u10799          |\
| Password reset     | Single            | \uc0\u10003              | \u10799          |\
| Abandoned cart     | Single            | \uc0\u10799              | \u10003          |\
| Newsletter         | Multiple          | \uc0\u10799              | \u10003          |\
| Promotional offer  | Multiple          | \uc0\u10799              | \u10003          |\
\
## How to send an email with Resend?\
\
### How to send a Transactional email?\
\
You can send a Transactional email using:\
\
* Our [Send Email API](/api-reference/emails/send-email)\
* Our [Batch Send API](/api-reference/emails/send-batch-emails) (send up to 100 transactional emails in one API call)\
\
### How to send a Marketing email?\
\
You can send Marketing emails using:\
\
* [Resend no-code Editor](/dashboard/broadcasts/introduction) \'96 a collaborative interface for designing emails\
* [Broadcast API](/api-reference/broadcasts/create-broadcast) \'96 for programmatic sending\
\
\
# What's the difference between Opportunistic TLS vs Enforced TLS?\
Source: https://resend.com/docs/knowledge-base/whats-the-difference-between-opportunistic-tls-vs-enforced-tls\
\
Understand the different TLS configurations available.\
\
Resend supports TLS 1.2, TLS 1.1 and TLS 1.0 for TLS connections.\
\
There are two types of TLS configurations available:\
\
* Opportunistic TLS\
* Enforced TLS\
\
## What is Opportunistic TLS?\
\
Opportunistic TLS means that Resend always attempts to make a secure connection to the receiving mail server.\
\
If the receiving server does not support TLS, the fallback is sending the message unencrypted.\
\
## What is Enforced TLS?\
\
Enforced TLS means that the email communication must use TLS no matter what.\
\
If the receiving server does not support TLS, the email will not be sent.\
\
## Is Enforced TLS better than Opportunistic TLS?\
\
One strategy is not necessarily better than the other.\
\
The decision is less about one option being safe and the other being unsafe, and more about one option being safe and the other being safer.\
\
When you have Enforced TLS enabled, you might see an increase in bounce rates because some outdated mail servers do not support TLS.\
\
So it's important to understand the different use cases for each configuration. If you're sending sensitive information like authentication emails, you might want to use Enforced TLS. If you're sending marketing emails, you might want to use Opportunistic TLS.\
\
In simple terms, with Opportunistic TLS, delivery is more important than security. On the other hand, with Enforced TLS, security is more important than delivery.\
\
\
# Why are my emails landing on the Suppression List?\
Source: https://resend.com/docs/knowledge-base/why-are-my-emails-landing-on-the-suppression-list\
\
Learn why your emails land on the Suppression List and how to remove them.\
\
When sending to an email address results in a hard bounce, Resend places this address on the Suppression List. Emails placed on the list cannot be sent to until they are removed.\
\
<Info>\
  We place emails on the Suppression List to protect domain reputation, both\
  yours and ours. Sending an email to a known hard bounce recipient can damage\
  domain reputation and affect email deliverability.\
</Info>\
\
## Reasons emails are placed on the Suppression List\
\
Here are some possible reasons an email address is placed on the Suppression List:\
\
* The recipient's email address **contains a typo**.\
* The recipient's email address **doesn't exist**.\
* The recipient's email server has **permanently blocked delivery**.\
\
## View email bounce details\
\
You can view the reason an email bounced on the [Emails](https://resend.com/emails) page. Open the [Emails](https://resend.com/emails) page and search for the recipient's email address in question.\
\
A human-readable summary of the reason for the bounce displays. For more technical details and suggested next steps, click the **See details** button.\
\
<img alt="Email Bounced button" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-1.png?maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=49083e0313544d142851151dca0b9c44" width="2992" height="1868" data-path="images/email-suppression-list-1.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-1.png?w=280&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=73f5a4d4833355c024af247f8afcecc1 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-1.png?w=560&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=83d8866ca91ad8035563dbe39c73854c 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-1.png?w=840&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=7d9a964ede4a4ad18d9cadce6c338368 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-1.png?w=1100&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=837abf2003b95dc77b484c5d70ea5e84 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-1.png?w=1650&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=2c4f578cc8a93f136e85f4e447d831fe 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-1.png?w=2500&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b05d7d84f80945640d1ac244858d898b 2500w" data-optimize="true" data-opv="2" />\
\
## Removing an email address from the Suppression List\
\
You may be able to send a message to the same recipient in the future if the issue that caused the message to bounce is resolved and the email address is removed from the Suppression List.\
\
<Warning>\
  Remember, if you do not address the issue that caused the email to bounce, the\
  email address will return to the Suppression List the next time you attempt to\
  send to it.\
</Warning>\
\
To remove your recipient from the Suppression List, click on the email in the [emails dashboard](https://resend.com/emails), and click **Remove from suppression list**.\
\
<img alt="Email Bounced button" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b538b978ca9c6b4e888d728388585918" width="2992" height="1868" data-path="images/email-suppression-list-2.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=280&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=998b4945fb435125095e6e7b1753c99e 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=560&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ca9cf2f4520e43ce49a4654b3dba198d 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=840&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ecfac30278f887e829bf7fd7e16882a0 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=1100&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=649b99c23a02f92902a92789b35de32b 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=1650&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=73f6a2aeb0f63e67a6888e4c85478dd9 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=2500&maxW=2992&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=3ade8d9b5bb1109ee1b57ac4b82c6b7f 2500w" data-optimize="true" data-opv="2" />\
\
\
# Why are my open rates not accurate?\
Source: https://resend.com/docs/knowledge-base/why-are-my-open-rates-not-accurate\
\
Learn why your open rate statistics are not accurate and what you can do about it.\
\
## How are open rates tracked?\
\
A 1x1 pixel transparent GIF image is inserted in each email and includes a unique reference. When the image is downloaded, an open event is triggered.\
\
## Why are my open rates not accurate?\
\
Open tracking is generally not accurate because each inbox handles incoming email differently.\
\
**Clipped messages in Gmail** happen when you send a message over 102KB. A message over this size won\'92t be counted as an open unless the recipient views the entire message. Resend\'92s Deliverability Insights on the email will note if a message exceeds this threshold.\
\
**Some inboxes do not download images by default** or block/cache assets with a corporate firewall. This approach can prevent the open event from being tracked.\
\
**Other inboxes open the email prior to delivering** in order to scan for malware or to [protect user privacy](https://www.apple.com/newsroom/2021/06/apple-advances-its-privacy-leadership-with-ios-15-ipados-15-macos-monterey-and-watchos-8/). This approach can trigger an open event without the recipient reading your email.\
\
Because of this, open tracking is **not a statistically accurate way** of detecting if your users are engaging with your content.\
\
## Does open tracking impact inbox placement?\
\
Though open tracking should not impact if your email is delivered, it most likely will impact your inbox placement. Trackers are generally **used by marketers and even spammers**. Because of this, inbox providers will often use open tracking as a signal that your email is promotional, or even spam, and categorize accordingly.\
\
**We suggest disabling open rates for transactional email**, to maximize inbox placement.\
\
## What's the alternative?\
\
Instead of relying on open rates, there are a few other ways to still understand your sending.\
\
1. **Track Clicks:** Monitoring the link clicks is an even more granular way to know how a recipient engaged with your email. By knowing if they clicked, you also know that they read parts of your email and took action.\
2. **Track Outside the Inbox:** Often emails are sent as a means to an end. Maybe it's to increase page visits of an announcement or convert free users to paid. Tracking your sending by metrics outside of the inbox can be a great way to understand the true impact of your sending.\
\
\
# Official SDKs\
Source: https://resend.com/docs/sdks\
\
Open source client libraries for your favorite platforms.\
\
## Official SDKs\
\
<CardGroup cols=\{2\}>\
  <Card title="Node.js" icon="github" href="https://github.com/resend/resend-node">\
    github.com/resend/resend-node\
  </Card>\
\
  <Card title="PHP" icon="github" href="https://github.com/resend/resend-php">\
    github.com/resend/resend-php\
  </Card>\
\
  <Card title="Laravel" icon="github" href="https://github.com/resend/resend-laravel">\
    github.com/resend/resend-laravel\
  </Card>\
\
  <Card title="Python" icon="github" href="https://github.com/resend/resend-python">\
    github.com/resend/resend-python\
  </Card>\
\
  <Card title="Ruby" icon="github" href="https://github.com/resend/resend-ruby">\
    github.com/resend/resend-ruby\
  </Card>\
\
  <Card title="Go" icon="github" href="https://github.com/resend/resend-go">\
    github.com/resend/resend-go\
  </Card>\
\
  <Card title="Java" icon="github" href="https://github.com/resend/resend-java">\
    github.com/resend/resend-java\
  </Card>\
\
  <Card title="Rust" icon="github" href="https://github.com/resend/resend-rust">\
    github.com/resend/resend-rust\
  </Card>\
\
  <Card title=".NET" icon="github" href="https://github.com/resend/resend-dotnet">\
    github.com/resend/resend-dotnet\
  </Card>\
</CardGroup>\
\
## Community SDKs\
\
<CardGroup cols=\{2\}>\
  <Card title="Elixir" icon="github" href="https://github.com/elixir-saas/resend-elixir">\
    github.com/elixir-saas/resend-elixir\
  </Card>\
\
  <Card title="NestJS" icon="github" href="https://github.com/jiangtaste/nestjs-resend">\
    github.com/jiangtaste/nestjs-resend\
  </Card>\
\
  <Card title="Dart" icon="github" href="https://github.com/coderaveHQ/dart_resend">\
    github.com/coderaveHQ/dart\\_resend\
  </Card>\
</CardGroup>\
\
## OpenAPI\
\
<CardGroup cols=\{2\}>\
  <Card title="OpenAPI" icon="github" href="https://github.com/resend/resend-openapi">\
    github.com/resend/resend-openapi\
  </Card>\
</CardGroup>\
\
\
# Security\
Source: https://resend.com/docs/security\
\
An overview of Resend security features and practices.\
\
## Governance\
\
Resend establishes policies and controls, monitors compliance with those controls, and proves the security and compliance to third-party auditors.\
\
Our policies are based on the following **foundational principles**:\
\
<CardGroup cols=\{2\}>\
  <Card title="Least Privilege" icon="square-1">\
    Access should be limited to only those with a legitimate business needs,\
    based on the principle of least privilege.\
  </Card>\
\
  <Card title="Consistency" icon="square-2">\
    Security controls should be applied consistently across all areas of the\
    enterprise.\
  </Card>\
\
  <Card title="Defense in Depth" icon="square-3">\
    Security controls should be implemented and layered according to the\
    principle of defense-in-depth.\
  </Card>\
\
  <Card title="Continuous Improvement" icon="square-4">\
    The implementation of controls should be iterative, continuously improving\
    effectiveness and decreasing friction.\
  </Card>\
</CardGroup>\
\
### Compliance Standards\
\
<AccordionGroup>\
  <Accordion title="SOC 2 Type II" icon="hourglass-clock">\
    Resend is SOC 2 Type II compliant. The audit was completed by Vanta & Advantage Partners.\
    You can download a copy of the report on the [Documents](https://resend.com/settings/documents) page.\
  </Accordion>\
\
  <Accordion title="GDPR" icon="hourglass-clock">\
    Resend is GDPR compliant. You can learn more about our [GDPR compliance](https://resend.com/security/gdpr) or view our [DPA](https://resend.com/legal/dpa).\
  </Accordion>\
</AccordionGroup>\
\
## Data Protection\
\
<CardGroup cols=\{1\}>\
  <Card title="Data at rest" icon="server">\
    All datastores are encrypted at rest. Sensitive collections and tables also\
    use row-level encryption.\
  </Card>\
\
  <Card title="Data in transit" icon="network-wired">\
    Resend uses TLS 1.3 or higher everywhere data is transmitted over\
    potentially insecure networks.\
  </Card>\
\
  <Card title="Data backup" icon="database">\
    Resend backs-up all production data using a point-in-time approach. Backups\
    are persisted for 30 days, and are globally replicated for resiliency\
    against regional disasters.\
  </Card>\
</CardGroup>\
\
## Product Security\
\
### Penetration testing\
\
Resend engages with third-party firms to conduct penetration testing at least annually.\
\
All areas of the Resend product and cloud infrastructure are in-scope for these assessments, and source code is fully available to the testers in order to maximize the effectiveness and coverage.\
\
You can download the latest penetration test report on the [Documents](https://resend.com/settings/documents) page.\
\
### Vulnerability scanning\
\
Resend uses multiple vulnerability monitoring techniques including code-level scanning, dependency scanning, and security reviews to identify and remediate vulnerabilities.\
\
Vulnerabilities are prioritized based on severity and risk, and are remediated according to the following schedule:\
\
* Critical: 15 Days\
* High: 30 Days\
* Medium: 90 Day\
* Low: 180 Days\
* Informational: As needed\
\
## Enterprise Security\
\
<CardGroup cols=\{1\}>\
  <Card title="Endpoint protection" icon="computer">\
    All company devices are equipped with anti-malware protection. Endpoint security alerts are monitored with 24/7/365 coverage. We use MDM software to enforce secure configuration of endpoints, such as disk encryption, screen lock configuration, and software updates.\
  </Card>\
\
  <Card title="Security education" icon="graduation-cap">\
    Resend provides comprehensive security training to all employees upon onboarding and annually.\
\
    Resend's conducts threat briefings with employees to inform them of important security and safety-related updates that require special attention or action.\
  </Card>\
\
  <Card title="Identity and access management" icon="id-badge">\
    Resend employees are granted access to applications based on their role, and automatically deprovisioned upon termination of their employment. Further access must be approved according to the policies set for each application.\
\
    Multi-factor authentication is required for all employees to access company applications.\
  </Card>\
</CardGroup>\
\
## Responsible Disclosure\
\
To report a vulnerability, please check the guidelines on the [Responsible Disclosure](https://resend.com/security/responsible-disclosure) page.\
\
\
# Send emails with Astro\
Source: https://resend.com/docs/send-with-astro\
\
Learn how to send your first email using Astro, Resend, and Node.js.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
If you prefer to watch a video, check out our video walkthrough below.\
\
<iframe width="100%" class="aspect-video" src="https://www.youtube.com/embed/OzDg4QPmmac" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen />\
\
## 1. Install\
\
Install Resend for Node.js.\
\
<CodeGroup>\
  ```bash npm\
  npm install resend\
  ```\
\
  ```bash yarn\
  yarn add resend\
  ```\
\
  ```bash pnpm\
  pnpm add resend\
  ```\
</CodeGroup>\
\
## 2. Install an SSR adapter\
\
Because Astro builds a static site by default, [install an SSR adapter](https://docs.astro.build/en/guides/server-side-rendering/) to enable on-demand rendering of routes.\
\
## 3. Add your API key\
\
[Create an API key](https://resend.com/api-keys) in Resend and add it to your `.env` file to keep your API key secret.\
\
```ini .env\
RESEND_API_KEY="re_xxxxxxxxx"\
```\
\
## 4. Send email using HTML\
\
Create an [Astro Action](https://docs.astro.build/en/guides/actions/) under `actions/index.ts`.\
\
The easiest way to send an email is with the `html` parameter.\
\
<CodeGroup>\
  ```ts src/actions/index.ts\
  import \{ ActionError, defineAction \} from 'astro:actions';\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend(import.meta.env.RESEND_API_KEY);\
\
  export const server = \{\
    send: defineAction(\{\
      accept: 'form',\
      handler: async () => \{\
        const \{ data, error \} = await resend.emails.send(\{\
          from: 'Acme <onboarding@resend.dev>',\
          to: ['delivered@resend.dev'],\
          subject: 'Hello world',\
          html: '<strong>It works!</strong>',\
        \});\
\
        if (error) \{\
          throw new ActionError(\{\
            code: 'BAD_REQUEST',\
            message: error.message,\
          \});\
        \}\
\
        return data;\
      \},\
    \}),\
  \};\
  ```\
</CodeGroup>\
\
Call the `send` action from any frontmatter route, script, or component.\
\
## 5. Try it yourself\
\
<Card title="Astro Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-astro-example">\
  See the full source code.\
</Card>\
\
\
# Send emails using Auth0 with SMTP\
Source: https://resend.com/docs/send-with-auth0-smtp\
\
Learn how to integrate Auth0 with Resend SMTP.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Get the Resend SMTP credentials\
\
When configuring your SMTP integration, you'll need to use the following credentials:\
\
* **Host**: `smtp.resend.com`\
* **Port**: `465`\
* **Username**: `resend`\
* **Password**: `YOUR_API_KEY`\
\
## 2. Integrate with Auth0 SMTP\
\
After logging into your [Auth0](https://auth0.com/) dashboard, you'll need to enable the SMTP integration.\
\
1. From your Auth0 dashboard, go to [Branding > Email Provider](https://manage.auth0.com/#/templates/provider).\
2. Enable the **Use my own email provider** toggle.\
3. Select **SMTP Provider**.\
4. Enter a **From** email address, and then enter the Resend SMTP server's **Host**, **Port**, **Username**, and your API key as the **Password**.\
\
<img alt="Auth0 SMTP - Email Provider Settings" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/auth0-smtp.png?maxW=1986&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=635cf42daae674f3a693fdfa118ddfb9" width="1986" height="2272" data-path="images/auth0-smtp.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/auth0-smtp.png?w=280&maxW=1986&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=22921df570a11d14ed7df53b3b769410 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/auth0-smtp.png?w=560&maxW=1986&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=bc81b4ea4ae619e66e9f1a3e84af8b67 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/auth0-smtp.png?w=840&maxW=1986&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=2f948ad4e7ec57a2fd7bc2e9d8009099 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/auth0-smtp.png?w=1100&maxW=1986&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e843dd95103e1a5b013cd5e426c14e51 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/auth0-smtp.png?w=1650&maxW=1986&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=bbee478a1039a5347dc84a3ac04dce73 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/auth0-smtp.png?w=2500&maxW=1986&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=590e66ae4fd6e1712b9d50dec7fc7fff 2500w" data-optimize="true" data-opv="2" />\
\
## 3. Send a test email\
\
Once you have configured the SMTP settings, click **Save**. Next send a test email using the **Send Test Email** button. If everything is configured correctly, you will receive a confirmation email. If you did not receive an email, check your [Auth0 Logs](https://manage.auth0.com/#/logs).\
\
\
# Send emails with AWS Lambda\
Source: https://resend.com/docs/send-with-aws-lambda\
\
Learn how to send your first email using AWS Lambda.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Create a AWS Lambda function\
\
Go to [aws.amazon.com](https://aws.amazon.com) and create a new Lambda function using the Node.js 18.x runtime.\
\
<img alt="AWS Lambda - New Function" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-new-function.png?maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ba5a88c1f8d13ef6aec4586f8e7e5d28" width="3414" height="1886" data-path="images/aws-lambda-new-function.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-new-function.png?w=280&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a75c3b76ce79cb3b96caa9a824fa237c 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-new-function.png?w=560&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7962cf8bdef621f10aac3d786a86e0aa 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-new-function.png?w=840&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=155ee84dff99037b848d7a2740f7bdb4 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-new-function.png?w=1100&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=35beaaa1bc0c222f632a3d2183e1ce91 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-new-function.png?w=1650&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=9cfba5ea1869233e694e0e7ebd4bcf3f 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-new-function.png?w=2500&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b5b33a889ff620f1fe1dfce2f184b19a 2500w" data-optimize="true" data-opv="2" />\
\
## 2. Edit the handler function\
\
Paste the following code into the browser editor:\
\
```js index.mjs\
const RESEND_API_KEY = 're_xxxxxxxxx';\
\
export const handler = async (event) => \{\
  const res = await fetch('https://api.resend.com/emails', \{\
    method: 'POST',\
    headers: \{\
      'Content-Type': 'application/json',\
      'Authorization': `Bearer $\{RESEND_API_KEY\}`,\
    \},\
    body: JSON.stringify(\{\
      from: 'Acme <onboarding@resend.dev>',\
      to: ['delivered@resend.dev'],\
      subject: 'hello world',\
      html: '<strong>it works!</strong>',\
    \}),\
  \});\
\
  if (res.ok) \{\
    const data = await res.json();\
\
    return \{\
      statusCode: 200,\
      body: data,\
    \};\
  \}\
\};\
```\
\
## 3. Deploy and send email\
\
Click on `Deploy` and then `Test` at the top of the screen.\
\
<img alt="AWS Lambda - Edit Function" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-edit-function.png?maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e387a0149d1568138e2035e161eee30f" width="3414" height="1886" data-path="images/aws-lambda-edit-function.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-edit-function.png?w=280&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ff6ac6dece43ef606a5d3bd5981808aa 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-edit-function.png?w=560&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a0745cae5d7e60fcfc812bbffafe697b 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-edit-function.png?w=840&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=f1e3cd8f3f4b7148d2ae73dce319f2ab 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-edit-function.png?w=1100&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7263f64d86c934f8da24778a7aed832e 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-edit-function.png?w=1650&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=17fbd5c6495d81a0aa7a8918b66fcdf5 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-edit-function.png?w=2500&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d4ea8b45d1095c90be204bfde7e7bb9b 2500w" data-optimize="true" data-opv="2" />\
\
## 4. Try it yourself\
\
<Card title="AWS Lambda Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-aws-lambda-example">\
  See the full source code.\
</Card>\
\
\
# Send emails with Axum\
Source: https://resend.com/docs/send-with-axum\
\
Send your first email using Axum and the Resend Rust SDK.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
Get the Resend Rust SDK and the [Tokio](https://tokio.rs) runtime.\
\
```bash\
cargo add resend-rs\
cargo add tokio -F macros,rt-multi-thread\
```\
\
## 2. Send an Email\
\
```rust\
use std::sync::Arc;\
\
use axum::\{extract::State, http::StatusCode, routing::get, Router\};\
use resend_rs::types::CreateEmailBaseOptions;\
use resend_rs::\{Resend, Result\};\
\
// Cloning the Resend client is fine and cheap as the internal HTTP client is\
// not cloned.\
#[derive(Clone)]\
struct AppState \{\
  resend: Resend,\
\}\
\
#[tokio::main]\
async fn main() \{\
  let shared_state = Arc::new(AppState \{\
    resend: Resend::new("re_xxxxxxxxx"),\
  \});\
\
  // build our application with a single route\
  let app = Router::new()\
    .route("/", get(endpoint))\
    // provide the state so the router can access it\
    .with_state(shared_state);\
\
  // run our app with hyper, listening globally on port 3000\
  let listener = tokio::net::TcpListener::bind("0.0.0.0:3000").await.unwrap();\
  axum::serve(listener, app).await.unwrap();\
\}\
\
async fn endpoint(State(state): State<Arc<AppState>>) -> Result<String, StatusCode> \{\
  let from = "Acme <onboarding@resend.dev>";\
  let to = ["delivered@resend.dev"];\
  let subject = "Hello World";\
\
  let email = CreateEmailBaseOptions::new(from, to, subject)\
    .with_html("<strong>It works!</strong>");\
\
  // access the state via the `State` extractor and handle the error\
  match state.resend.emails.send(email).await \{\
    Ok(email) => Ok(email.id.to_string()),\
    Err(_) => Err(StatusCode::INTERNAL_SERVER_ERROR),\
  \}\
\}\
```\
\
Opening your browser at `http://localhost:3000` (or running `curl localhost:3001`) should send an\
email and return you its id!\
\
## 3. Try it yourself!\
\
<Card title="Axum Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-axum-example">\
  See the full source code.\
</Card>\
\
\
# Send emails with Bun\
Source: https://resend.com/docs/send-with-bun\
\
Learn how to send your first email using Bun and the Resend Node.js SDK.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
Get the Resend Node.js SDK.\
\
```bash\
bun install resend\
```\
\
## 2. Create an email template\
\
Start by creating your email template on `email-template.tsx`.\
\
```tsx email-template.tsx\
import * as React from 'react';\
\
interface EmailTemplateProps \{\
  firstName: string;\
\}\
\
export function EmailTemplate(\{ firstName \}: EmailTemplateProps) \{\
  return (\
    <div>\
      <h1>Welcome, \{firstName\}!</h1>\
    </div>\
  );\
\}\
```\
\
## 3. Send email using React\
\
Create a new file `index.tsx` and send your first email.\
\
```tsx index.tsx\
import \{ Resend \} from 'resend';\
import \{ EmailTemplate \} from './email-template';\
\
const resend = new Resend(process.env.RESEND_API_KEY);\
\
const server = Bun.serve(\{\
  port: 3000,\
  async fetch() \{\
    const \{ data, error \} = await resend.emails.send(\{\
      from: 'Acme <onboarding@resend.dev>',\
      to: ['delivered@resend.dev'],\
      subject: 'Hello World',\
      react: EmailTemplate(\{ firstName: 'Vitor' \}),\
    \});\
\
    if (error) \{\
      return new Response(JSON.stringify(\{ error \}));\
    \}\
\
    return new Response(JSON.stringify(\{ data \}));\
  \},\
\});\
\
console.log(`Listening on http://localhost:$\{server.port\} ...`);\
```\
\
Start the local server by running `bun index.tsx` and navigate to `http://localhost:3000`.\
\
## 3. Try it yourself\
\
<Card title="Bun Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-bun-example">\
  See the full source code.\
</Card>\
\
\
# Send emails with Cloudflare Workers\
Source: https://resend.com/docs/send-with-cloudflare-workers\
\
Learn how to send your first email using Cloudflare Workers.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
* Have a Cloudflare worker with a bundling setup\
  * Recommended to be bootstrapped with `npm create cloudflare`\
\
## 1. Install\
\
Get the Resend Node.js SDK.\
\
<CodeGroup>\
  ```bash npm\
  npm install resend\
  ```\
\
  ```bash yarn\
  yarn add resend\
  ```\
\
  ```bash pnpm\
  pnpm add resend\
  ```\
</CodeGroup>\
\
## 2. Create an email template\
\
Start by creating your email template on `src/emails/email-template.tsx`:\
\
```tsx src/emails/email-template.tsx\
import * as React from 'react';\
\
interface EmailTemplateProps \{\
  firstName: string;\
\}\
\
export function EmailTemplate(\{ firstName \}: EmailTemplateProps) \{\
  return (\
    <div>\
      <h1>Welcome, \{firstName\}!</h1>\
    </div>\
  );\
\}\
\
export default EmailTemplate;\
```\
\
## 3. Send the email using React and the SDK\
\
Change the file extension of the worker's main file to `tsx` and modify your configurations.\
\
After that, you can send your email using the `react` parameter:\
\
```tsx src/index.tsx\
import \{ Resend \} from 'resend';\
import \{ EmailTemplate \} from './emails/email-template';\
\
export default \{\
  async fetch(request, env, context): Promise<Response> \{\
    const resend = new Resend('re_xxxxxxxxx');\
\
    const data = await resend.emails.send(\{\
      from: 'Acme <onboarding@resend.dev>',\
      to: ['delivered@resend.dev'],\
      subject: 'hello world',\
      react: <EmailTemplate firstName="John" />,\
    \});\
\
    return Response.json(data);\
  \},\
\} satisfies ExportedHandler<Env, ExecutionContext>;\
```\
\
## 4. Deploy and send email\
\
Run `wrangler deploy` and wait for it to finish. Once it's done, it will\
give you a URL to try out, like `https://my-worker.your_name.workers.dev`,\
that you can open and verify that your email has been sent.\
\
## 5. Try it yourself\
\
<Card title="Cloudflare Workers Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-cloudflare-workers-example">\
  See the full source code.\
</Card>\
\
\
# Send emails using Customer.io with SMTP\
Source: https://resend.com/docs/send-with-customer-io-smtp\
\
Learn how to integrate Customer.io with Resend SMTP.\
\
### Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Get the Resend SMTP credentials\
\
When configuring your SMTP integration, you'll need to use the following credentials:\
\
* **Host**: `smtp.resend.com`\
* **Port**: `465`\
* **Username**: `resend`\
* **Password**: `YOUR_API_KEY`\
\
## 2. Integrate with Customer.io SMTP\
\
After logging into your [Customer.io](https://customer.io) account, you'll need to enable the SMTP integration.\
\
1. Go to **Settings** > **Workspace Settings**.\
\
<img alt="Customer.io SMTP - Workspace Settings" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-1.png?maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e0b5e63430afba56a736ff2165611a80" width="3414" height="1886" data-path="images/customer-io-smtp-1.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-1.png?w=280&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5b5fa2715a50dd7c893332ef399d87ae 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-1.png?w=560&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7ac3648463473b62b2d397489bb994e3 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-1.png?w=840&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=0226267a51b3108e4aa634341b9029fa 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-1.png?w=1100&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=444ef7ba928de42817c6067b6a27dbbd 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-1.png?w=1650&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4becda715d89bf0317ed1af5221a065d 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-1.png?w=2500&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5ad63ecc238cf46d2660e0d6b0e83d71 2500w" data-optimize="true" data-opv="2" />\
\
2. Go to the Messaging tab and select **Email**.\
\
<img alt="Customer.io SMTP - Email" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-2.png?maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c816ecd21f81833bcd9e7d6dc9393d2f" width="3414" height="1886" data-path="images/customer-io-smtp-2.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-2.png?w=280&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ba4a87fa7db7f240bca906b906e33328 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-2.png?w=560&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=19f068dd9573d3ef4f613e8fd54eb248 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-2.png?w=840&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=08a9f8def9d0cbf268a4cfed0da98a64 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-2.png?w=1100&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5c9a2e72af9b77fe192d13d8f84e4838 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-2.png?w=1650&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d8cadfa29c09e8f8ec3e16144ba98f42 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-2.png?w=2500&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=488a48a33d13f696431066226f8b8eb5 2500w" data-optimize="true" data-opv="2" />\
\
3. Select the **Custom SMTP** tab and click **Add Custom SMTP Server**.\
\
<img alt="Customer.io SMTP - Add Custom SMTP Server" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-3.png?maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=6d2233f94e9082ac2499faa2afdb31bd" width="3414" height="1886" data-path="images/customer-io-smtp-3.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-3.png?w=280&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=12d9ad2d8f9a243f16828dd115412f4c 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-3.png?w=560&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=38479aa75768c798746992549decb32b 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-3.png?w=840&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=f6a075dabaa2fb224a1aea8952d72300 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-3.png?w=1100&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=6f71474061eb8f0cdd249a9a984dc0b2 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-3.png?w=1650&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e4558806b54e9c24cd767d7a1be2d1df 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-3.png?w=2500&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8044177b81cb55df7b87bb4643ae69b5 2500w" data-optimize="true" data-opv="2" />\
\
4. Select **Other SMTP** and click **Continue to set up**.\
\
<img alt="Customer.io SMTP - Other SMTP" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-4.png?maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=18667ae48e530a0189b450055533b92a" width="3414" height="1886" data-path="images/customer-io-smtp-4.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-4.png?w=280&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1dbab478974be749da94624027b58be8 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-4.png?w=560&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7cdef33a3c08433ae9dc08dff37230af 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-4.png?w=840&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=45600a55a16cb1e84c46fc029a22dfb7 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-4.png?w=1100&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=18d1201863805c5b6a1a635445fa5a37 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-4.png?w=1650&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ff9b9b1b63aae5e41d1a226fcbf92405 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-4.png?w=2500&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=402d7ce477dfa8ea1f15e3dfdc1e4f11 2500w" data-optimize="true" data-opv="2" />\
\
5. Copy-and-paste the SMTP credentials from Resend to Customer.io.\
\
<img alt="Customer.io SMTP integration" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-5.png?maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=37aa42d36b9dd622225313ec7c95e0d0" width="3414" height="1886" data-path="images/customer-io-smtp-5.png" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-5.png?w=280&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d7b33f16a4c25bd08147bdb65acf7273 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-5.png?w=560&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7dc84d9631e3a7716ee0b82cbb9e9bee 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-5.png?w=840&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a08ed0244c00a05e12e8ceed743ee124 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-5.png?w=1100&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=f64d34636304bff685d0a0fead3642e6 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-5.png?w=1650&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=002bf1eb4e4523a9cf7ce926e6776b38 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-5.png?w=2500&maxW=3414&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4d5a20a93b9589faeabd1abe31728f64 2500w" data-optimize="true" data-opv="2" />\
\
\
# Send emails with Deno Deploy\
Source: https://resend.com/docs/send-with-deno-deploy\
\
Learn how to send your first email using Deno Deploy.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Create a Deno Deploy project\
\
Go to [dash.deno.com/projects](https://dash.deno.com/projects) and create a new playground project.\
\
<img alt="Deno Deploy - New Project" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-new-project.png?maxW=3414&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=460f9ccd9674b93df19cbecaa2b007c4" width="3414" height="1886" data-path="images/deno-deploy-new-project.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-new-project.png?w=280&maxW=3414&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=88150a9fdd25d1175a1584cfea0d5995 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-new-project.png?w=560&maxW=3414&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c74358a115d31c8cc35c8373a4fe267c 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-new-project.png?w=840&maxW=3414&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b4716314aa5ce1d0176723d570bf4094 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-new-project.png?w=1100&maxW=3414&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=69dfa7229c732c0cbc15ba3ce362040d 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-new-project.png?w=1650&maxW=3414&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=0f693c632f7affe501f5058cfcafe486 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-new-project.png?w=2500&maxW=3414&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=e58a76df93bf9ae41217b78c379b870d 2500w" data-optimize="true" data-opv="2" />\
\
## 2. Edit the handler function\
\
Paste the following code into the browser editor:\
\
```js index.ts\
import \{ serve \} from "https://deno.land/std@0.190.0/http/server.ts";\
\
const RESEND_API_KEY = 're_xxxxxxxxx';\
\
const handler = async (_request: Request): Promise<Response> => \{\
    const res = await fetch('https://api.resend.com/emails', \{\
        method: 'POST',\
        headers: \{\
            'Content-Type': 'application/json',\
            'Authorization': `Bearer $\{RESEND_API_KEY\}`\
        \},\
        body: JSON.stringify(\{\
            from: 'Acme <onboarding@resend.dev>',\
            to: ['delivered@resend.dev'],\
            subject: 'hello world',\
            html: '<strong>it works!</strong>',\
        \})\
    \});\
\
    if (res.ok) \{\
        const data = await res.json();\
\
        return new Response(data, \{\
            status: 200,\
            headers: \{\
                'Content-Type': 'application/json',\
            \},\
        \});\
    \}\
\};\
\
serve(handler);\
```\
\
## 3. Deploy and send email\
\
Click on `Save & Deploy` at the top of the screen.\
\
<img alt="Deno Deploy - Playground" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-playground.png?maxW=3414&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=71ae0822123d97b9e9b2a6e06a0915fa" width="3414" height="1886" data-path="images/deno-deploy-playground.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-playground.png?w=280&maxW=3414&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ec08be08c63261222171c5978f98ba06 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-playground.png?w=560&maxW=3414&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=718d39927ae1a6cdab29d89b600fa887 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-playground.png?w=840&maxW=3414&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=32da7d7cceb1e499eb3366ae7ceabd34 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-playground.png?w=1100&maxW=3414&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=18160bf7268ff0ace7c926186313bc2d 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-playground.png?w=1650&maxW=3414&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=49d276b4e21c021c7f828797b1acd894 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-playground.png?w=2500&maxW=3414&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=23c05787d3276b1144ffb49ff2fa8a5c 2500w" data-optimize="true" data-opv="2" />\
\
## 4. Try it yourself\
\
<Card title="Deno Deploy Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-deno-deploy-example">\
  See the full source code.\
</Card>\
\
\
# Send emails using Django with SMTP\
Source: https://resend.com/docs/send-with-django-smtp\
\
Learn how to integrate Django with Resend SMTP.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
* Install `virtualenv` by running `pip install virtualenv`\
\
## 1. Setup your environment\
\
Create and activate your new virtualenv.\
\
```bash\
virtualenv venv\
source venv/bin/activate\
```\
\
Install dependencies.\
\
```sh\
pip install -r requirements.txt\
```\
\
Set your `RESEND_API_KEY` environment variable by running.\
\
```sh\
export RESEND_API_KEY="re_xxxxxxxxx"\
```\
\
## 2. Send email using Django's SMTP EmailMessage\
\
Set the necessary attributes in your `settings.py` file.\
\
```py\
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\
RESEND_SMTP_PORT = 587\
RESEND_SMTP_USERNAME = 'resend'\
RESEND_SMTP_HOST = 'smtp.resend.com'\
```\
\
Use Django's `get_connection` and `EmailMessage`\
\
```py\
import os\
from django.conf import settings\
from django.http import JsonResponse\
from django.core.mail import EmailMessage, get_connection\
\
# Sample Django view\
def index(request):\
\
    subject = "Hello from Django SMTP"\
    recipient_list = ["delivered@resend.dev"]\
    from_email = "onboarding@resend.dev"\
    message = "<strong>it works!</strong>"\
\
    with get_connection(\
        host=settings.RESEND_SMTP_HOST,\
        port=settings.RESEND_SMTP_PORT,\
        username=settings.RESEND_SMTP_USERNAME,\
        password=os.environ["RESEND_API_KEY"],\
        use_tls=True,\
        ) as connection:\
            r = EmailMessage(\
                  subject=subject,\
                  body=message,\
                  to=recipient_list,\
                  from_email=from_email,\
                  connection=connection).send()\
    return JsonResponse(\{"status": "ok"\})\
```\
\
## 3. Try it yourself\
\
<Card title="Django SMTP Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-django-smtp-example">\
  See the full source code.\
</Card>\
\
\
# Send emails with .NET\
Source: https://resend.com/docs/send-with-dotnet\
\
Learn how to send your first email using the Resend .NET SDK.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
<CodeGroup>\
  ```bash dotnet CLI\
  dotnet add package Resend\
  ```\
\
  ```bash Visual Studio (Package Manager Console)\
  PM> Install-Package Resend\
  ```\
</CodeGroup>\
\
## 2. Send emails using HTML\
\
In the startup of your application, configure the DI container as follows:\
\
```csharp\
using Resend;\
\
builder.Services.AddOptions();\
builder.Services.AddHttpClient<ResendClient>();\
builder.Services.Configure<ResendClientOptions>( o =>\
\{\
    o.ApiToken = Environment.GetEnvironmentVariable( "RESEND_APITOKEN" )!;\
\} );\
builder.Services.AddTransient<IResend, ResendClient>();\
```\
\
Send an email using the injected `IResend` instance:\
\
```csharp\
using Resend;\
\
public class FeatureImplementation\
\{\
    private readonly IResend _resend;\
\
\
    public FeatureImplementation( IResend resend )\
    \{\
        _resend = resend;\
    \}\
\
\
    public Task Execute()\
    \{\
        var message = new EmailMessage();\
        message.From = "Acme <onboarding@resend.dev>";\
        message.To.Add( "delivered@resend.dev" );\
        message.Subject = "hello world";\
        message.HtmlBody = "<strong>it works!</strong>";\
\
        await _resend.EmailSendAsync( message );\
    \}\
\}\
```\
\
## 3. Try it yourself\
\
<CardGroup cols=\{2\}>\
  <Card title="ASP.NET Controller API" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-dotnet/tree/master/examples/WebControllerApi">\
    See the full source code.\
  </Card>\
\
  <Card title="" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-dotnet/tree/master/examples">\
    List of .NET examples (API, Web, HTML rendering, Async sending).\
  </Card>\
</CardGroup>\
\
\
# Send emails with Elixir\
Source: https://resend.com/docs/send-with-elixir\
\
Learn how to send your first email using the Resend Elixir SDK.\
\
<Info>\
  This guides utilizes an [open source\
  library](https://github.com/elixir-saas/resend-elixir) contributed by a\
  community member. It's not developed, maintained, or supported by Resend\
  directly.\
</Info>\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
Install by adding `resend` to your list of dependencies in `mix.exs`:\
\
<CodeGroup>\
  ```elixir mix.exs\
  def deps do\
    [\
      \{:resend, "~> 0.4.0"\}\
    ]\
  end\
  ```\
</CodeGroup>\
\
## 2. Send email using HTML\
\
The easiest way to send an email is by using the `html` parameter.\
\
```elixir send.exs\
client = Resend.client(api_key: System.get_env("RESEND_API_KEY"))\
\
Resend.Emails.send(client, %\{\
  from: "Acme <onboarding@resend.dev>",\
  to: ["delivered@resend.dev"],\
  subject: "hello world",\
  html: "<strong>it works!</strong>"\
\})\
```\
\
## 3. Try it yourself\
\
<Card title="Elixir Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-elixir-example">\
  See the full source code.\
</Card>\
\
\
# Send emails with Express\
Source: https://resend.com/docs/send-with-express\
\
Learn how to send your first email using Express and the Resend Node.js SDK.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
Get the Resend Node.js SDK.\
\
<CodeGroup>\
  ```bash npm\
  npm install resend\
  ```\
\
  ```bash yarn\
  yarn add resend\
  ```\
\
  ```bash pnpm\
  pnpm add resend\
  ```\
</CodeGroup>\
\
## 2. Send email using HTML\
\
The easiest way to send an email is by using the `html` parameter.\
\
```js server.ts\
import express, \{ Request, Response \} from "express";\
import \{ Resend \} from "resend";\
\
const app = express();\
const resend = new Resend("re_xxxxxxxxx");\
\
app.get("/", async (req: Request, res: Response) => \{\
  const \{ data, error \} = await resend.emails.send(\{\
    from: "Acme <onboarding@resend.dev>",\
    to: ["delivered@resend.dev"],\
    subject: "hello world",\
    html: "<strong>it works!</strong>",\
  \});\
\
  if (error) \{\
    return res.status(400).json(\{ error \});\
  \}\
\
  res.status(200).json(\{ data \});\
\});\
\
app.listen(3000, () => \{\
  console.log("Listening on http://localhost:3000");\
\});\
```\
\
## 3. Try it yourself\
\
<Card title="Express Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-express-example">\
  See the full source code.\
</Card>\
\
\
# Send emails with FastAPI\
Source: https://resend.com/docs/send-with-fastapi\
\
Learn how to send your first email using FastAPI and the Resend Python SDK.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
Get the Resend Python SDK.\
\
<CodeGroup>\
  ```bash Pip\
  pip install resend\
  ```\
</CodeGroup>\
\
## 2. Send email using HTML\
\
The easiest way to send an email is by using the `html` parameter.\
\
```py main.py\
import resend\
from typing import Dict\
from fastapi import FastAPI\
\
resend.api_key = "re_xxxxxxxxx"\
\
app = FastAPI()\
\
@app.post("/")\
def send_mail() -> Dict:\
    params: resend.Emails.SendParams = \{\
        "from": "onboarding@resend.dev",\
        "to": ["delivered@resend.dev"],\
        "subject": "Hello World",\
        "html": "<strong>it works!</strong>",\
    \}\
    email: resend.Email = resend.Emails.send(params)\
    return email\
```\
\
## 3. Try it yourself\
\
<Card title="FastAPI Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-fastapi-example">\
  See the full source code.\
</Card>\
\
\
# Send emails with Flask\
Source: https://resend.com/docs/send-with-flask\
\
Learn how to send your first email using Flask and the Resend Python SDK.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
Get the Resend Python SDK.\
\
<CodeGroup>\
  ```bash Pip\
  pip install resend\
  ```\
</CodeGroup>\
\
## 2. Send email using HTML\
\
The easiest way to send an email is by using the `html` parameter.\
\
```py index.py\
import resend\
import os\
from flask import Flask, jsonify\
\
resend.api_key = os.environ["RESEND_API_KEY"]\
\
app = Flask(__name__)\
\
\
@app.route("/")\
def index():\
    params: resend.Emails.SendParams = \{\
        "from": "Acme <onboarding@resend.dev>",\
        "to": ["delivered@resend.dev"],\
        "subject": "hello world",\
        "html": "<strong>it works!</strong>",\
    \}\
\
    r = resend.Emails.send(params)\
    return jsonify(r)\
\
\
if __name__ == "__main__":\
    app.run()\
```\
\
## 3. Try it yourself\
\
<Card title="Flask Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-flask-example">\
  See the full source code.\
</Card>\
\
\
# Send emails with Go\
Source: https://resend.com/docs/send-with-go\
\
Learn how to send your first email using the Resend Go SDK.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
Get the Resend Go SDK.\
\
<CodeGroup>\
  ```bash bash\
  go get github.com/resend/resend-go/v2\
  ```\
</CodeGroup>\
\
## 2. Send email using HTML\
\
The easiest way to send an email is by using the `html` parameter.\
\
```Go main.go\
package main\
\
import "github.com/resend/resend-go/v2"\
\
func main() \{\
    apiKey := "re_xxxxxxxxx"\
\
    client := resend.NewClient(apiKey)\
\
    params := &resend.SendEmailRequest\{\
        From:    "Acme <onboarding@resend.dev>",\
        To:      []string\{"delivered@resend.dev"\},\
        Html:    "<strong>hello world</strong>",\
        Subject: "Hello from Golang",\
        Cc:      []string\{"cc@example.com"\},\
        Bcc:     []string\{"bcc@example.com"\},\
        ReplyTo: "replyto@example.com",\
    \}\
\
    sent, err := client.Emails.Send(params)\
    if err != nil \{\
        fmt.Println(err.Error())\
        return\
    \}\
    fmt.Println(sent.Id)\
\}\
```\
\
## 3. Try it yourself\
\
<Card title="Golang Examples" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-go-example">\
  See the full source code.\
</Card>\
\
\
# Send emails with Hono\
Source: https://resend.com/docs/send-with-hono\
\
Learn how to send your first email using Hono and the Resend Node.js SDK.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
Get the Resend Node.js SDK.\
\
<CodeGroup>\
  ```bash npm\
  npm install resend\
  ```\
\
  ```bash yarn\
  yarn add resend\
  ```\
\
  ```bash pnpm\
  pnpm add resend\
  ```\
</CodeGroup>\
\
## 2. Create an email template\
\
Start by creating your email template on `emails/email-template.tsx`.\
\
```tsx emails/email-template.tsx\
import * as React from 'react';\
\
interface EmailTemplateProps \{\
  firstName: string;\
\}\
\
export function EmailTemplate(\{ firstName \}: EmailTemplateProps) \{\
  return (\
    <div>\
      <h1>Welcome, \{firstName\}!</h1>\
    </div>\
  );\
\}\
```\
\
To use JSX/TSX with Hono, we need to modify the `tsconfig.json`.\
\
```json tsconfig.json\
\{\
  "compilerOptions": \{\
    "jsx": "react-jsx",\
    "jsxImportSource": "react"\
  \}\
\}\
```\
\
## 3. Send email using React\
\
Create a new file `index.tsx` and send your first email.\
\
```ts index.tsx\
import \{ Hono \} from 'hono';\
import \{ Resend \} from 'resend';\
import \{ EmailTemplate \} from './emails/email-template';\
\
const app = new Hono();\
const resend = new Resend('re_xxxxxxxxx');\
\
app.get('/', async (c) => \{\
  const \{ data, error \} = await resend.emails.send(\{\
    from: 'Acme <onboarding@resend.dev>',\
    to: ['delivered@resend.dev'],\
    subject: 'hello world',\
    react: <EmailTemplate firstName="John" />,\
  \});\
\
  if (error) \{\
    return c.json(error, 400);\
  \}\
\
  return c.json(data);\
\});\
\
export default app;\
```\
\
## 4. Try it yourself\
\
<Card title="Hono Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-hono-example">\
  See the full source code.\
</Card>\
\
\
# Send emails with Java\
Source: https://resend.com/docs/send-with-java\
\
Learn how to send your first email using the Resend Java SDK.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
<CodeGroup>\
  ```bash Gradle\
  implementation 'com.resend:resend-java:3.1.0'\
  ```\
\
  ```xml Maven\
  <dependency>\
      <groupId>com.resend</groupId>\
      <artifactId>resend-java</artifactId>\
      <version>3.1.0</version>\
  </dependency>\
  ```\
</CodeGroup>\
\
## 2. Send emails using HTML\
\
```java Main.java\
import com.resend.*;\
\
public class Main \{\
    public static void main(String[] args) \{\
        Resend resend = new Resend("re_xxxxxxxxx");\
\
        CreateEmailOptions params = CreateEmailOptions.builder()\
                .from("Acme <onboarding@resend.dev>")\
                .to("delivered@resend.dev")\
                .subject("it works!")\
                .html("<strong>hello world</strong>")\
                .build();\
\
         try \{\
            CreateEmailResponse data = resend.emails().send(params);\
            System.out.println(data.getId());\
        \} catch (ResendException e) \{\
            e.printStackTrace();\
        \}\
    \}\
\}\
```\
\
## 3. Try it yourself\
\
<Card title="Java Examples" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-java-example">\
  See the full source code.\
</Card>\
\
\
# Send emails with Laravel\
Source: https://resend.com/docs/send-with-laravel\
\
Learn how to send your first email using Laravel.\
\
## Prerequisites\
\
To get the most out of this guide, you will need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
Prefer watching a video? Check out this video walkthrough below.\
\
<div className="aspect-video">\
  <iframe width="100%" height="100%" src="https://www.youtube.com/embed/xUTeIIt982w" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen />\
</div>\
\
## 1. Install\
\
First, install Resend for Laravel using the Composer package manager:\
\
```bash Composer\
composer require resend/resend-laravel\
```\
\
## 2. Configuration\
\
### API key\
\
Next, you should configure your Resend API key in your application's `.env` file:\
\
```ini .env\
RESEND_API_KEY=re_xxxxxxxxx\
```\
\
### Mail driver\
\
To use Resend as your mail driver, first create a new mailer definition, in the `mailers` array within your application's `config/mail.php` configuration file:\
\
```php mail.php\
'resend' => [\
    'transport' => 'resend',\
],\
```\
\
Next, update your application's `.env` file to use the Resend mail driver:\
\
```ini .env\
MAIL_MAILER=resend\
MAIL_FROM_ADDRESS=onboarding@resend.dev\
MAIL_FROM_NAME=Acme\
```\
\
## 3. Send an email\
\
Resend for Laravel provides two convenient ways to send emails, using Laravel's email service or the `Resend` API facade.\
\
### Using the Mail Facade\
\
```php OrderShipmentController.php\
<?php\
\
namespace App\\Http\\Controllers;\
\
use App\\Http\\Controllers\\Controller;\
use App\\Mail\\OrderShipped;\
use App\\Models\\Order;\
use Illuminate\\Http\\RedirectResponse;\
use Illuminate\\Http\\Request;\
use Illuminate\\Support\\Facades\\Mail;\
\
class OrderShipmentController extends Controller\
\{\
    /**\
     * Ship the given order.\
     */\
    public function store(Request $request): RedirectResponse\
    \{\
        $order = Order::findOrFail($request->order_id);\
\
        // Ship the order...\
\
        Mail::to($request->user())->send(new OrderShipped($order));\
\
        return redirect('/orders');\
    \}\
\}\
```\
\
### Using the Resend Facade\
\
```php OrderShipmentController.php\
<?php\
\
namespace App\\Http\\Controllers;\
\
use App\\Http\\Controllers\\Controller;\
use App\\Mail\\OrderShipped;\
use App\\Models\\Order;\
use Illuminate\\Http\\RedirectResponse;\
use Illuminate\\Http\\Request;\
use Resend\\Laravel\\Facades\\Resend;\
\
class OrderShipmentController extends Controller\
\{\
    /**\
     * Ship the given order.\
     */\
    public function store(Request $request): RedirectResponse\
    \{\
        $order = Order::findOrFail($request->order_id);\
\
        // Ship the order...\
\
        Resend::emails()->send([\
            'from' => 'Acme <onboarding@resend.dev>',\
            'to' => [$request->user()->email],\
            'subject' => 'hello world',\
            'html' => (new OrderShipped($order))->render(),\
        ])\
\
        return redirect('/orders');\
    \}\
\}\
```\
\
## 4. Receiving webhook requests\
\
By default, Resend for Laravel includes a webhook controller to respond to the `/resend/webhook` URL path. The controller will dispatch a Laravel event that corresponds to a Resend event. For example, an `email.delivered` event type will send an `EmailDelivered` Laravel event.\
\
### Register the webhook endpoint\
\
Register your publicly accessible HTTPS URL in the Resend dashboard.\
\
<Tip>\
  For development, you can create a tunnel to your localhost server using a tool\
  like [ngrok](https://ngrok.com/download). For example:\
  `https://8733-191-204-177-89.sa.ngrok.io/resend/webhook`\
</Tip>\
\
<img alt="Add Webhook" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/laravel-create-webhook.png?maxW=1280&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=189bd803bb866cf57d1b1f1f8c3ff3d0" width="1280" height="800" data-path="images/laravel-create-webhook.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/laravel-create-webhook.png?w=280&maxW=1280&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=838c6c1db258fb643e7a25104ffab008 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/laravel-create-webhook.png?w=560&maxW=1280&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=0d86ff684c5add76bb3333f7ceae4fa0 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/laravel-create-webhook.png?w=840&maxW=1280&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=7d7e95ecc8429067f601e2fd71a7892f 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/laravel-create-webhook.png?w=1100&maxW=1280&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=11cdb9f358306c6ef2eaf2a822e3cb5e 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/laravel-create-webhook.png?w=1650&maxW=1280&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=626f1f99c40a33333883326d5e298eae 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/laravel-create-webhook.png?w=2500&maxW=1280&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c4ed1de062e130a08faae75c821967e3 2500w" data-optimize="true" data-opv="2" />\
\
### CSRF protection\
\
Webhook requests from Resend need to bypass Laravel's CSRF protection. Be sure to list the URI as an exception in your application's `App\\Http\\Middleware\\VerifyCsrfToken` middleware or list the route outside of the web middleware group:\
\
```php\
protected $except = [\
    'resend/*',\
];\
```\
\
### Verifying webhook signatures\
\
To enable webhook verification, ensure that the `RESEND_WEBHOOK_SECRET` environment variable is set in your application's `.env` file. The **Signing secret** can be retrieved from your [Resend dashboard](https://resend.com/webhooks).\
\
## 5. Try it yourself\
\
<Card title="Laravel Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-laravel-example">\
  See the full source code.\
</Card>\
\
\
# Send emails using Laravel with SMTP\
Source: https://resend.com/docs/send-with-laravel-smtp\
\
Learn how to send your first email using Laravel with SMTP.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Setup your environment\
\
First, configure your Resend SMTP details in your application's `.env` file:\
\
```ini .env\
MAIL_MAILER=smtp\
MAIL_HOST=smtp.resend.com\
MAIL_PORT=587\
MAIL_USERNAME=resend\
MAIL_PASSWORD=re_xxxxxxxxx\
MAIL_ENCRYPTION=tls\
MAIL_FROM_ADDRESS=onboarding@resend.dev\
MAIL_FROM_NAME=Acme\
```\
\
## 2. Send an email\
\
Now you're ready to send emails with Laravel's powerful email service. Here's an example of how you could send your first email using Resend SMTP:\
\
```php OrderShipmentController.php\
<?php\
\
namespace App\\Http\\Controllers;\
\
use App\\Http\\Controllers\\Controller;\
use App\\Mail\\OrderShipped;\
use App\\Models\\Order;\
use Illuminate\\Http\\RedirectResponse;\
use Illuminate\\Http\\Request;\
use Illuminate\\Support\\Facades\\Mail;\
\
class OrderShipmentController extends Controller\
\{\
    /**\
     * Ship the given order.\
     */\
    public function store(Request $request): RedirectResponse\
    \{\
        $order = Order::findOrFail($request->order_id);\
\
        // Ship the order...\
\
        Mail::to($request->user())->send(new OrderShipped($order));\
\
        return redirect('/orders');\
    \}\
\}\
```\
\
## 3. Try it yourself\
\
<Card title="Laravel Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-laravel-example">\
  See the full source code.\
</Card>\
\
\
# Send emails using Liferay with SMTP\
Source: https://resend.com/docs/send-with-liferay-smtp\
\
Learn how to integrate Liferay with Resend SMTP.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Get the Resend SMTP credentials\
\
When configuring your SMTP integration, you'll need to use the following credentials:\
\
* **Host**: `smtp.resend.com`\
* **Port**: `465`\
* **Username**: `resend`\
* **Password**: `YOUR_API_KEY`\
\
## 2. Integrate with Liferay\
\
After logging into your Liferay instance as the admin user, you'll need to enable the SMTP integration.\
\
1. Navigate to **Control Panel** \uc0\u8594  **Server Administration** \u8594  **Mail**.\
\
<img alt="Liferay - SMTP" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/liferay-smtp-1.jpg?maxW=1600&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=5953ba21d328a4edd62f6e7a10c01b70" width="1600" height="865" data-path="images/liferay-smtp-1.jpg" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/liferay-smtp-1.jpg?w=280&maxW=1600&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=fd265219577d59deaab2aa4f1d56f08d 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/liferay-smtp-1.jpg?w=560&maxW=1600&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=83659ad0d56970333bf0371cb952c408 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/liferay-smtp-1.jpg?w=840&maxW=1600&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b7dc8a1fe962fa999e433bbb2d8b5b61 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/liferay-smtp-1.jpg?w=1100&maxW=1600&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=f3e5bc3f572b7ddbad6bd55a252dddf5 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/liferay-smtp-1.jpg?w=1650&maxW=1600&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=9bc9b898596b853cc86bb772c85f41fb 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/liferay-smtp-1.jpg?w=2500&maxW=1600&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=8871ccf2e9481e949c8e5c026ffeecff 2500w" data-optimize="true" data-opv="2" />\
\
2. Copy-and-paste the SMTP credentials from Resend to Liferay.\
\
* **Outgoing SMTP Server**: `smtp.resend.com`\
* **Outgoing Port**: `465`\
* **Enable StartTLS**: `True`\
* **User Name**: `resend`\
* **Password**: `YOUR_API_KEY`\
\
Make sure to replace `YOUR_API_KEY` with an existing key or create a new [API Key](https://resend.com/api-keys).\
\
For the additional JavaMail properties, you can use:\
\
```\
mail.smtp.auth=true\
mail.smtp.starttls.enable=true\
mail.smtp.starttls.required=true\
```\
\
\
# Send emails using Metabase with SMTP\
Source: https://resend.com/docs/send-with-metabase-smtp\
\
Learn how to integrate Metabase with Resend SMTP.\
\
### Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Get the Resend SMTP credentials\
\
When configuring your SMTP integration, you'll need to use the following credentials:\
\
* **Host**: `smtp.resend.com`\
* **Port**: `465`\
* **Username**: `resend`\
* **Password**: `YOUR_API_KEY`\
\
## 2. Integrate with Metabase SMTP\
\
After logging into your [Metabase Cloud](https://www.metabase.com/cloud/login) account, you\'92ll need to enable the SMTP integration.\
\
1. From your Metabase Cloud Admin Panel, go to **Settings > Email** in the left menu. You should see the form below.\
\
<img alt="Metabse Cloud SMTP" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-1.png?maxW=1488&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=3801f85b27de09295982bdfacbbb4a86" width="1488" height="1352" data-path="images/metabase-smtp-1.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-1.png?w=280&maxW=1488&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=8126c0609a6587dc3120cfedab8a0abd 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-1.png?w=560&maxW=1488&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=589b51fd364908963a819487138a5007 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-1.png?w=840&maxW=1488&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=368f7582807d8fa22698a1a5ede84076 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-1.png?w=1100&maxW=1488&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=cd5f9b9f6010b10e53812cfa0d4ab44c 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-1.png?w=1650&maxW=1488&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=8a73fa66816d769a984bff68a90a7d5d 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-1.png?w=2500&maxW=1488&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=938edb0740acfea9d2b4afdfeeb0f77a 2500w" data-optimize="true" data-opv="2" />\
\
2. Copy-and-paste the SMTP credentials from Resend to Metabase Cloud. Finally, click the **Save** button and all of your emails will be sent through Resend.\
\
<img alt="Metabse Cloud SMTP" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-2.png?maxW=3600&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=367b41844a34ba40c1f9a03bfef4b39c" width="3600" height="2250" data-path="images/metabase-smtp-2.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-2.png?w=280&maxW=3600&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=7f5de2673046a1451596ff43c242f0f5 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-2.png?w=560&maxW=3600&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ed932ae713e9c6a99b6ef46b18d4d933 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-2.png?w=840&maxW=3600&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=9f2a25be0f79a14b32f7728917c03479 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-2.png?w=1100&maxW=3600&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1386044a85a11e253180f9c19e44e8dc 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-2.png?w=1650&maxW=3600&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=95bbdcff5678d62e68e62466a3a10714 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-2.png?w=2500&maxW=3600&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1fac987ff530502ad80be3c37a63bb72 2500w" data-optimize="true" data-opv="2" />\
\
\
# Send emails using NextAuth with SMTP\
Source: https://resend.com/docs/send-with-nextauth-smtp\
\
Learn how to send your first email using NextAuth.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
Install the [NextAuth](https://next-auth.js.org/getting-started/example#install-nextauth) package.\
\
<CodeGroup>\
  ```bash npm\
  npm install next-auth\
  ```\
\
  ```bash yarn\
  yarn add next-auth\
  ```\
\
  ```bash pnpm\
  pnpm add next-auth\
  ```\
</CodeGroup>\
\
Then, install the [Nodemailer](https://www.npmjs.com/package/nodemailer) package.\
\
<CodeGroup>\
  ```bash npm\
  npm install nodemailer\
  ```\
\
  ```bash yarn\
  yarn add nodemailer\
  ```\
\
  ```bash pnpm\
  pnpm add nodemailer\
  ```\
</CodeGroup>\
\
## 2. Configure SMTP credentials\
\
Add your Resend SMTP crendentials in your application's `.env` file:\
\
```ini .env\
EMAIL_SERVER_USER=resend\
EMAIL_SERVER_PASSWORD=YOUR_API_KEY\
EMAIL_SERVER_HOST=smtp.resend.com\
EMAIL_SERVER_PORT=465\
EMAIL_FROM=onboarding@resend.dev\
```\
\
## 3. Configure Email Provider\
\
Finally, in your \\[...nextauth].js file (typically located in pages/api/auth), configure the Email provider with your SMTP settings:\
\
```js index.ts\
import NextAuth from 'next-auth';\
import EmailProvider from 'next-auth/providers/email';\
import nodemailer from 'nodemailer';\
\
export default NextAuth(\{\
  providers: [\
    EmailProvider(\{\
      server: \{\
        host: process.env.EMAIL_SERVER_HOST,\
        port: process.env.EMAIL_SERVER_PORT,\
        auth: \{\
          user: process.env.EMAIL_SERVER_USER,\
          pass: process.env.EMAIL_SERVER_PASSWORD,\
        \},\
      \},\
      from: process.env.EMAIL_FROM,\
    \}),\
    // ... other providers as needed\
  ],\
  // ... any other NextAuth.js configs\
\});\
```\
\
\
# Send emails with Next.js\
Source: https://resend.com/docs/send-with-nextjs\
\
Learn how to send your first email using Next.js and the Resend Node.js SDK.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
Prefer watching a video? Check out our video walkthrough below.\
\
<div className="aspect-video">\
  <iframe width="100%" height="100%" src="https://www.youtube.com/embed/UqQxfpTQBaE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen />\
</div>\
\
## 1. Install\
\
Get the Resend Node.js SDK.\
\
<CodeGroup>\
  ```bash npm\
  npm install resend\
  ```\
\
  ```bash yarn\
  yarn add resend\
  ```\
\
  ```bash pnpm\
  pnpm add resend\
  ```\
</CodeGroup>\
\
## 2. Create an email template\
\
Start by creating your email template on `components/email-template.tsx`.\
\
```tsx components/email-template.tsx\
import * as React from 'react';\
\
interface EmailTemplateProps \{\
  firstName: string;\
\}\
\
export function EmailTemplate(\{ firstName \}: EmailTemplateProps) \{\
  return (\
    <div>\
      <h1>Welcome, \{firstName\}!</h1>\
    </div>\
  );\
\}\
```\
\
## 3. Send email using React\
\
Create an API file under `pages/api/send.ts` if you're using the [Pages Router](https://nextjs.org/docs/pages/building-your-application/routing/api-routes) or create a route file under `app/api/send/route.ts` if you're using the [App Router](https://nextjs.org/docs/app/building-your-application/routing/router-handlers).\
\
Import the React email template and send an email using the `react` parameter.\
\
<CodeGroup>\
  ```ts pages/api/send.ts\
  import type \{ NextApiRequest, NextApiResponse \} from 'next';\
  import \{ EmailTemplate \} from '../../components/EmailTemplate';\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend(process.env.RESEND_API_KEY);\
\
  export default async (req: NextApiRequest, res: NextApiResponse) => \{\
    const \{ data, error \} = await resend.emails.send(\{\
      from: 'Acme <onboarding@resend.dev>',\
      to: ['delivered@resend.dev'],\
      subject: 'Hello world',\
      react: EmailTemplate(\{ firstName: 'John' \}),\
    \});\
\
    if (error) \{\
      return res.status(400).json(error);\
    \}\
\
    res.status(200).json(data);\
  \};\
  ```\
\
  ```ts app/api/send/route.ts\
  import \{ EmailTemplate \} from '../../../components/EmailTemplate';\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend(process.env.RESEND_API_KEY);\
\
  export async function POST() \{\
    try \{\
      const \{ data, error \} = await resend.emails.send(\{\
        from: 'Acme <onboarding@resend.dev>',\
        to: ['delivered@resend.dev'],\
        subject: 'Hello world',\
        react: EmailTemplate(\{ firstName: 'John' \}),\
      \});\
\
      if (error) \{\
        return Response.json(\{ error \}, \{ status: 500 \});\
      \}\
\
      return Response.json(data);\
    \} catch (error) \{\
      return Response.json(\{ error \}, \{ status: 500 \});\
    \}\
  \}\
  ```\
</CodeGroup>\
\
## 4. Try it yourself\
\
<CardGroup>\
  <Card title="Next.js Example (Pages Router)" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-nextjs-pages-router-example">\
    See the full source code.\
  </Card>\
\
  <Card title="Next.js Example (App Router)" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-nextjs-app-router-example">\
    See the full source code.\
  </Card>\
</CardGroup>\
\
\
# Send emails with Node.js\
Source: https://resend.com/docs/send-with-nodejs\
\
Learn how to send your first email using the Resend Node.js SDK.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
Get the Resend Node.js SDK.\
\
<CodeGroup>\
  ```bash npm\
  npm install resend\
  ```\
\
  ```bash yarn\
  yarn add resend\
  ```\
\
  ```bash pnpm\
  pnpm add resend\
  ```\
</CodeGroup>\
\
## 2. Send email using HTML\
\
The easiest way to send an email is by using the `html` parameter.\
\
```js server.ts\
import \{ Resend \} from 'resend';\
\
const resend = new Resend('re_xxxxxxxxx');\
\
(async function () \{\
  const \{ data, error \} = await resend.emails.send(\{\
    from: 'Acme <onboarding@resend.dev>',\
    to: ['delivered@resend.dev'],\
    subject: 'Hello World',\
    html: '<strong>It works!</strong>',\
  \});\
\
  if (error) \{\
    return console.error(\{ error \});\
  \}\
\
  console.log(\{ data \});\
\})();\
```\
\
## 3. Try it yourself\
\
<Card title="Node.js Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-node-example">\
  See the full source code.\
</Card>\
\
\
# Send emails using Nodemailer with SMTP\
Source: https://resend.com/docs/send-with-nodemailer-smtp\
\
Learn how to send your first email using Nodemailer with SMTP.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
Get the [Nodemailer](https://www.npmjs.com/package/nodemailer) package.\
\
<CodeGroup>\
  ```bash npm\
  npm install nodemailer\
  ```\
\
  ```bash yarn\
  yarn add nodemailer\
  ```\
\
  ```bash pnpm\
  pnpm add nodemailer\
  ```\
</CodeGroup>\
\
## 2. Send email using SMTP\
\
When configuring your SMTP integration, you'll need to use the following credentials:\
\
* **Host**: `smtp.resend.com`\
* **Port**: `465`\
* **Username**: `resend`\
* **Password**: `YOUR_API_KEY`\
\
Then use these credentials to create a transport:\
\
```js index.ts\
import nodemailer from 'nodemailer';\
\
async function main() \{\
  const transporter = nodemailer.createTransport(\{\
    host: 'smtp.resend.com',\
    secure: true,\
    port: 465,\
    auth: \{\
      user: 'resend',\
      pass: 're_xxxxxxxxx',\
    \},\
  \});\
\
  const info = await transporter.sendMail(\{\
    from: 'onboarding@resend.dev',\
    to: 'delivered@resend.dev',\
    subject: 'Hello World',\
    html: '<strong>It works!</strong>',\
  \});\
\
  console.log('Message sent: %s', info.messageId);\
\}\
\
main().catch(console.error);\
```\
\
## 3. Try it yourself\
\
<Card title="Nodemailer SMTP Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-nodemailer-smtp-example">\
  See the full source code.\
</Card>\
\
\
# Send emails with Nuxt\
Source: https://resend.com/docs/send-with-nuxt\
\
Learn how to send your first email using Nuxt and the Resend Node.js SDK.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
Get the Resend Node.js SDK.\
\
<CodeGroup>\
  ```bash npm\
  npm install resend\
  ```\
\
  ```bash yarn\
  yarn add resend\
  ```\
\
  ```bash pnpm\
  pnpm add resend\
  ```\
</CodeGroup>\
\
## 2. Send email using HTML\
\
Create a [Server Route](https://nuxt.com/docs/guide/directory-structure/server) under `server/api/send.ts`.\
\
The easiest way to send an email is by using the `html` parameter.\
\
<CodeGroup>\
  ```ts server/api/send.ts\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend(process.env.RESEND_API_KEY);\
\
  export default defineEventHandler(async () => \{\
    try \{\
      const data = await resend.emails.send(\{\
        from: 'Acme <onboarding@resend.dev>',\
        to: ['delivered@resend.dev'],\
        subject: 'Hello world',\
        html: '<strong>It works!</strong>',\
      \});\
\
      return data;\
    \} catch (error) \{\
      return \{ error \};\
    \}\
  \});\
  ```\
</CodeGroup>\
\
## 3. Try it yourself\
\
<Card title="Nuxt Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-nuxt-example">\
  See the full source code.\
</Card>\
\
\
# Send emails with Phoenix\
Source: https://resend.com/docs/send-with-phoenix\
\
Learn how to send your first email using Phoenix and the Resend Elixir SDK.\
\
<Info>\
  This guides utilizes an [open source\
  library](https://github.com/elixir-saas/resend-elixir) contributed by a\
  community member. It's not developed, maintained, or supported by Resend\
  directly.\
</Info>\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
Install by adding `resend` to your list of dependencies in `mix.exs`:\
\
<CodeGroup>\
  ```elixir mix.exs\
  def deps do\
    [\
      \{:resend, "~> 0.4.0"\}\
    ]\
  end\
  ```\
</CodeGroup>\
\
## 2. Send email using Swoosh\
\
This library includes a Swoosh adapter to make using Resend with a new Phoenix project as easy as possible. All you have to do is configure your Mailer:\
\
```elixir\
config :my_app, MyApp.Mailer,\
  adapter: Resend.Swoosh.Adapter,\
  api_key: System.fetch_env!("RESEND_API_KEY")\
```\
\
If you're configuring your app for production, configure your adapter in `prod.exs`, and your API key from the environment in `runtime.exs`:\
\
<CodeGroup>\
  ```elixir prod.exs\
  config :my_app, MyApp.Mailer, adapter: Resend.Swoosh.Adapter\
  ```\
\
  ```elixir runtime.exs\
  config :my_app, MyApp.Mailer, api_key: "re_xxxxxxxxx"\
  ```\
</CodeGroup>\
\
## 3. Try it yourself\
\
<Card title="Phoenix Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-phoenix-example">\
  See the full source code.\
</Card>\
\
\
# Send emails with PHP\
Source: https://resend.com/docs/send-with-php\
\
Learn how to send your first email using the Resend PHP SDK.\
\
## Prerequisites\
\
To get the most out of this guide, you will need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
Prefer watching a video? Check out this video walkthrough below.\
\
<div className="aspect-video">\
  <iframe width="100%" height="100%" src="https://www.youtube.com/embed/vJRJ7b4QJHw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen />\
</div>\
\
## 1. Install\
\
Get the Resend PHP SDK.\
\
```bash Composer\
composer require resend/resend-php\
```\
\
## 2. Send email using HTML\
\
The easiest way to send an email is by using the `html` parameter.\
\
```php index.php\
<?php\
\
require __DIR__ . '/vendor/autoload.php';\
\
$resend = Resend::client('re_xxxxxxxxx');\
\
$resend->emails->send([\
  'from' => 'Acme <onboarding@resend.dev>',\
  'to' => ['delivered@resend.dev'],\
  'subject' => 'hello world',\
  'html' => '<strong>it works!</strong>',\
]);\
```\
\
## 3. Try it yourself\
\
<Card title="PHP Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-php-example">\
  See the full source code.\
</Card>\
\
\
# Send emails using PHPMailer with SMTP\
Source: https://resend.com/docs/send-with-phpmailer-smtp\
\
Learn how to send your first email using PHPMailer with SMTP.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
Get the [PHPMailer](https://github.com/PHPMailer/PHPMailer) package.\
\
<CodeGroup>\
  ```bash php\
  composer require phpmailer/phpmailer\
  ```\
</CodeGroup>\
\
## 2. Send email using SMTP\
\
When configuring your SMTP integration, you'll need to use the following credentials:\
\
* **Host**: `smtp.resend.com`\
* **Port**: `587`\
* **Username**: `resend`\
* **Password**: `YOUR_API_KEY`\
\
Then use these credentials to send with PHPMailer:\
\
```php\
<?php\
\
// Include Composer autoload file to load PHPMailer classes\
require __DIR__ . '/vendor/autoload.php';\
\
use PHPMailer\\PHPMailer\\PHPMailer;\
use PHPMailer\\PHPMailer\\Exception;\
\
$mail = new PHPMailer(true);\
\
try \{\
    $mail->isSMTP();\
    $mail->Host = 'smtp.resend.com';\
    $mail->SMTPAuth = true;\
    $mail->Username = 'resend';\
    $mail->Password = 're_xxxxxxxxx';\
    $mail->SMTPSecure = 'tls';\
    $mail->Port = 587;\
\
    // Set email format to HTML\
    $mail->isHTML(true);\
\
    $mail->setFrom('onboarding@resend.dev');\
    $mail->addAddress('delivered@resend.dev');\
    $mail->Subject = 'Hello World';\
    $mail->Body = '<strong>It works!</strong>';\
\
    $mail->send();\
\
    // Log the successfully sent message\
    echo 'Email successfully sent';\
\} catch (Exception $e) \{\
    // Log the detailed error for debugging\
    error_log('Mailer Error: ' . $mail->ErrorInfo);\
    // Show a generic error message to the user\
    echo 'There was an error sending the email.';\
\}\
```\
\
## 3. Try it yourself\
\
<Card title="PHPMailer SMTP Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-phpmailer-smtp-example">\
  See the full source code.\
</Card>\
\
\
# Send emails with Python\
Source: https://resend.com/docs/send-with-python\
\
Learn how to send your first email using the Resend Python SDK.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
Get the Resend Python SDK.\
\
<CodeGroup>\
  ```bash Pip\
  pip install resend\
  ```\
</CodeGroup>\
\
## 2. Send email using HTML\
\
The easiest way to send an email is by using the `html` parameter.\
\
```py index.py\
import os\
import resend\
\
resend.api_key = os.environ["RESEND_API_KEY"]\
\
params: resend.Emails.SendParams = \{\
    "from": "Acme <onboarding@resend.dev>",\
    "to": ["delivered@resend.dev"],\
    "subject": "hello world",\
    "html": "<strong>it works!</strong>",\
\}\
\
email = resend.Emails.send(params)\
print(email)\
```\
\
## 3. Try it yourself\
\
<Card title="Python Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-python-example">\
  See the full source code.\
</Card>\
\
\
# Send emails with Rails\
Source: https://resend.com/docs/send-with-rails\
\
Learn how to send your first email using Rails and the Resend Ruby SDK.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
Get the Resend Ruby SDK.\
\
<CodeGroup>\
  ```bash RubyGems\
  gem install resend\
  ```\
\
  ```bash Gemfile\
  gem 'resend'\
  ```\
</CodeGroup>\
\
## 2. Send email using Rails Action Mailer\
\
This gem can be used as an Action Mailer delivery method.\
\
First, let's update or create your mailer initializer file with your Resend API Key.\
\
```rb config/initializers/mailer.rb\
Resend.api_key = "re_xxxxxxxxx"\
```\
\
Add these lines of code into your environment config file.\
\
```rb config/environments/environment.rb\
config.action_mailer.delivery_method = :resend\
```\
\
Then create a `UserMailer` class definition.\
\
```rb app/mailers/user_mailer.rb\
class UserMailer < ApplicationMailer\
  default from: 'Acme <onboarding@resend.dev>' # this domain must be verified with Resend\
  def welcome_email\
    @user = params[:user]\
    @url = 'http://example.com/login'\
    mail(to: ["delivered@resend.dev"], subject: 'hello world')\
  end\
end\
```\
\
And create your ERB email template.\
\
```html app/views/user_mailer/welcome_email.html.erb\
<!doctype html>\
<html>\
  <head>\
    <meta content="text/html; charset=UTF-8" http-equiv="Content-Type" />\
  </head>\
  <body>\
    <h1>Welcome to example.com, <%= @user.name %></h1>\
    <p>You have successfully signed up to example.com,</p>\
    <p>To login to the site, just follow this link: <%= @url %>.</p>\
    <p>Thanks for joining and have a great day!</p>\
  </body>\
</html>\
```\
\
Initialize your `UserMailer` class. This should return a `UserMailer` instance.\
\
```rb\
u = User.new name: "derich"\
mailer = UserMailer.with(user: u).welcome_email\
\
# => #<Mail::Message:153700, Multipart: false, Headers: <From: from@example.com>, <To: to@example.com>, <Subject: hello world>, <Mime-Version: 1.0>...\
```\
\
Finally, you can now send emails using the `deliver_now!` method:\
\
```rb\
mailer.deliver_now!\
\
# => \{:id=>"a193c81e-9ac5-4708-a569-5caf14220539", :from=>....\}\
```\
\
## 3. Try it yourself\
\
<Card title="Rails Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-rails-example">\
  See the full source code.\
</Card>\
\
\
# Send emails using Rails with SMTP\
Source: https://resend.com/docs/send-with-rails-smtp\
\
Learn how to integrate Rails with Resend SMTP.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Setup your environment\
\
Add these lines of code into your environment config file.\
\
```rb config/environments/environment.rb\
config.action_mailer.delivery_method = :smtp\
config.action_mailer.smtp_settings = \{\
  :address   => 'smtp.resend.com',\
  :port      => 465,\
  :user_name => 'resend',\
  :password  => ENV['RESEND_API_KEY'],\
  :tls => true\
\}\
```\
\
## 2. Send email using Rails Action Mailer\
\
Then create a `UserMailer` class definition.\
\
```rb app/mailers/user_mailer.rb\
class UserMailer < ApplicationMailer\
  default from: 'Acme <onboarding@resend.dev>' # this domain must be verified with Resend\
  def welcome_email\
    @user = params[:user]\
    @url = 'http://example.com/login'\
    mail(to: ["delivered@resend.dev"], subject: 'hello world')\
  end\
end\
```\
\
And create your ERB email template.\
\
```html app/views/user_mailer/welcome_email.html.erb\
<!doctype html>\
<html>\
  <head>\
    <meta content="text/html; charset=UTF-8" http-equiv="Content-Type" />\
  </head>\
  <body>\
    <h1>Welcome to example.com, <%= @user.name %></h1>\
    <p>You have successfully signed up to example.com,</p>\
    <p>To login to the site, just follow this link: <%= @url %>.</p>\
    <p>Thanks for joining and have a great day!</p>\
  </body>\
</html>\
```\
\
Initialize your `UserMailer` class. This should return a `UserMailer` instance.\
\
```rb\
u = User.new name: "derich"\
mailer = UserMailer.with(user: u).welcome_email\
\
# => #<Mail::Message:153700, Multipart: false, Headers: <From: from@example.com>, <To: to@example.com>, <Subject: hello world>, <Mime-Version: 1.0>...\
```\
\
Finally, you can now send emails using the `deliver_now!` method:\
\
```rb\
mailer.deliver_now!\
\
# => \{:id=>"a193c81e-9ac5-4708-a569-5caf14220539", :from=>....\}\
```\
\
## 3. Try it yourself\
\
<Card title="Rails SMTP Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-rails-smtp-example">\
  See the full source code.\
</Card>\
\
\
# Send emails with RedwoodJS\
Source: https://resend.com/docs/send-with-redwoodjs\
\
Learn how to send your first email using Redwood.js and the Resend Node.js SDK.\
\
### Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
### 1. Install\
\
Get the Resend Node.js SDK.\
\
<CodeGroup>\
  ```bash yarn\
  yarn workspace api add resend\
  ```\
</CodeGroup>\
\
### 2. Send email using HTML\
\
```bash\
yarn rw g function send\
```\
\
The easiest way to send an email is by using the `html` parameter.\
\
```ts api/src/functions/send/send.ts\
import \{ Resend \} from 'resend';\
import type \{ APIGatewayEvent, Context \} from 'aws-lambda';\
\
const resend = new Resend('re_xxxxxxxxx');\
\
export const handler = async (event: APIGatewayEvent, context: Context) => \{\
  const \{ data, error \} = await resend.emails.send(\{\
    from: 'Acme <onboarding@resend.dev>',\
    to: ['delivered@resend.dev'],\
    subject: 'hello world',\
    html: '<strong>it works!</strong>',\
  \});\
\
  if (error) \{\
    return \{\
      statusCode: 500,\
      headers: \{ 'Content-Type': 'application/json' \},\
      body: JSON.stringify(\{ error \}),\
    \};\
  \}\
\
  return \{\
    statusCode: 200,\
    headers: \{ 'Content-Type': 'application/json' \},\
    body: JSON.stringify(\{ data \}),\
  \};\
\};\
```\
\
### 3. Try it yourself\
\
<Card title="Redwood.js Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-redwoodjs-example">\
  See the full source code.\
</Card>\
\
\
# Send emails with Remix\
Source: https://resend.com/docs/send-with-remix\
\
Learn how to send your first email using Remix and the Resend Node.js SDK.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
Get the Resend Node.js SDK.\
\
<CodeGroup>\
  ```bash npm\
  npm install resend\
  ```\
\
  ```bash yarn\
  yarn add resend\
  ```\
\
  ```bash pnpm\
  pnpm add resend\
  ```\
</CodeGroup>\
\
## 2. Send email using HTML\
\
Create a [Resource Route](https://remix.run/docs/en/1.16.1/guides/resource-routes) under `app/routes/send.ts`.\
\
The easiest way to send an email is by using the `html` parameter.\
\
<CodeGroup>\
  ```ts app/routes/send.ts\
  import \{ json \} from '@remix-run/node';\
  import \{ Resend \} from 'resend';\
\
  const resend = new Resend(process.env.RESEND_API_KEY);\
\
  export const loader = async () => \{\
    const \{ data, error \} = await resend.emails.send(\{\
      from: 'Acme <onboarding@resend.dev>',\
      to: ['delivered@resend.dev'],\
      subject: 'Hello world',\
      html: '<strong>It works!</strong>',\
    \});\
\
    if (error) \{\
      return json(\{ error \}, 400);\
    \}\
\
    return json(data, 200);\
  \};\
  ```\
</CodeGroup>\
\
## 3. Try it yourself\
\
<Card title="Remix Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-remix-example">\
  See the full source code.\
</Card>\
\
\
# Send emails using Retool with SMTP\
Source: https://resend.com/docs/send-with-retool-smtp\
\
Learn how to integrate Retool with Resend SMTP.\
\
### Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Get the Resend SMTP credentials\
\
When configuring your SMTP integration, you'll need to use the following credentials:\
\
* **Host**: `smtp.resend.com`\
* **Port**: `465`\
* **Username**: `resend`\
* **Password**: `YOUR_API_KEY`\
\
## 2. Integrate with Retool SMTP\
\
Log into your [Retool](https://retool.com) account and create a new SMTP Resource.\
\
1. Go to **Resources** and click **Create New**\
\
<img alt="Retool SMTP - Create new Resources" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-1.png?maxW=3025&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=85dc7831f3f8242032b4257b32e07bd0" width="3025" height="1892" data-path="images/retool-smtp-1.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-1.png?w=280&maxW=3025&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1970e2dd42c03d7cba801a7a403869dc 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-1.png?w=560&maxW=3025&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=aba9bbc14d2adb282774d4f2125560b0 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-1.png?w=840&maxW=3025&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=33e831287efe0693505213c7b9e17f83 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-1.png?w=1100&maxW=3025&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=414d563a08f5c398b4b102d64014a14a 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-1.png?w=1650&maxW=3025&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b88e575ed99d3e8d3e265a68d01b2ba9 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-1.png?w=2500&maxW=3025&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=422b56a39ac69e85782a916967109e4b 2500w" data-optimize="true" data-opv="2" />\
\
2. Search for **SMTP** and select it\
\
<img alt="Retool SMTP - Search for SMTP" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-2.png?maxW=3025&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=12339db9ca5b2c3fb6b829a9398b49c6" width="3025" height="1891" data-path="images/retool-smtp-2.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-2.png?w=280&maxW=3025&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=185de8056e10c10cca12018bfbd6ebde 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-2.png?w=560&maxW=3025&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=10eb059a81034a2ce88361d2f04ed9a8 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-2.png?w=840&maxW=3025&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=501a5de506f796d84f9772e6d6c71a3b 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-2.png?w=1100&maxW=3025&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=8dd3fd373270d4ff8fd28b92dfb51067 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-2.png?w=1650&maxW=3025&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=3857dd562c8f4a2e4a1d2585b5f83806 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-2.png?w=2500&maxW=3025&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ff9db560a5b0583404018ada26abb8f0 2500w" data-optimize="true" data-opv="2" />\
\
3. Add name and SMTP credentials\
\
<img alt="Retool SMTP - Add SMTP credentials" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-3.png?maxW=3025&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=f65ab94bf9f353670cf9687efcb098d3" width="3025" height="1892" data-path="images/retool-smtp-3.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-3.png?w=280&maxW=3025&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ed6d13bfe504a6099b3493da29480e0c 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-3.png?w=560&maxW=3025&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=0e6435442a6e50260b9464ee96110d7e 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-3.png?w=840&maxW=3025&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=400c867df192e805a4e5c5ddaefb32f2 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-3.png?w=1100&maxW=3025&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=2056a9399a1d64ddfbaab0665941ba7b 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-3.png?w=1650&maxW=3025&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=809601f6b519d2c97f2314ac67e86135 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-3.png?w=2500&maxW=3025&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c6cd0093505091a1539482dd910a50e8 2500w" data-optimize="true" data-opv="2" />\
\
\
# Send emails with Ruby\
Source: https://resend.com/docs/send-with-ruby\
\
Learn how to send your first email using the Resend Ruby SDK.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
Get the Resend Ruby SDK.\
\
<CodeGroup>\
  ```bash RubyGems\
  gem install resend\
  ```\
\
  ```bash Gemfile\
  gem 'resend'\
  ```\
</CodeGroup>\
\
## 2. Send email using HTML\
\
The easiest way to send an email is by using the `html` parameter.\
\
```rb index.rb\
require "resend"\
\
Resend.api_key = "re_xxxxxxxxx"\
\
params = \{\
  "from": "Acme <onboarding@resend.dev>",\
  "to": ["delivered@resend.dev"],\
  "subject": "hello world",\
  "html": "<strong>it works!</strong>"\
\}\
\
sent = Resend::Emails.send(params)\
puts sent\
```\
\
## 3. Try it yourself\
\
<Card title="Ruby Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-ruby-example">\
  See the full source code.\
</Card>\
\
\
# Send emails with Rust\
Source: https://resend.com/docs/send-with-rust\
\
Learn how to send your first email using the Resend Rust SDK.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
\
## Install\
\
First, create a rust project with cargo and `cd` into it.\
\
```bash\
cargo init resend-rust-example\
cd resend-rust-example\
```\
\
Next, add add the Rust Resend SDK as well as [Tokio](https://tokio.rs):\
\
```bash\
cargo add resend-rs\
cargo add tokio -F macros,rt-multi-thread\
```\
\
The Rust SDK is Async-first so Tokio is needed.\
\
## Send email\
\
```rust\
use resend_rs::types::CreateEmailBaseOptions;\
use resend_rs::\{Resend, Result\};\
\
#[tokio::main]\
async fn main() -> Result<()> \{\
  let resend = Resend::new("re_xxxxxxxxx");\
\
  let from = "Acme <onboarding@resend.dev>";\
  let to = ["delivered@resend.dev"];\
  let subject = "Hello World";\
\
  let email = CreateEmailBaseOptions::new(from, to, subject)\
    .with_html("<strong>It works!</strong>");\
\
  let _email = resend.emails.send(email).await?;\
\
  Ok(())\
\}\
```\
\
## Reading the API key\
\
Instead of using `Resend::new` and hardcoding the API key, the `RESEND_API_KEY` environment variable\
can be used instead. The `Resend::default()` should be used in that scenario instead.\
\
### Reading the API key from a `.env` file\
\
Another popular option is to use a `.env` file for environment variables. You can use the\
[`dotenvy`](https://crates.io/crates/dotenvy) crate for that:\
\
```bash\
cargo add dotenvy\
```\
\
```rust\
// main.rs\
use dotenvy::dotenv;\
use resend_rs::types::CreateEmailBaseOptions;\
use resend_rs::\{Resend, Result\};\
\
#[tokio::main]\
async fn main() -> Result<()> \{\
  let _env = dotenv().unwrap();\
\
  let resend = Resend::default();\
\
  let from = "Acme <onboarding@resend.dev>";\
  let to = ["delivered@resend.dev"];\
  let subject = "Hello World";\
\
  let email = CreateEmailBaseOptions::new(from, to, subject)\
    .with_html("<strong>It works!</strong>");\
\
  let _email = resend.emails.send(email).await?;\
\
  Ok(())\
\}\
```\
\
```toml\
# .env\
RESEND_API_KEY=re_xxxxxxxxx\
```\
\
\
# Send emails with Sinatra\
Source: https://resend.com/docs/send-with-sinatra\
\
Learn how to send your first email using Sinatra and the Resend Ruby SDK.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
Get the Resend Ruby SDK.\
\
<CodeGroup>\
  ```bash RubyGems\
  gem install resend\
  ```\
\
  ```bash Gemfile\
  gem 'resend'\
  ```\
</CodeGroup>\
\
## 2. Send email using HTML\
\
The easiest way to send an email is by using the `html` parameter.\
\
```rb index.rb\
require "sinatra"\
require "resend"\
\
set :port, 5000\
set :bind, "0.0.0.0"\
\
Resend.api_key = ENV["RESEND_API_KEY"]\
\
get "/" do\
\
  content_type :json\
\
  params = \{\
    from: 'Acme <onboarding@resend.dev>',\
    to: ['delivered@resend.dev'],\
    subject: 'hello world',\
    html: '<strong>it works!</strong>',\
  \}\
\
  Resend::Emails.send(params).to_hash.to_json\
end\
```\
\
## 3. Try it yourself\
\
<Card title="Sinatra Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-sinatra-example">\
  See the full source code.\
</Card>\
\
\
# Send emails with SMTP\
Source: https://resend.com/docs/send-with-smtp\
\
Learn how to integrate Resend via SMTP.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
Prefer watching a video? Check out our video walkthrough below.\
\
<div className="aspect-video">\
  <iframe width="100%" height="100%" src="https://www.youtube.com/embed/MM1JE6-inmc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen />\
</div>\
\
## SMTP Credentials\
\
When configuring your SMTP integration, you'll need to use the following credentials:\
\
* **Host**: `smtp.resend.com`\
* **Port**: `25`, `465`, `587`, `2465`, or `2587`\
* **Username**: `resend`\
* **Password**: `YOUR_API_KEY`\
\
Ports help to instruct the type of security you want to use in your SMTP connection.\
\
| Type     | Port                | Security                                                                  |\
| -------- | ------------------- | ------------------------------------------------------------------------- |\
| SMTPS    | `465`, `2465`       | Implicit SSL/TLS (Immediately connects via SSL/TLS)                       |\
| STARTTLS | `25`, `587`, `2587` | Explicit SSL/TLS (First connects via plaintext, then upgrades to SSL/TLS) |\
\
## Custom Headers\
\
If your SMTP client supports it, you can add custom headers to your emails.\
\
Here are some common use cases for custom headers:\
\
* Prevent threading on Gmail with the `X-Entity-Ref-ID` header\
* Include a shortcut for users to unsubscribe with the `List-Unsubscribe` header\
\
## FAQ\
\
Once configured, you should be able to start sending emails via SMTP. Below are some frequently asked questions:\
\
<AccordionGroup>\
  <Accordion title="What if I need logs from the server to debug?">\
    We currently don't provide SMTP server logs for debugging. If you run into\
    issues, please [reach out to support](https://resend.com/help).\
  </Accordion>\
\
  <Accordion title="Where do I see the emails sent with SMTP?">\
    Emails sent with SMTP will show in your [emails\
    table](https://resend.com/emails).\
  </Accordion>\
\
  <Accordion title="Does the rate limit apply when sending with SMTP?">\
    Yes, the rate limit is the [same as the\
    API](https://resend.com/docs/api-reference/introduction#rate-limit).\
  </Accordion>\
</AccordionGroup>\
\
\
# Send emails with Supabase Edge Functions\
Source: https://resend.com/docs/send-with-supabase-edge-functions\
\
Learn how to send your first email using Supabase Edge Functions.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
Make sure you have the latest version of the [Supabase CLI](https://supabase.com/docs/guides/cli#installation) installed.\
\
## 1. Create Supabase function\
\
Create a new function locally:\
\
```bash\
supabase functions new resend\
```\
\
## 2. Edit the handler function\
\
Paste the following code into the `index.ts` file:\
\
```js index.ts\
import \{ serve \} from "https://deno.land/std@0.168.0/http/server.ts";\
\
const RESEND_API_KEY = 're_xxxxxxxxx';\
\
const handler = async (_request: Request): Promise<Response> => \{\
    const res = await fetch('https://api.resend.com/emails', \{\
        method: 'POST',\
        headers: \{\
            'Content-Type': 'application/json',\
            'Authorization': `Bearer $\{RESEND_API_KEY\}`\
        \},\
        body: JSON.stringify(\{\
            from: 'Acme <onboarding@resend.dev>',\
            to: ['delivered@resend.dev'],\
            subject: 'hello world',\
            html: '<strong>it works!</strong>',\
        \})\
    \});\
\
    const data = await res.json();\
\
    return new Response(JSON.stringify(data), \{\
        status: 200,\
        headers: \{\
            'Content-Type': 'application/json',\
        \},\
    \});\
\};\
\
serve(handler);\
```\
\
## 3. Deploy and send email\
\
Run function locally:\
\
```bash\
supabase functions start\
supabase functions serve resend --no-verify-jwt\
```\
\
Deploy function to Supabase:\
\
```bash\
supabase functions deploy resend\
```\
\
Open the endpoint URL to send an email:\
\
<img alt="Supabase Edge Functions - Deploy Function" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-edge-functions-deploy-function.png?maxW=3414&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=640dc2673cc6927c290b59660322e173" width="3414" height="1886" data-path="images/supabase-edge-functions-deploy-function.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-edge-functions-deploy-function.png?w=280&maxW=3414&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=959a09ae039aa1b6a61207f9307281d1 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-edge-functions-deploy-function.png?w=560&maxW=3414&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=0fb23de69143b3fb13f264aaf8ba46be 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-edge-functions-deploy-function.png?w=840&maxW=3414&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=4dd828a5ead12ec3f75351a22bc5fd74 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-edge-functions-deploy-function.png?w=1100&maxW=3414&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=5bb81f67eecea6595d5b4fca0762e786 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-edge-functions-deploy-function.png?w=1650&maxW=3414&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=eb5e71b804a2a300e724b510267e6450 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-edge-functions-deploy-function.png?w=2500&maxW=3414&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=54f425bba832d95edfaba19303d1fa91 2500w" data-optimize="true" data-opv="2" />\
\
## 4. Try it yourself\
\
<Card title="Supabase Edge Functions Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-supabase-edge-functions-example">\
  See the full source code.\
</Card>\
\
\
# Send emails using Supabase with SMTP\
Source: https://resend.com/docs/send-with-supabase-smtp\
\
Learn how to integrate Supabase Auth with Resend SMTP.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Get the Resend SMTP credentials\
\
When configuring your SMTP integration, you'll need to use the following credentials:\
\
* **Host**: `smtp.resend.com`\
* **Port**: `465`\
* **Username**: `resend`\
* **Password**: `YOUR_API_KEY`\
\
## 2. Integrate with Supabase SMTP\
\
After logging into your Supabase account, you'll need to enable the SMTP integration.\
\
1. Go to your Supabase project\
2. Click on **Project Settings** in the left sidebar\
3. Select the **Authentication** tab\
4. Find the SMTP section and toggle the **Enable Custom SMTP** option\
5. Add your Sender email and name (these are required fields). For example: `support@acme.com` and `ACME Support`.\
\
<img alt="Supabase Auth - SMTP Sender email and name settings" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-sender-email-name.png?maxW=2080&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=41633ca39e64554de1fe45455ba40973" width="2080" height="618" data-path="images/supabase-auth-smtp-sender-email-name.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-sender-email-name.png?w=280&maxW=2080&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=8767b2953ca85411687fb1e40b5603ae 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-sender-email-name.png?w=560&maxW=2080&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=686848c84f2cff1b57cae4167c6f9c36 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-sender-email-name.png?w=840&maxW=2080&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=35f9fdc0b47acff4046cae8a894160df 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-sender-email-name.png?w=1100&maxW=2080&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=941652d200670cb48efc7c345a549a60 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-sender-email-name.png?w=1650&maxW=2080&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=8b06f1181e24234fd43d0b2994900bbf 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-sender-email-name.png?w=2500&maxW=2080&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=2052e5aa247935ec2102b1da4f8646ac 2500w" data-optimize="true" data-opv="2" />\
\
6. You can copy-and-paste the [SMTP credentials](https://resend.com/settings/smtp) from Resend to Supabase.\
\
<img alt="Supabase Auth - SMTP Settings" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-settings.png?maxW=2076&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=06283b94b1b14e20c9fb1d1584e1449f" width="2076" height="1536" data-path="images/supabase-auth-smtp-settings.png" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-settings.png?w=280&maxW=2076&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=fdcd43d8f806adf4f6334804f00e91bf 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-settings.png?w=560&maxW=2076&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ee43420c3ea82898f0640c0eb885b446 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-settings.png?w=840&maxW=2076&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=9474a29c4d75be361d55b18b9c2d2d34 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-settings.png?w=1100&maxW=2076&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=58f85001891df78496f634aac5eef315 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-settings.png?w=1650&maxW=2076&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=21982b10c0a7bc24626a3af5da77faf0 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-settings.png?w=2500&maxW=2076&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d669323096b4d870cd104eafa8060a3e 2500w" data-optimize="true" data-opv="2" />\
\
After that, you can click the **Save** button and all of your emails will be sent through Resend.\
\
\
# Send emails with SvelteKit\
Source: https://resend.com/docs/send-with-sveltekit\
\
Learn how to send your first email using SvelteKit and the Resend Node.js SDK.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
Get the Resend Node.js SDK.\
\
<CodeGroup>\
  ```bash npm\
  npm install resend\
  ```\
\
  ```bash yarn\
  yarn add resend\
  ```\
\
  ```bash pnpm\
  pnpm add resend\
  ```\
</CodeGroup>\
\
## 2. Send email using HTML\
\
Create a [+server API route](https://svelte.dev/docs/kit/routing#server) under `src/routes/send/+server.ts`.\
\
The easiest way to send an email is by using the `html` parameter.\
\
<CodeGroup>\
  ```ts src/routes/send/+server.ts\
  import \{ Resend \} from 'resend';\
  import \{ RESEND_API_KEY \} from '$env/static/private'; // define in your .env file\
\
  const resend = new Resend(RESEND_API_KEY);\
\
  export async function POST() \{\
    try \{\
      const \{ data, error \} = await resend.emails.send(\{\
        from: 'Acme <onboarding@resend.dev>',\
        to: ['delivered@resend.dev'],\
        subject: 'Hello world',\
        html: '<p>Hello world</p>',\
      \});\
\
      if (error) \{\
        return Response.json(\{ error \}, \{ status: 500 \});\
      \}\
\
      return Response.json(\{ data \});\
    \} catch (error) \{\
      return Response.json(\{ error \}, \{ status: 500 \});\
    \}\
  \}\
  ```\
</CodeGroup>\
\
## 3. Try it yourself\
\
<CardGroup>\
  <Card title="SvelteKit Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-svelte-kit-example">\
    See the full source code.\
  </Card>\
</CardGroup>\
\
\
# Send emails with Symfony\
Source: https://resend.com/docs/send-with-symfony\
\
Learn how to send your first email using the Symfony Resend Mailer Bridge.\
\
## Prerequisites\
\
To get the most out of this guide, you will need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install\
\
Get the Resend Mailer Bridge package.\
\
```bash Composer\
composer require symfony/resend-mailer\
```\
\
If your application relies on Resend webhook events, you should also install the Symfony Webhook Component.\
\
```bash Composer\
composer require symfony/webhook\
```\
\
## 2. Configuring Mailer\
\
In your `.env.local` file, which you can create if needed, add the following:\
\
```sh\
MAILER_DSN=resend+api://API_KEY@default\
MAILER_RESEND_SECRET=SIGNING_SECRET\
```\
\
Replace `API_KEY` with your Resend API key, and `SIGNING_SECRET` with your webhook secret, which can be retrieved from the Resend dashboard after creating a new webhook endpoint (see below).\
\
## 3. Send your first email\
\
In a controller, inject the `Mailer`:\
\
```php\
public function __construct(\
    private readonly MailerInterface $mailer,\
) \{\
\}\
```\
\
In a controller action, use the `$this->mailer` to send your email:\
\
```php\
$this->mailer->send(\
    (new Email())\
        ->from('Acme <onboarding@resend.dev>')\
        ->to('delivered@resend.dev')\
        ->subject('Hello world')\
        ->html('<strong>it works!</strong>')\
);\
```\
\
Learn more about sending emails with Mailer Component in [Symfony's documentation](https://symfony.com/doc/current/mailer.html#creating-sending-messages).\
\
## 4. Receive and handle webhooks\
\
Thanks to the Webhook Component, you can create a webhook listener.\
\
```php src/Webhook/ResendWebhookListener.php\
#[AsRemoteEventConsumer('mailer_resend')]\
readonly class ResendWebhookListener implements ConsumerInterface\
\{\
    public function __construct(\
        #[Autowire(param: 'kernel.project_dir')] private string $projectDir,\
    ) \{\
    \}\
\
    public function consume(RemoteEvent $event): void\
    \{\
        if ($event instanceof MailerDeliveryEvent) \{\
            $this->handleMailDelivery($event);\
        \} elseif ($event instanceof MailerEngagementEvent) \{\
            $this->handleMailEngagement($event);\
        \} else \{\
            // This is not an email event\
            return;\
        \}\
    \}\
\
    private function handleMailDelivery(MailerDeliveryEvent $event): void\
    \{\
        // Todo\
    \}\
\
    private function handleMailEngagement(MailerEngagementEvent $event): void\
    \{\
        // Todo\
    \}\
\}\
```\
\
Bind your listener to the Webhook routing config:\
\
```yaml config/packages/webhook.yaml\
framework:\
  webhook:\
    routing:\
      mailer_resend:\
        service: 'mailer.webhook.request_parser.resend'\
        secret: '%env(MAILER_RESEND_SECRET)%'\
```\
\
Next, register your application's webhook endpoint URL (example: `https://\{app_domain\}/webhook/mailer_resend`) in the [Resend Dashboard](https://resend.com/webhooks):\
\
## 5. Try it yourself\
\
<Card title="Symfony Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-symfony-example">\
  See the full source code.\
</Card>\
\
\
# Send emails with Vercel Functions\
Source: https://resend.com/docs/send-with-vercel-functions\
\
Learn how to send your first email using Vercel Functions.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
Make sure you have the latest version of the [Vercel CLI](https://vercel.com/docs/cli#installing-vercel-cli) installed.\
\
## 1. Create a Next.js function\
\
Create a route file under `app/api/send/route.ts` if you're using the [App Router](https://nextjs.org/docs/app/building-your-application/routing/router-handlers).\
\
```js route.ts\
const RESEND_API_KEY = 're_xxxxxxxxx';\
\
export async function POST() \{\
  const res = await fetch('https://api.resend.com/emails', \{\
    method: 'POST',\
    headers: \{\
      'Content-Type': 'application/json',\
      'Authorization': `Bearer $\{RESEND_API_KEY\}`,\
    \},\
    body: JSON.stringify(\{\
      from: 'Acme <onboarding@resend.dev>',\
      to: ['delivered@resend.dev'],\
      subject: 'hello world',\
      html: '<strong>it works!</strong>',\
    \}),\
  \});\
\
  if (res.ok) \{\
    const data = await res.json();\
    return Response.json(data);\
  \}\
\}\
```\
\
## 2. Send email locally\
\
Run function locally:\
\
```bash\
npx next dev\
```\
\
Open the endpoint URL to send an email: `http://localhost:3000/api/send`\
\
## 3. Send email in production\
\
Deploy function to Vercel:\
\
```bash\
vercel\
```\
\
Open the endpoint URL to send an email: `https://your-project.vercel.app/api/send`\
\
## 4. Try it yourself\
\
<Card title="Vercel Functions Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-vercel-functions-example">\
  See the full source code.\
</Card>\
\
\
# Send emails using WordPress with SMTP\
Source: https://resend.com/docs/send-with-wordpress-smtp\
\
Learn how to send your first email using Wordpress.\
\
## Prerequisites\
\
To get the most out of this guide, you'll need to:\
\
* [Create an API key](https://resend.com/api-keys)\
* [Verify your domain](https://resend.com/domains)\
\
## 1. Install a plugin\
\
First, you'll need to install and activate the [WP Mail SMTP](https://wordpress.org/plugins/wp-mail-smtp/) plugin. Once the plugin is activated you will see the setup wizard. You can skip this step as we'll guide you through how to configure the plugin for Resend. Just click on **Go to the Dashboard** at the bottom of the screen to exit the setup wizard.\
\
<img alt="WP Mail SMTP - Setup Wizard" src="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-setup-wizard.png?maxW=2880&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=64cce98ad63f8464a14826c9a0dabd23" width="2880" height="1462" data-path="images/wordpress-setup-wizard.png" srcset="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-setup-wizard.png?w=280&maxW=2880&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=77a00eeeab9cd4958df9face34061933 280w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-setup-wizard.png?w=560&maxW=2880&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=497ef603c5e6b0fcca135893756799d1 560w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-setup-wizard.png?w=840&maxW=2880&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=9431292eca9b6d9cf197f4366ae01791 840w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-setup-wizard.png?w=1100&maxW=2880&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=80fd8bceb78e4bf05b866fb212d15a5c 1100w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-setup-wizard.png?w=1650&maxW=2880&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=2a3aa6c1336985ab20cb536679c25be1 1650w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-setup-wizard.png?w=2500&maxW=2880&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=74e6b2a9a3032d2ed3b7e59cf6adf877 2500w" data-optimize="true" data-opv="2" />\
\
## 2. Configuration\
\
From your admin dashboard, visit the **WP Mail SMTP > Settings** page to configure the plugin. Firstly, configure your **From Email**, **From Name**, and **Return Path**. Next, we'll configure the SMTP settings for Resend. Select **Other SMTP** in the **Mailer** section.\
\
<img alt="WP Mail SMTP - Settings" src="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-configure.png?maxW=2880&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=b43d5634275c5d66102c968f8da13727" width="2880" height="1462" data-path="images/wordpress-configure.png" srcset="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-configure.png?w=280&maxW=2880&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=ab34e501ce3d8b28f770f31ea284b0ca 280w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-configure.png?w=560&maxW=2880&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=1c3f55e0032dd30cbe9bcb7a6dd97f6a 560w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-configure.png?w=840&maxW=2880&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=ed3d8f97df4a1e6eafa5d281a84647e0 840w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-configure.png?w=1100&maxW=2880&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=72810d6cabe5145d83de2a4ea204b668 1100w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-configure.png?w=1650&maxW=2880&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=592bf0cc4f84344d574618c819d0d24c 1650w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-configure.png?w=2500&maxW=2880&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=270c45762e6ca04bb397760955ec8219 2500w" data-optimize="true" data-opv="2" />\
\
In the **Other SMTP** section, configure the following settings:\
\
* **SMTP Host**: `smtp.resend.com`\
* **Encryption**: `SSL`\
* **SMTP Port**: `465`\
* **Auto TLS**: `ON`\
* **Authentication**: `ON`\
* **SMTP Username**: `resend`\
* **SMTP Password**: `YOUR_API_KEY`\
\
Make sure to replace `YOUR_API_KEY` with an existing key or create a new [API Key](https://resend.com/api-keys).\
\
## 3. Sending a test email\
\
From your admin dashboard, visit the **WP Mail SMTP > Tools** page to send a test email.\
\
<img alt="WP Mail SMTP - Send a Test Email" src="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-test-email.png?maxW=2880&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=74f287b839a23570261e7aab8debae9e" width="2880" height="1462" data-path="images/wordpress-test-email.png" srcset="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-test-email.png?w=280&maxW=2880&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=cc4730a3ec971e517ca90e4d2df51dbb 280w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-test-email.png?w=560&maxW=2880&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=6db6f47ef22116e5b8fb8d0689e2dc9a 560w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-test-email.png?w=840&maxW=2880&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=e1e91e7f98f9d60bb45ecf1e23ceee8e 840w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-test-email.png?w=1100&maxW=2880&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=33b3039234ca4c77163a0f98ca93d956 1100w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-test-email.png?w=1650&maxW=2880&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=362de80c70ecf17fb32930b566ba769e 1650w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-test-email.png?w=2500&maxW=2880&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=adf35580c0a3b80ac1e0401276fc34e2 2500w" data-optimize="true" data-opv="2" />\
\
}